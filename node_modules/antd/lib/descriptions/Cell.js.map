{"version":3,"sources":["descriptions/Cell.jsx"],"names":["notEmpty","val","undefined","Cell","itemPrefixCls","component","span","className","style","bordered","label","content","colon","Component"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;AACA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,SAAOA,GAAG,KAAKC,SAAR,IAAqBD,GAAG,KAAK,IAApC;AACH;;AACD,IAAME,IAAI,GAAG,SAAPA,IAAO,OAA4F;AAAA,MAAzFC,aAAyF,QAAzFA,aAAyF;AAAA,MAA1EC,SAA0E,QAA1EA,SAA0E;AAAA,MAA/DC,IAA+D,QAA/DA,IAA+D;AAAA,MAAzDC,SAAyD,QAAzDA,SAAyD;AAAA,MAA9CC,KAA8C,QAA9CA,KAA8C;AAAA,MAAvCC,QAAuC,QAAvCA,QAAuC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,MAAtBC,OAAsB,QAAtBA,OAAsB;AAAA,MAAbC,KAAa,QAAbA,KAAa;AACrG,MAAMC,SAAS,GAAGR,SAAlB;;AACA,MAAII,QAAJ,EAAc;AAAA;;AACV,WAAQ,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAE,sFACtBL,aADsB,kBACOJ,QAAQ,CAACU,KAAD,CADf,0CAEtBN,aAFsB,oBAESJ,QAAQ,CAACW,OAAD,CAFjB,iBAG3BJ,SAH2B,CAAtB;AAGO,MAAA,KAAK,EAAEC,KAHd;AAGqB,MAAA,OAAO,EAAEF;AAH9B,OAIPN,QAAQ,CAACU,KAAD,CAAR,GAAkBA,KAAlB,GAA0BC,OAJnB,CAAR;AAMH;;AACD,SAAQ,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAE,sCAAcP,aAAd,YAAoCG,SAApC,CAAtB;AAAsE,IAAA,KAAK,EAAEC,KAA7E;AAAoF,IAAA,OAAO,EAAEF;AAA7F,KACLI,KAAK,IAAK;AAAM,IAAA,SAAS,EAAE,sCAAcN,aAAd,gDACtBA,aADsB,kBACOQ,KADP;AAAjB,KAGNF,KAHM,CADL,EAMLC,OAAO,IAAI;AAAM,IAAA,SAAS,EAAE,sCAAcP,aAAd;AAAjB,KAA+DO,OAA/D,CANN,CAAR;AAQH,CAlBD;;eAmBeR,I","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nfunction notEmpty(val) {\n    return val !== undefined && val !== null;\n}\nconst Cell = ({ itemPrefixCls, component, span, className, style, bordered, label, content, colon, }) => {\n    const Component = component;\n    if (bordered) {\n        return (<Component className={classNames({\n            [`${itemPrefixCls}-item-label`]: notEmpty(label),\n            [`${itemPrefixCls}-item-content`]: notEmpty(content),\n        }, className)} style={style} colSpan={span}>\n        {notEmpty(label) ? label : content}\n      </Component>);\n    }\n    return (<Component className={classNames(`${itemPrefixCls}-item`, className)} style={style} colSpan={span}>\n      {label && (<span className={classNames(`${itemPrefixCls}-item-label`, {\n        [`${itemPrefixCls}-item-colon`]: colon,\n    })}>\n          {label}\n        </span>)}\n      {content && <span className={classNames(`${itemPrefixCls}-item-content`)}>{content}</span>}\n    </Component>);\n};\nexport default Cell;\n"],"file":"Cell.js"}