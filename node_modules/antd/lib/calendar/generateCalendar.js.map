{"version":3,"sources":["calendar/generateCalendar.jsx"],"names":["generateCalendar","generateConfig","isSameMonth","date1","date2","getYear","getMonth","isSameDate","getDate","Calendar","props","customizePrefixCls","prefixCls","className","dateFullCellRender","dateCellRender","monthFullCellRender","monthCellRender","headerRender","value","defaultValue","disabledDate","mode","validRange","fullscreen","onChange","onPanelChange","onSelect","React","useContext","ConfigContext","getPrefixCls","calendarPrefixCls","today","getNow","useState","innerValue","setInnerValue","mergedValue","innerMode","setInnerMode","mergedMode","panelMode","useMemo","mergedDisabledDate","date","isAfter","triggerPanelChange","newMode","triggerChange","triggerModeChange","onInternalSelect","getDefaultLocale","locale","result","enUS","lang","dateRender","useCallback","String","monthRender","months","shortMonths","getShortMonths","mergedLocale","type","onTypeChange"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport padStart from 'lodash/padStart';\nimport { PickerPanel as RCPickerPanel } from 'rc-picker';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport enUS from './locale/en_US';\nimport { ConfigContext } from '../config-provider';\nimport CalendarHeader from './Header';\nfunction generateCalendar(generateConfig) {\n    function isSameMonth(date1, date2) {\n        return (date1 === date2 ||\n            (date1 &&\n                date2 &&\n                generateConfig.getYear(date1) === generateConfig.getYear(date2) &&\n                generateConfig.getMonth(date1) === generateConfig.getMonth(date2)));\n    }\n    function isSameDate(date1, date2) {\n        return (isSameMonth(date1, date2) && generateConfig.getDate(date1) === generateConfig.getDate(date2));\n    }\n    const Calendar = (props) => {\n        const { prefixCls: customizePrefixCls, className, dateFullCellRender, dateCellRender, monthFullCellRender, monthCellRender, headerRender, value, defaultValue, disabledDate, mode, validRange, fullscreen = true, onChange, onPanelChange, onSelect, } = props;\n        const { getPrefixCls } = React.useContext(ConfigContext);\n        const prefixCls = getPrefixCls('picker', customizePrefixCls);\n        const calendarPrefixCls = `${prefixCls}-calendar`;\n        const today = generateConfig.getNow();\n        // ====================== State =======================\n        // Value\n        const [innerValue, setInnerValue] = React.useState(() => value || defaultValue || generateConfig.getNow());\n        const mergedValue = value || innerValue;\n        // Mode\n        const [innerMode, setInnerMode] = React.useState(() => mode || 'month');\n        const mergedMode = mode || innerMode;\n        const panelMode = React.useMemo(() => (mergedMode === 'year' ? 'month' : 'date'), [mergedMode]);\n        // Disabled Date\n        const mergedDisabledDate = React.useMemo(() => {\n            if (validRange) {\n                return (date) => {\n                    return (generateConfig.isAfter(validRange[0], date) ||\n                        generateConfig.isAfter(date, validRange[1]));\n                };\n            }\n            return disabledDate;\n        }, [disabledDate, validRange]);\n        // ====================== Events ======================\n        const triggerPanelChange = (date, newMode) => {\n            if (onPanelChange) {\n                onPanelChange(date, newMode);\n            }\n        };\n        const triggerChange = (date) => {\n            setInnerValue(date);\n            if (!isSameDate(date, mergedValue)) {\n                triggerPanelChange(date, mergedMode);\n                if (onChange) {\n                    onChange(date);\n                }\n            }\n        };\n        const triggerModeChange = (newMode) => {\n            setInnerMode(newMode);\n            triggerPanelChange(mergedValue, newMode);\n        };\n        const onInternalSelect = (date) => {\n            triggerChange(date);\n            if (onSelect) {\n                onSelect(date);\n            }\n        };\n        // ====================== Locale ======================\n        const getDefaultLocale = () => {\n            const { locale } = props;\n            const result = Object.assign(Object.assign({}, enUS), locale);\n            result.lang = Object.assign(Object.assign({}, result.lang), (locale || {}).lang);\n            return result;\n        };\n        // ====================== Render ======================\n        const dateRender = React.useCallback((date) => {\n            if (dateFullCellRender) {\n                return dateFullCellRender(date);\n            }\n            return (<div className={classNames(`${prefixCls}-cell-inner`, `${calendarPrefixCls}-date`, {\n                [`${calendarPrefixCls}-date-today`]: isSameDate(today, date),\n            })}>\n            <div className={`${calendarPrefixCls}-date-value`}>\n              {padStart(String(generateConfig.getDate(date)), 2, '0')}\n            </div>\n            <div className={`${calendarPrefixCls}-date-content`}>\n              {dateCellRender && dateCellRender(date)}\n            </div>\n          </div>);\n        }, [dateFullCellRender, dateCellRender]);\n        const monthRender = React.useCallback((date, locale) => {\n            if (monthFullCellRender) {\n                return monthFullCellRender(date);\n            }\n            const months = locale.shortMonths || generateConfig.locale.getShortMonths(locale.locale);\n            return (<div className={classNames(`${prefixCls}-cell-inner`, `${calendarPrefixCls}-date`, {\n                [`${calendarPrefixCls}-date-today`]: isSameMonth(today, date),\n            })}>\n            <div className={`${calendarPrefixCls}-date-value`}>\n              {months[generateConfig.getMonth(date)]}\n            </div>\n            <div className={`${calendarPrefixCls}-date-content`}>\n              {monthCellRender && monthCellRender(date)}\n            </div>\n          </div>);\n        }, [monthFullCellRender, monthCellRender]);\n        return (<LocaleReceiver componentName=\"Calendar\" defaultLocale={getDefaultLocale}>\n        {(mergedLocale) => {\n            return (<div className={classNames(calendarPrefixCls, className, {\n                [`${calendarPrefixCls}-full`]: fullscreen,\n                [`${calendarPrefixCls}-mini`]: !fullscreen,\n            })}>\n              {headerRender ? (headerRender({\n                value: mergedValue,\n                type: mergedMode,\n                onChange: onInternalSelect,\n                onTypeChange: triggerModeChange,\n            })) : (<CalendarHeader prefixCls={calendarPrefixCls} value={mergedValue} generateConfig={generateConfig} mode={mergedMode} fullscreen={fullscreen} locale={mergedLocale.lang} validRange={validRange} onChange={onInternalSelect} onModeChange={triggerModeChange}/>)}\n\n              <RCPickerPanel value={mergedValue} prefixCls={prefixCls} locale={mergedLocale.lang} generateConfig={generateConfig} dateRender={dateRender} monthCellRender={date => monthRender(date, mergedLocale.lang)} onSelect={onInternalSelect} mode={panelMode} picker={panelMode} disabledDate={mergedDisabledDate} hideHeader/>\n            </div>);\n        }}\n      </LocaleReceiver>);\n    };\n    return Calendar;\n}\nexport default generateCalendar;\n"],"file":"generateCalendar.js"}