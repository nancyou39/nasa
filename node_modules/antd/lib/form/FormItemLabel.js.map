{"version":3,"sources":["form/FormItemLabel.jsx"],"names":["FormItemLabel","prefixCls","label","htmlFor","labelCol","labelAlign","colon","required","vertical","contextLabelAlign","contextLabelCol","contextColon","mergedLabelCol","mergedLabelAlign","labelClsBasic","labelColClassName","className","labelChildren","computedColon","haveColon","trim","replace","labelClassName"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;AACA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAA2E;AAAA,MAAxEC,SAAwE,QAAxEA,SAAwE;AAAA,MAA7DC,KAA6D,QAA7DA,KAA6D;AAAA,MAAtDC,OAAsD,QAAtDA,OAAsD;AAAA,MAA7CC,QAA6C,QAA7CA,QAA6C;AAAA,MAAnCC,UAAmC,QAAnCA,UAAmC;AAAA,MAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,MAAhBC,QAAgB,QAAhBA,QAAgB;AAC7F,MAAI,CAACL,KAAL,EACI,OAAO,IAAP;AACJ,SAAQ,oBAAC,oBAAD,CAAa,QAAb;AAAsB,IAAA,GAAG,EAAC;AAA1B,KACL,iBAAkG;AAAA;;AAAA,QAA/FM,QAA+F,SAA/FA,QAA+F;AAAA,QAAzEC,iBAAyE,SAArFJ,UAAqF;AAAA,QAA5CK,eAA4C,SAAtDN,QAAsD;AAAA,QAApBO,YAAoB,SAA3BL,KAA2B;AACjG,QAAMM,cAAc,GAAGR,QAAQ,IAAIM,eAAZ,IAA+B,EAAtD;AACA,QAAMG,gBAAgB,GAAGR,UAAU,IAAII,iBAAvC;AACA,QAAMK,aAAa,aAAMb,SAAN,gBAAnB;AACA,QAAMc,iBAAiB,GAAG,4BAAWD,aAAX,EAA0BD,gBAAgB,KAAK,MAArB,cAAkCC,aAAlC,UAA1B,EAAkFF,cAAc,CAACI,SAAjG,CAA1B;AACA,QAAIC,aAAa,GAAGf,KAApB,CALiG,CAMjG;;AACA,QAAMgB,aAAa,GAAGZ,KAAK,KAAK,IAAV,IAAmBK,YAAY,KAAK,KAAjB,IAA0BL,KAAK,KAAK,KAA7E;AACA,QAAMa,SAAS,GAAGD,aAAa,IAAI,CAACV,QAApC,CARiG,CASjG;;AACA,QAAIW,SAAS,IAAI,OAAOjB,KAAP,KAAiB,QAA9B,IAA0CA,KAAK,CAACkB,IAAN,OAAiB,EAA/D,EAAmE;AAC/DH,MAAAA,aAAa,GAAGf,KAAK,CAACmB,OAAN,CAAc,WAAd,EAA2B,EAA3B,CAAhB;AACH;;AACD,QAAMC,cAAc,GAAG,sFACfrB,SADe,qBACaM,QADb,0CAEfN,SAFe,qBAEa,CAACiB,aAFd,gBAAvB;AAIA,WAAQ,oBAAC,eAAD,eAASN,cAAT;AAAyB,MAAA,SAAS,EAAEG;AAApC,QACJ;AAAO,MAAA,OAAO,EAAEZ,OAAhB;AAAyB,MAAA,SAAS,EAAEmB,cAApC;AAAoD,MAAA,KAAK,EAAE,OAAOpB,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC;AAA/F,OACGe,aADH,CADI,CAAR;AAKH,GAvBO,CAAR;AAyBH,CA5BD;;eA6BejB,a","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport Col from '../grid/col';\nimport { FormContext } from './context';\nconst FormItemLabel = ({ prefixCls, label, htmlFor, labelCol, labelAlign, colon, required, }) => {\n    if (!label)\n        return null;\n    return (<FormContext.Consumer key=\"label\">\n      {({ vertical, labelAlign: contextLabelAlign, labelCol: contextLabelCol, colon: contextColon, }) => {\n        const mergedLabelCol = labelCol || contextLabelCol || {};\n        const mergedLabelAlign = labelAlign || contextLabelAlign;\n        const labelClsBasic = `${prefixCls}-item-label`;\n        const labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && `${labelClsBasic}-left`, mergedLabelCol.className);\n        let labelChildren = label;\n        // Keep label is original where there should have no colon\n        const computedColon = colon === true || (contextColon !== false && colon !== false);\n        const haveColon = computedColon && !vertical;\n        // Remove duplicated user input colon\n        if (haveColon && typeof label === 'string' && label.trim() !== '') {\n            labelChildren = label.replace(/[ï¼š|:]\\s*$/, '');\n        }\n        const labelClassName = classNames({\n            [`${prefixCls}-item-required`]: required,\n            [`${prefixCls}-item-no-colon`]: !computedColon,\n        });\n        return (<Col {...mergedLabelCol} className={labelColClassName}>\n            <label htmlFor={htmlFor} className={labelClassName} title={typeof label === 'string' ? label : ''}>\n              {labelChildren}\n            </label>\n          </Col>);\n    }}\n    </FormContext.Consumer>);\n};\nexport default FormItemLabel;\n"],"file":"FormItemLabel.js"}