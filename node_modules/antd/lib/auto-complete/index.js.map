{"version":3,"sources":["auto-complete/index.jsx"],"names":["Option","Select","InternalSelect","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","customizePrefixCls","prefixCls","className","children","dataSource","childNodes","selectRef","React","useRef","useImperativeHandle","current","customizeInput","length","isValidElement","getInputElement","optionChildren","map","item","optionValue","value","text","Error","useEffect","getPrefixCls","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","forwardRef"],"mappings":"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","sourcesContent":["/**\n * TODO: 4.0\n * - remove `dataSource`\n * - `size` not work with customizeInput\n * - customizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nconst { Option } = Select;\nconst InternalSelect = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n    return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n    const { prefixCls: customizePrefixCls, className, children, dataSource } = props;\n    const childNodes = toArray(children);\n    const selectRef = React.useRef();\n    React.useImperativeHandle(ref, () => selectRef.current);\n    // ============================= Input =============================\n    let customizeInput;\n    if (childNodes.length === 1 &&\n        React.isValidElement(childNodes[0]) &&\n        !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        customizeInput = childNodes[0];\n    }\n    const getInputElement = () => customizeInput;\n    // ============================ Options ============================\n    let optionChildren;\n    // [Legacy] convert `children` or `dataSource` into option children\n    if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        optionChildren = children;\n    }\n    else {\n        optionChildren = dataSource\n            ? dataSource.map(item => {\n                if (React.isValidElement(item)) {\n                    return item;\n                }\n                switch (typeof item) {\n                    case 'string':\n                        return (<Option key={item} value={item}>\n                  {item}\n                </Option>);\n                    case 'object': {\n                        const { value: optionValue } = item;\n                        return (<Option key={optionValue} value={optionValue}>\n                  {item.text}\n                </Option>);\n                    }\n                    default:\n                        throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n                }\n            })\n            : [];\n    }\n    // ============================ Warning ============================\n    React.useEffect(() => {\n        warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n        warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n    }, []);\n    return (<ConfigConsumer>\n      {({ getPrefixCls }) => {\n        const prefixCls = getPrefixCls('select', customizePrefixCls);\n        return (<InternalSelect ref={selectRef} {...omit(props, ['dataSource'])} prefixCls={prefixCls} className={classNames(className, `${prefixCls}-auto-complete`)} mode={Select.SECRET_COMBOBOX_MODE_DO_NOT_USE} getInputElement={getInputElement}>\n            {optionChildren}\n          </InternalSelect>);\n    }}\n    </ConfigConsumer>);\n};\nconst RefAutoComplete = React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;\n"],"file":"index.js"}