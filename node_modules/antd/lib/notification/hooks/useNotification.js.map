{"version":3,"sources":["notification/hooks/useNotification.jsx"],"names":["createUseNotification","getNotificationInstance","getRCNoticeProps","useNotification","getPrefixCls","innerInstance","proxy","add","noticeProps","holderCallback","component","hookNotify","holder","notify","args","customizePrefixCls","prefixCls","mergedPrefixCls","instance","hookAPI","open","forEach","type","context"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AACe,SAASA,qBAAT,CAA+BC,uBAA/B,EAAwDC,gBAAxD,EAA0E;AACrF,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B;AACA,QAAIC,YAAJ,CAF0B,CAG1B;;AACA,QAAIC,aAAa,GAAG,IAApB;AACA,QAAMC,KAAK,GAAG;AACVC,MAAAA,GAAG,EAAE,aAACC,WAAD,EAAcC,cAAd,EAAiC;AAClCJ,QAAAA,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACK,SAAd,CAAwBH,GAAxB,CAA4BC,WAA5B,EAAyCC,cAAzC,CAA9D;AACH;AAHS,KAAd;;AAL0B,6BAUG,iCAAkBH,KAAlB,CAVH;AAAA;AAAA,QAUnBK,UAVmB;AAAA,QAUPC,MAVO;;AAW1B,aAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAAA,UACCC,kBADD,GACwBD,IADxB,CACVE,SADU;AAElB,UAAMC,eAAe,GAAGb,YAAY,CAAC,cAAD,EAAiBW,kBAAjB,CAApC;AACAd,MAAAA,uBAAuB,CAAC,SAAc,SAAc,EAAd,EAAkBa,IAAlB,CAAd,EAAuC;AAAEE,QAAAA,SAAS,EAAEC;AAAb,OAAvC,CAAD,EAAyE,gBAA6B;AAAA,YAA1BD,SAA0B,QAA1BA,SAA0B;AAAA,YAAfE,QAAe,QAAfA,QAAe;AACzHb,QAAAA,aAAa,GAAGa,QAAhB;AACAP,QAAAA,UAAU,CAACT,gBAAgB,CAACY,IAAD,EAAOE,SAAP,CAAjB,CAAV;AACH,OAHsB,CAAvB;AAIH,KAlByB,CAmB1B;;;AACA,QAAMG,OAAO,GAAG;AACZC,MAAAA,IAAI,EAAEP;AADM,KAAhB;AAGA,KAAC,SAAD,EAAY,MAAZ,EAAoB,SAApB,EAA+B,OAA/B,EAAwCQ,OAAxC,CAAgD,UAAAC,IAAI,EAAI;AACpDH,MAAAA,OAAO,CAACG,IAAD,CAAP,GAAgB,UAACR,IAAD;AAAA,eAAUK,OAAO,CAACC,IAAR,CAAa,SAAc,SAAc,EAAd,EAAkBN,IAAlB,CAAd,EAAuC;AAAEQ,UAAAA,IAAI,EAAJA;AAAF,SAAvC,CAAb,CAAV;AAAA,OAAhB;AACH,KAFD;AAGA,WAAO,CACHH,OADG,EAEH,oBAAC,8BAAD;AAAgB,MAAA,GAAG,EAAC;AAApB,OACH,UAACI,OAAD,EAAa;AACHnB,MAAAA,YADG,GACcmB,OADd,CACHnB,YADG;AAEN,aAAOQ,MAAP;AACH,KAJD,CAFG,CAAP;AASH,GAnCD;;AAoCA,SAAOT,eAAP;AACH","sourcesContent":["import * as React from 'react';\nimport useRCNotification from 'rc-notification/lib/useNotification';\nimport { ConfigConsumer } from '../../config-provider';\nexport default function createUseNotification(getNotificationInstance, getRCNoticeProps) {\n    const useNotification = () => {\n        // We can only get content by render\n        let getPrefixCls;\n        // We create a proxy to handle delay created instance\n        let innerInstance = null;\n        const proxy = {\n            add: (noticeProps, holderCallback) => {\n                innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);\n            },\n        };\n        const [hookNotify, holder] = useRCNotification(proxy);\n        function notify(args) {\n            const { prefixCls: customizePrefixCls } = args;\n            const mergedPrefixCls = getPrefixCls('notification', customizePrefixCls);\n            getNotificationInstance(Object.assign(Object.assign({}, args), { prefixCls: mergedPrefixCls }), ({ prefixCls, instance }) => {\n                innerInstance = instance;\n                hookNotify(getRCNoticeProps(args, prefixCls));\n            });\n        }\n        // Fill functions\n        const hookAPI = {\n            open: notify,\n        };\n        ['success', 'info', 'warning', 'error'].forEach(type => {\n            hookAPI[type] = (args) => hookAPI.open(Object.assign(Object.assign({}, args), { type }));\n        });\n        return [\n            hookAPI,\n            <ConfigConsumer key=\"holder\">\n        {(context) => {\n                ({ getPrefixCls } = context);\n                return holder;\n            }}\n      </ConfigConsumer>,\n        ];\n    };\n    return useNotification;\n}\n"],"file":"useNotification.js"}