{"version":3,"sources":["locale-provider/LocaleReceiver.jsx"],"names":["LocaleReceiver","props","componentName","defaultLocale","locale","defaultLocaleData","antLocale","context","localeFromContext","localeCode","exist","children","getLocale","getLocaleCode","React","Component","defaultProps","contextTypes","PropTypes","object"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACqBA,c;;;;;;;;;;;gCACL;AAAA,wBACiC,KAAKC,KADtC;AAAA,UACAC,aADA,eACAA,aADA;AAAA,UACeC,aADf,eACeA,aADf;AAER,UAAMC,MAAM,GAAGD,aAAa,IAAIE,oBAAkBH,aAAa,IAAI,QAAnC,CAAhC;AAFQ,UAGAI,SAHA,GAGc,KAAKC,OAHnB,CAGAD,SAHA;AAIR,UAAME,iBAAiB,GAAGN,aAAa,IAAII,SAAjB,GAA6BA,SAAS,CAACJ,aAAD,CAAtC,GAAwD,EAAlF;AACA,aAAO,SAAc,SAAc,EAAd,EAAmB,OAAOE,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,EAArC,GAA0CA,MAA7D,CAAd,EAAsFI,iBAAiB,IAAI,EAA3G,CAAP;AACH;;;oCACe;AAAA,UACJF,SADI,GACU,KAAKC,OADf,CACJD,SADI;AAEZ,UAAMG,UAAU,GAAGH,SAAS,IAAIA,SAAS,CAACF,MAA1C,CAFY,CAGZ;;AACA,UAAIE,SAAS,IAAIA,SAAS,CAACI,KAAvB,IAAgC,CAACD,UAArC,EAAiD;AAC7C,eAAOJ,oBAAkBD,MAAzB;AACH;;AACD,aAAOK,UAAP;AACH;;;6BACQ;AACL,aAAO,KAAKR,KAAL,CAAWU,QAAX,CAAoB,KAAKC,SAAL,EAApB,EAAsC,KAAKC,aAAL,EAAtC,EAA4D,KAAKN,OAAL,CAAaD,SAAzE,CAAP;AACH;;;;EAnBuCQ,KAAK,CAACC,S;;;AAqBlDf,cAAc,CAACgB,YAAf,GAA8B;AAC1Bd,EAAAA,aAAa,EAAE;AADW,CAA9B;AAGAF,cAAc,CAACiB,YAAf,GAA8B;AAC1BX,EAAAA,SAAS,EAAEY,SAAS,CAACC;AADK,CAA9B","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport defaultLocaleData from './default';\nexport default class LocaleReceiver extends React.Component {\n    getLocale() {\n        const { componentName, defaultLocale } = this.props;\n        const locale = defaultLocale || defaultLocaleData[componentName || 'global'];\n        const { antLocale } = this.context;\n        const localeFromContext = componentName && antLocale ? antLocale[componentName] : {};\n        return Object.assign(Object.assign({}, (typeof locale === 'function' ? locale() : locale)), (localeFromContext || {}));\n    }\n    getLocaleCode() {\n        const { antLocale } = this.context;\n        const localeCode = antLocale && antLocale.locale;\n        // Had use LocaleProvide but didn't set locale\n        if (antLocale && antLocale.exist && !localeCode) {\n            return defaultLocaleData.locale;\n        }\n        return localeCode;\n    }\n    render() {\n        return this.props.children(this.getLocale(), this.getLocaleCode(), this.context.antLocale);\n    }\n}\nLocaleReceiver.defaultProps = {\n    componentName: 'global',\n};\nLocaleReceiver.contextTypes = {\n    antLocale: PropTypes.object,\n};\n"],"file":"LocaleReceiver.js"}