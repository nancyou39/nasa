{"version":3,"sources":["statistic/Number.jsx"],"names":["StatisticNumber","props","value","formatter","precision","decimalSeparator","groupSeparator","prefixCls","valueNode","val","String","cells","match","negative","int","decimal","replace","slice"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;AACA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAAA,MACrBC,KADqB,GAC6DD,KAD7D,CACrBC,KADqB;AAAA,MACdC,SADc,GAC6DF,KAD7D,CACdE,SADc;AAAA,MACHC,SADG,GAC6DH,KAD7D,CACHG,SADG;AAAA,MACQC,gBADR,GAC6DJ,KAD7D,CACQI,gBADR;AAAA,8BAC6DJ,KAD7D,CAC0BK,cAD1B;AAAA,MAC0BA,cAD1B,sCAC2C,EAD3C;AAAA,MAC+CC,SAD/C,GAC6DN,KAD7D,CAC+CM,SAD/C;AAE7B,MAAIC,SAAJ;;AACA,MAAI,OAAOL,SAAP,KAAqB,UAAzB,EAAqC;AACjC;AACAK,IAAAA,SAAS,GAAGL,SAAS,CAACD,KAAD,CAArB;AACH,GAHD,MAIK;AACD;AACA,QAAMO,GAAG,GAAGC,MAAM,CAACR,KAAD,CAAlB;AACA,QAAMS,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,uBAAV,CAAd,CAHC,CAID;;AACA,QAAI,CAACD,KAAL,EAAY;AACRH,MAAAA,SAAS,GAAGC,GAAZ;AACH,KAFD,MAGK;AACD,UAAMI,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAtB;;AACA,UAAIG,IAAG,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,GAAtB;;AACA,UAAII,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;AACAG,MAAAA,IAAG,GAAGA,IAAG,CAACE,OAAJ,CAAY,uBAAZ,EAAqCV,cAArC,CAAN;;AACA,UAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AAC/BW,QAAAA,OAAO,GAAG,wBAAOA,OAAP,EAAgBX,SAAhB,EAA2B,GAA3B,EAAgCa,KAAhC,CAAsC,CAAtC,EAAyCb,SAAzC,CAAV;AACH;;AACD,UAAIW,OAAJ,EAAa;AACTA,QAAAA,OAAO,aAAMV,gBAAN,SAAyBU,OAAzB,CAAP;AACH;;AACDP,MAAAA,SAAS,GAAG,CACR;AAAM,QAAA,GAAG,EAAC,KAAV;AAAgB,QAAA,SAAS,YAAKD,SAAL;AAAzB,SACLM,QADK,EAELC,IAFK,CADQ,EAKRC,OAAO,IAAK;AAAM,QAAA,GAAG,EAAC,SAAV;AAAoB,QAAA,SAAS,YAAKR,SAAL;AAA7B,SACfQ,OADe,CALJ,CAAZ;AASH;AACJ;;AACD,SAAO;AAAM,IAAA,SAAS,YAAKR,SAAL;AAAf,KAAgDC,SAAhD,CAAP;AACH,CAtCD;;eAuCeR,e","sourcesContent":["import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\nconst StatisticNumber = props => {\n    const { value, formatter, precision, decimalSeparator, groupSeparator = '', prefixCls } = props;\n    let valueNode;\n    if (typeof formatter === 'function') {\n        // Customize formatter\n        valueNode = formatter(value);\n    }\n    else {\n        // Internal formatter\n        const val = String(value);\n        const cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/);\n        // Process if illegal number\n        if (!cells) {\n            valueNode = val;\n        }\n        else {\n            const negative = cells[1];\n            let int = cells[2] || '0';\n            let decimal = cells[4] || '';\n            int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n            if (typeof precision === 'number') {\n                decimal = padEnd(decimal, precision, '0').slice(0, precision);\n            }\n            if (decimal) {\n                decimal = `${decimalSeparator}${decimal}`;\n            }\n            valueNode = [\n                <span key=\"int\" className={`${prefixCls}-content-value-int`}>\n          {negative}\n          {int}\n        </span>,\n                decimal && (<span key=\"decimal\" className={`${prefixCls}-content-value-decimal`}>\n            {decimal}\n          </span>),\n            ];\n        }\n    }\n    return <span className={`${prefixCls}-content-value`}>{valueNode}</span>;\n};\nexport default StatisticNumber;\n"],"file":"Number.js"}