{"version":3,"sources":["anchor/AnchorLink.jsx"],"names":["React","PropTypes","classNames","ConfigConsumer","AnchorLink","arguments","handleClick","e","context","antAnchor","scrollTo","onClick","props","href","title","renderAnchorLink","getPrefixCls","customizePrefixCls","prefixCls","children","className","target","active","activeLink","wrapperClassName","titleClassName","registerLink","prevHref","unregisterLink","Component","defaultProps","contextTypes","object"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nclass AnchorLink extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleClick = (e) => {\n            const { scrollTo, onClick } = this.context.antAnchor;\n            const { href, title } = this.props;\n            if (onClick) {\n                onClick(e, { title, href });\n            }\n            scrollTo(href);\n        };\n        this.renderAnchorLink = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, href, title, children, className, target } = this.props;\n            const prefixCls = getPrefixCls('anchor', customizePrefixCls);\n            const active = this.context.antAnchor.activeLink === href;\n            const wrapperClassName = classNames(className, `${prefixCls}-link`, {\n                [`${prefixCls}-link-active`]: active,\n            });\n            const titleClassName = classNames(`${prefixCls}-link-title`, {\n                [`${prefixCls}-link-title-active`]: active,\n            });\n            return (<div className={wrapperClassName}>\n        <a className={titleClassName} href={href} title={typeof title === 'string' ? title : ''} target={target} onClick={this.handleClick}>\n          {title}\n        </a>\n        {children}\n      </div>);\n        };\n    }\n    componentDidMount() {\n        this.context.antAnchor.registerLink(this.props.href);\n    }\n    componentDidUpdate({ href: prevHref }) {\n        const { href } = this.props;\n        if (prevHref !== href) {\n            this.context.antAnchor.unregisterLink(prevHref);\n            this.context.antAnchor.registerLink(href);\n        }\n    }\n    componentWillUnmount() {\n        this.context.antAnchor.unregisterLink(this.props.href);\n    }\n    render() {\n        return <ConfigConsumer>{this.renderAnchorLink}</ConfigConsumer>;\n    }\n}\nAnchorLink.defaultProps = {\n    href: '#',\n};\nAnchorLink.contextTypes = {\n    antAnchor: PropTypes.object,\n};\nexport default AnchorLink;\n"],"file":"AnchorLink.js"}