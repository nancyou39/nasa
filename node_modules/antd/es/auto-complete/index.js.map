{"version":3,"sources":["auto-complete/index.jsx"],"names":["React","toArray","classNames","omit","Select","ConfigConsumer","warning","Option","InternalSelect","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","customizePrefixCls","prefixCls","className","children","dataSource","childNodes","selectRef","useRef","useImperativeHandle","current","customizeInput","length","isValidElement","getInputElement","optionChildren","map","item","optionValue","value","text","Error","useEffect","getPrefixCls","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","forwardRef"],"mappings":"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","sourcesContent":["/**\n * TODO: 4.0\n * - remove `dataSource`\n * - `size` not work with customizeInput\n * - customizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nconst { Option } = Select;\nconst InternalSelect = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n    return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n    const { prefixCls: customizePrefixCls, className, children, dataSource } = props;\n    const childNodes = toArray(children);\n    const selectRef = React.useRef();\n    React.useImperativeHandle(ref, () => selectRef.current);\n    // ============================= Input =============================\n    let customizeInput;\n    if (childNodes.length === 1 &&\n        React.isValidElement(childNodes[0]) &&\n        !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        customizeInput = childNodes[0];\n    }\n    const getInputElement = () => customizeInput;\n    // ============================ Options ============================\n    let optionChildren;\n    // [Legacy] convert `children` or `dataSource` into option children\n    if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        optionChildren = children;\n    }\n    else {\n        optionChildren = dataSource\n            ? dataSource.map(item => {\n                if (React.isValidElement(item)) {\n                    return item;\n                }\n                switch (typeof item) {\n                    case 'string':\n                        return (<Option key={item} value={item}>\n                  {item}\n                </Option>);\n                    case 'object': {\n                        const { value: optionValue } = item;\n                        return (<Option key={optionValue} value={optionValue}>\n                  {item.text}\n                </Option>);\n                    }\n                    default:\n                        throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n                }\n            })\n            : [];\n    }\n    // ============================ Warning ============================\n    React.useEffect(() => {\n        warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n        warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n    }, []);\n    return (<ConfigConsumer>\n      {({ getPrefixCls }) => {\n        const prefixCls = getPrefixCls('select', customizePrefixCls);\n        return (<InternalSelect ref={selectRef} {...omit(props, ['dataSource'])} prefixCls={prefixCls} className={classNames(className, `${prefixCls}-auto-complete`)} mode={Select.SECRET_COMBOBOX_MODE_DO_NOT_USE} getInputElement={getInputElement}>\n            {optionChildren}\n          </InternalSelect>);\n    }}\n    </ConfigConsumer>);\n};\nconst RefAutoComplete = React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;\n"],"file":"index.js"}