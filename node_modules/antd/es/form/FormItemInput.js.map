{"version":3,"sources":["form/FormItemInput.jsx"],"names":["React","classNames","LoadingOutlined","CloseCircleFilled","CheckCircleFilled","ExclamationCircleFilled","useMemo","CSSMotion","Col","FormContext","useCacheErrors","iconMap","success","warning","error","validating","FormItemInput","prefixCls","wrapperCol","children","help","errors","onDomErrorVisibleChange","hasFeedback","validateStatus","extra","useState","forceUpdate","baseClassName","formContext","useContext","mergedWrapperCol","className","changedVisible","Promise","resolve","then","visible","cacheErrors","memoErrors","_","nextVisible","IconNode","icon","subFormContext","labelCol","motionClassName","map","index"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled';\nimport CheckCircleFilled from '@ant-design/icons/CheckCircleFilled';\nimport ExclamationCircleFilled from '@ant-design/icons/ExclamationCircleFilled';\nimport useMemo from 'rc-util/lib/hooks/useMemo';\nimport CSSMotion from 'rc-animate/lib/CSSMotion';\nimport Col from '../grid/col';\nimport { FormContext } from './context';\nimport { useCacheErrors } from './util';\nconst iconMap = {\n    success: CheckCircleFilled,\n    warning: ExclamationCircleFilled,\n    error: CloseCircleFilled,\n    validating: LoadingOutlined,\n};\nconst FormItemInput = ({ prefixCls, wrapperCol, children, help, errors, onDomErrorVisibleChange, hasFeedback, validateStatus, extra, }) => {\n    const [, forceUpdate] = React.useState({});\n    const baseClassName = `${prefixCls}-item`;\n    const formContext = React.useContext(FormContext);\n    const mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};\n    const className = classNames(`${baseClassName}-control`, mergedWrapperCol.className);\n    const [visible, cacheErrors] = useCacheErrors(errors, changedVisible => {\n        if (changedVisible) {\n            /**\n             * We trigger in sync to avoid dom shaking but this get warning in react 16.13.\n             * So use Promise to keep in micro async to handle this.\n             * https://github.com/ant-design/ant-design/issues/21698#issuecomment-593743485\n             */\n            Promise.resolve().then(() => {\n                onDomErrorVisibleChange(true);\n            });\n        }\n        forceUpdate({});\n    }, !!help);\n    const memoErrors = useMemo(() => cacheErrors, visible, (_, nextVisible) => nextVisible);\n    // Should provides additional icon if `hasFeedback`\n    const IconNode = validateStatus && iconMap[validateStatus];\n    const icon = hasFeedback && IconNode ? (<span className={`${baseClassName}-children-icon`}>\n        <IconNode />\n      </span>) : null;\n    // Pass to sub FormItem should not with col info\n    const subFormContext = Object.assign({}, formContext);\n    delete subFormContext.labelCol;\n    delete subFormContext.wrapperCol;\n    return (<FormContext.Provider value={subFormContext}>\n      <Col {...mergedWrapperCol} className={className}>\n        <div className={`${baseClassName}-control-input`}>\n          <div className={`${baseClassName}-control-input-content`}>{children}</div>\n          {icon}\n        </div>\n        <CSSMotion visible={visible} motionName=\"show-help\" onLeaveEnd={() => {\n        onDomErrorVisibleChange(false);\n    }} motionAppear removeOnLeave>\n          {({ className: motionClassName }) => {\n        return (<div className={classNames(`${baseClassName}-explain`, motionClassName)} key=\"help\">\n                {memoErrors.map((error, index) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <div key={index}>{error}</div>))}\n              </div>);\n    }}\n        </CSSMotion>\n        {extra && <div className={`${baseClassName}-extra`}>{extra}</div>}\n      </Col>\n    </FormContext.Provider>);\n};\nexport default FormItemInput;\n"],"file":"FormItemInput.js"}