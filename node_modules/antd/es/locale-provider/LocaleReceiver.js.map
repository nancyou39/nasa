{"version":3,"sources":["locale-provider/LocaleReceiver.jsx"],"names":["React","PropTypes","defaultLocaleData","LocaleReceiver","props","componentName","defaultLocale","locale","antLocale","context","localeFromContext","localeCode","exist","children","getLocale","getLocaleCode","Component","defaultProps","contextTypes","object"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAOC,iBAAP,MAA8B,WAA9B;;IACqBC,c;;;;;;;;;;;gCACL;AAAA,wBACiC,KAAKC,KADtC;AAAA,UACAC,aADA,eACAA,aADA;AAAA,UACeC,aADf,eACeA,aADf;AAER,UAAMC,MAAM,GAAGD,aAAa,IAAIJ,iBAAiB,CAACG,aAAa,IAAI,QAAlB,CAAjD;AAFQ,UAGAG,SAHA,GAGc,KAAKC,OAHnB,CAGAD,SAHA;AAIR,UAAME,iBAAiB,GAAGL,aAAa,IAAIG,SAAjB,GAA6BA,SAAS,CAACH,aAAD,CAAtC,GAAwD,EAAlF;AACA,aAAO,SAAc,SAAc,EAAd,EAAmB,OAAOE,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,EAArC,GAA0CA,MAA7D,CAAd,EAAsFG,iBAAiB,IAAI,EAA3G,CAAP;AACH;;;oCACe;AAAA,UACJF,SADI,GACU,KAAKC,OADf,CACJD,SADI;AAEZ,UAAMG,UAAU,GAAGH,SAAS,IAAIA,SAAS,CAACD,MAA1C,CAFY,CAGZ;;AACA,UAAIC,SAAS,IAAIA,SAAS,CAACI,KAAvB,IAAgC,CAACD,UAArC,EAAiD;AAC7C,eAAOT,iBAAiB,CAACK,MAAzB;AACH;;AACD,aAAOI,UAAP;AACH;;;6BACQ;AACL,aAAO,KAAKP,KAAL,CAAWS,QAAX,CAAoB,KAAKC,SAAL,EAApB,EAAsC,KAAKC,aAAL,EAAtC,EAA4D,KAAKN,OAAL,CAAaD,SAAzE,CAAP;AACH;;;;EAnBuCR,KAAK,CAACgB,S;;SAA7Bb,c;AAqBrBA,cAAc,CAACc,YAAf,GAA8B;AAC1BZ,EAAAA,aAAa,EAAE;AADW,CAA9B;AAGAF,cAAc,CAACe,YAAf,GAA8B;AAC1BV,EAAAA,SAAS,EAAEP,SAAS,CAACkB;AADK,CAA9B","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport defaultLocaleData from './default';\nexport default class LocaleReceiver extends React.Component {\n    getLocale() {\n        const { componentName, defaultLocale } = this.props;\n        const locale = defaultLocale || defaultLocaleData[componentName || 'global'];\n        const { antLocale } = this.context;\n        const localeFromContext = componentName && antLocale ? antLocale[componentName] : {};\n        return Object.assign(Object.assign({}, (typeof locale === 'function' ? locale() : locale)), (localeFromContext || {}));\n    }\n    getLocaleCode() {\n        const { antLocale } = this.context;\n        const localeCode = antLocale && antLocale.locale;\n        // Had use LocaleProvide but didn't set locale\n        if (antLocale && antLocale.exist && !localeCode) {\n            return defaultLocaleData.locale;\n        }\n        return localeCode;\n    }\n    render() {\n        return this.props.children(this.getLocale(), this.getLocaleCode(), this.context.antLocale);\n    }\n}\nLocaleReceiver.defaultProps = {\n    componentName: 'global',\n};\nLocaleReceiver.contextTypes = {\n    antLocale: PropTypes.object,\n};\n"],"file":"LocaleReceiver.js"}