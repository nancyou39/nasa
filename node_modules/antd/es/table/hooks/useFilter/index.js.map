{"version":3,"sources":["table/hooks/useFilter/index.jsx"],"names":["React","getColumnPos","renderColumnTitle","getColumnKey","FilterDropdown","collectFilterStates","columns","init","pos","filterStates","forEach","column","index","columnPos","children","push","key","filteredKeys","filteredValue","forceFiltered","filtered","defaultFilteredValue","undefined","injectFilter","prefixCls","dropdownPrefixCls","triggerFilter","getPopupContainer","locale","map","filterMultiple","columnKey","filterState","find","title","renderProps","generateFilterInfo","currentFilters","flattenKeys","filters","keys","value","getFilterData","data","reduce","currentData","onFilter","length","filter","record","some","keyIndex","findIndex","k","String","realKey","useFilter","onFilterChange","tableLocale","useState","setFilterStates","mergedFilterStates","useMemo","collectedStates","every","getFilters","useCallback","newFilterStates","transformColumns","innerColumns"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getColumnPos, renderColumnTitle, getColumnKey } from '../../util';\nimport FilterDropdown from './FilterDropdown';\nfunction collectFilterStates(columns, init, pos) {\n    let filterStates = [];\n    (columns || []).forEach((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        if ('children' in column) {\n            filterStates = [...filterStates, ...collectFilterStates(column.children, init, columnPos)];\n        }\n        else if ('filters' in column || 'filterDropdown' in column) {\n            if ('filteredValue' in column) {\n                // Controlled\n                filterStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    filteredKeys: column.filteredValue,\n                    forceFiltered: column.filtered,\n                });\n            }\n            else {\n                // Uncontrolled\n                filterStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,\n                    forceFiltered: column.filtered,\n                });\n            }\n        }\n    });\n    return filterStates;\n}\nfunction injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, triggerFilter, getPopupContainer, locale, pos) {\n    return columns.map((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        const { filterMultiple = true } = column;\n        if ('filters' in column || 'filterDropdown' in column) {\n            const columnKey = getColumnKey(column, columnPos);\n            const filterState = filterStates.find(({ key }) => columnKey === key);\n            return Object.assign(Object.assign({}, column), { title: (renderProps) => (<FilterDropdown prefixCls={`${prefixCls}-filter`} dropdownPrefixCls={dropdownPrefixCls} column={column} columnKey={columnKey} filterState={filterState} filterMultiple={filterMultiple} triggerFilter={triggerFilter} locale={locale} getPopupContainer={getPopupContainer}>\n            {renderColumnTitle(column.title, renderProps)}\n          </FilterDropdown>) });\n        }\n        if ('children' in column) {\n            return Object.assign(Object.assign({}, column), { children: injectFilter(prefixCls, dropdownPrefixCls, column.children, filterStates, triggerFilter, getPopupContainer, locale, columnPos) });\n        }\n        return column;\n    });\n}\nfunction generateFilterInfo(filterStates) {\n    const currentFilters = {};\n    filterStates.forEach(({ key, filteredKeys }) => {\n        currentFilters[key] = filteredKeys || null;\n    });\n    return currentFilters;\n}\nfunction flattenKeys(filters) {\n    let keys = [];\n    (filters || []).forEach(({ value, children }) => {\n        keys.push(value);\n        if (children) {\n            keys = [...keys, ...flattenKeys(children)];\n        }\n    });\n    return keys;\n}\nexport function getFilterData(data, filterStates) {\n    return filterStates.reduce((currentData, filterState) => {\n        const { column: { onFilter, filters }, filteredKeys, } = filterState;\n        if (onFilter && filteredKeys && filteredKeys.length) {\n            return currentData.filter(record => filteredKeys.some(key => {\n                const keys = flattenKeys(filters);\n                const keyIndex = keys.findIndex(k => String(k) === String(key));\n                const realKey = keyIndex !== -1 ? keys[keyIndex] : key;\n                return onFilter(realKey, record);\n            }));\n        }\n        return currentData;\n    }, data);\n}\nfunction useFilter({ prefixCls, dropdownPrefixCls = 'ant-dropdown', columns, onFilterChange, getPopupContainer, locale: tableLocale, }) {\n    const [filterStates, setFilterStates] = React.useState(collectFilterStates(columns, true));\n    const mergedFilterStates = React.useMemo(() => {\n        const collectedStates = collectFilterStates(columns, false);\n        // Return if not controlled\n        if (collectedStates.every(({ filteredKeys }) => filteredKeys === undefined)) {\n            return filterStates;\n        }\n        return collectedStates;\n    }, [columns, filterStates]);\n    const getFilters = React.useCallback(() => generateFilterInfo(mergedFilterStates), [\n        mergedFilterStates,\n    ]);\n    const triggerFilter = (filterState) => {\n        const newFilterStates = mergedFilterStates.filter(({ key }) => key !== filterState.key);\n        newFilterStates.push(filterState);\n        setFilterStates(newFilterStates);\n        onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);\n    };\n    const transformColumns = (innerColumns) => injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, triggerFilter, getPopupContainer, tableLocale);\n    return [transformColumns, mergedFilterStates, getFilters];\n}\nexport default useFilter;\n"],"file":"index.js"}