{"version":3,"sources":["tree/DirectoryTree.jsx"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","classNames","omit","debounce","conductExpandParent","convertDataToEntities","convertTreeToData","FileOutlined","FolderOpenOutlined","FolderOutlined","ConfigConsumer","Tree","calcRangeKeys","convertDirectoryKeysToNodes","getIcon","props","isLeaf","expanded","getTreeData","treeData","children","DirectoryTree","onExpand","expandedKeys","info","setUncontrolledState","undefined","onClick","event","node","expandAction","onDebounceExpand","onDoubleClick","onSelect","keys","multiple","state","nativeEvent","eventKey","newState","newEvent","selected","ctrlPick","ctrlKey","metaKey","shiftPick","shiftKey","newSelectedKeys","lastSelectedKey","cachedSelectedKeys","selectedNodes","Array","from","Set","data","selectedKeys","setTreeRef","tree","expandFolderNode","internalTree","onNodeExpand","setState","renderDirectoryTree","getPrefixCls","direction","_a","customizePrefixCls","prefixCls","className","connectClassName","defaultExpandAll","defaultExpandParent","defaultExpandedKeys","keyEntities","defaultSelectedKeys","leading","nextProps","Component","defaultProps","showIcon"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport debounce from 'lodash/debounce';\nimport { conductExpandParent } from 'rc-tree/lib/util';\nimport { convertDataToEntities, convertTreeToData } from 'rc-tree/lib/utils/treeUtil';\nimport FileOutlined from '@ant-design/icons/FileOutlined';\nimport FolderOpenOutlined from '@ant-design/icons/FolderOpenOutlined';\nimport FolderOutlined from '@ant-design/icons/FolderOutlined';\nimport { ConfigConsumer } from '../config-provider';\nimport Tree from './Tree';\nimport { calcRangeKeys, convertDirectoryKeysToNodes } from './utils/dictUtil';\nfunction getIcon(props) {\n    const { isLeaf, expanded } = props;\n    if (isLeaf) {\n        return <FileOutlined />;\n    }\n    return expanded ? <FolderOpenOutlined /> : <FolderOutlined />;\n}\nfunction getTreeData({ treeData, children }) {\n    return treeData || convertTreeToData(children);\n}\nclass DirectoryTree extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onExpand = (expandedKeys, info) => {\n            const { onExpand } = this.props;\n            this.setUncontrolledState({ expandedKeys });\n            // Call origin function\n            if (onExpand) {\n                return onExpand(expandedKeys, info);\n            }\n            return undefined;\n        };\n        this.onClick = (event, node) => {\n            const { onClick, expandAction } = this.props;\n            // Expand the tree\n            if (expandAction === 'click') {\n                this.onDebounceExpand(event, node);\n            }\n            if (onClick) {\n                onClick(event, node);\n            }\n        };\n        this.onDoubleClick = (event, node) => {\n            const { onDoubleClick, expandAction } = this.props;\n            // Expand the tree\n            if (expandAction === 'doubleClick') {\n                this.onDebounceExpand(event, node);\n            }\n            if (onDoubleClick) {\n                onDoubleClick(event, node);\n            }\n        };\n        this.onSelect = (keys, event) => {\n            const { onSelect, multiple } = this.props;\n            const { expandedKeys = [] } = this.state;\n            const { node, nativeEvent } = event;\n            const { eventKey = '' } = node.props;\n            const treeData = getTreeData(this.props);\n            const newState = {};\n            // We need wrap this event since some value is not same\n            const newEvent = Object.assign(Object.assign({}, event), { selected: true });\n            // Windows / Mac single pick\n            const ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;\n            const shiftPick = nativeEvent.shiftKey;\n            // Generate new selected keys\n            let newSelectedKeys;\n            if (multiple && ctrlPick) {\n                // Control click\n                newSelectedKeys = keys;\n                this.lastSelectedKey = eventKey;\n                this.cachedSelectedKeys = newSelectedKeys;\n                newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n            }\n            else if (multiple && shiftPick) {\n                // Shift click\n                newSelectedKeys = Array.from(new Set([\n                    ...(this.cachedSelectedKeys || []),\n                    ...calcRangeKeys(treeData, expandedKeys, eventKey, this.lastSelectedKey),\n                ]));\n                newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n            }\n            else {\n                // Single click\n                newSelectedKeys = [eventKey];\n                this.lastSelectedKey = eventKey;\n                this.cachedSelectedKeys = newSelectedKeys;\n                newEvent.selectedNodes = [event.node.props.data];\n            }\n            newState.selectedKeys = newSelectedKeys;\n            if (onSelect) {\n                onSelect(newSelectedKeys, newEvent);\n            }\n            this.setUncontrolledState(newState);\n        };\n        this.setTreeRef = (node) => {\n            this.tree = node;\n        };\n        this.expandFolderNode = (event, node) => {\n            const { isLeaf } = node;\n            if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {\n                return;\n            }\n            // Get internal rc-tree\n            const internalTree = this.tree.tree;\n            // Call internal rc-tree expand function\n            // https://github.com/ant-design/ant-design/issues/12567\n            internalTree.onNodeExpand(event, node);\n        };\n        this.setUncontrolledState = (state) => {\n            const newState = omit(state, Object.keys(this.props));\n            if (Object.keys(newState).length) {\n                this.setState(newState);\n            }\n        };\n        this.renderDirectoryTree = ({ getPrefixCls, direction }) => {\n            const _a = this.props, { prefixCls: customizePrefixCls, className } = _a, props = __rest(_a, [\"prefixCls\", \"className\"]);\n            const { expandedKeys, selectedKeys } = this.state;\n            const prefixCls = getPrefixCls('tree', customizePrefixCls);\n            const connectClassName = classNames(`${prefixCls}-directory`, className, {\n                [`${prefixCls}-directory-rtl`]: direction === 'rtl',\n            });\n            return (<Tree icon={getIcon} ref={this.setTreeRef} blockNode {...props} prefixCls={prefixCls} className={connectClassName} expandedKeys={expandedKeys} selectedKeys={selectedKeys} onSelect={this.onSelect} onClick={this.onClick} onDoubleClick={this.onDoubleClick} onExpand={this.onExpand}/>);\n        };\n        const { defaultExpandAll, defaultExpandParent, expandedKeys, defaultExpandedKeys } = props;\n        const { keyEntities } = convertDataToEntities(getTreeData(props));\n        // Selected keys\n        this.state = {\n            selectedKeys: props.selectedKeys || props.defaultSelectedKeys || [],\n        };\n        // Expanded keys\n        if (defaultExpandAll) {\n            this.state.expandedKeys = Object.keys(keyEntities);\n        }\n        else if (defaultExpandParent) {\n            this.state.expandedKeys = conductExpandParent(expandedKeys || defaultExpandedKeys, keyEntities);\n        }\n        else {\n            this.state.expandedKeys = expandedKeys || defaultExpandedKeys;\n        }\n        this.onDebounceExpand = debounce(this.expandFolderNode, 200, {\n            leading: true,\n        });\n    }\n    static getDerivedStateFromProps(nextProps) {\n        const newState = {};\n        if ('expandedKeys' in nextProps) {\n            newState.expandedKeys = nextProps.expandedKeys;\n        }\n        if ('selectedKeys' in nextProps) {\n            newState.selectedKeys = nextProps.selectedKeys;\n        }\n        return newState;\n    }\n    render() {\n        return <ConfigConsumer>{this.renderDirectoryTree}</ConfigConsumer>;\n    }\n}\nDirectoryTree.defaultProps = {\n    showIcon: true,\n    expandAction: 'click',\n};\nexport default DirectoryTree;\n"],"file":"DirectoryTree.js"}