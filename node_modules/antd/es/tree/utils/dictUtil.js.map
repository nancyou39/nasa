{"version":3,"sources":["tree/utils/dictUtil.js"],"names":["Record","traverseNodesKey","treeData","callback","processNode","dataNode","key","children","forEach","calcRangeKeys","expandedKeys","startKey","endKey","keys","record","None","matchKey","End","push","Start","indexOf","convertDirectoryKeysToNodes","restKeys","nodes","node","index","splice","length"],"mappings":"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","sourcesContent":["var Record;\n(function (Record) {\n    Record[Record[\"None\"] = 0] = \"None\";\n    Record[Record[\"Start\"] = 1] = \"Start\";\n    Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {}));\nfunction traverseNodesKey(treeData, callback) {\n    function processNode(dataNode) {\n        const { key, children } = dataNode;\n        if (callback(key, dataNode) !== false) {\n            traverseNodesKey(children || [], callback);\n        }\n    }\n    treeData.forEach(processNode);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\nexport function calcRangeKeys(treeData, expandedKeys, startKey, endKey) {\n    const keys = [];\n    let record = Record.None;\n    if (startKey && startKey === endKey) {\n        return [startKey];\n    }\n    if (!startKey || !endKey) {\n        return [];\n    }\n    function matchKey(key) {\n        return key === startKey || key === endKey;\n    }\n    traverseNodesKey(treeData, (key) => {\n        if (record === Record.End) {\n            return false;\n        }\n        if (matchKey(key)) {\n            // Match test\n            keys.push(key);\n            if (record === Record.None) {\n                record = Record.Start;\n            }\n            else if (record === Record.Start) {\n                record = Record.End;\n                return false;\n            }\n        }\n        else if (record === Record.Start) {\n            // Append selection\n            keys.push(key);\n        }\n        if (expandedKeys.indexOf(key) === -1) {\n            return false;\n        }\n        return true;\n    });\n    return keys;\n}\nexport function convertDirectoryKeysToNodes(treeData, keys) {\n    const restKeys = [...keys];\n    const nodes = [];\n    traverseNodesKey(treeData, (key, node) => {\n        const index = restKeys.indexOf(key);\n        if (index !== -1) {\n            nodes.push(node);\n            restKeys.splice(index, 1);\n        }\n        return !!restKeys.length;\n    });\n    return nodes;\n}\n"],"file":"dictUtil.js"}