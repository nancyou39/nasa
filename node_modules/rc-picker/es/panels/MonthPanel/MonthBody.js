"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __importStar(require("react"));

var classnames_1 = __importDefault(require("classnames"));

var dateUtil_1 = require("../../utils/dateUtil");

var PanelContext_1 = __importDefault(require("../../PanelContext"));

var RangeContext_1 = __importDefault(require("../../RangeContext"));

var useCellClassName_1 = __importDefault(require("../../hooks/useCellClassName"));

exports.MONTH_COL_COUNT = 3;
var MONTH_ROW_COUNT = 4;

function MonthBody(_ref) {
  var prefixCls = _ref.prefixCls,
      locale = _ref.locale,
      value = _ref.value,
      viewDate = _ref.viewDate,
      generateConfig = _ref.generateConfig,
      disabledDate = _ref.disabledDate,
      monthCellRender = _ref.monthCellRender,
      onSelect = _ref.onSelect;

  var _React$useContext = React.useContext(RangeContext_1.default),
      rangedValue = _React$useContext.rangedValue,
      hoverRangedValue = _React$useContext.hoverRangedValue;

  var _React$useContext2 = React.useContext(PanelContext_1.default),
      onDateMouseEnter = _React$useContext2.onDateMouseEnter,
      onDateMouseLeave = _React$useContext2.onDateMouseLeave;

  var monthPrefixCls = "".concat(prefixCls, "-cell"); // =============================== Month ===============================

  var rows = [];
  var getCellClassName = useCellClassName_1.default({
    cellPrefixCls: monthPrefixCls,
    value: value,
    generateConfig: generateConfig,
    rangedValue: rangedValue,
    hoverRangedValue: hoverRangedValue,
    isSameCell: function isSameCell(current, target) {
      return dateUtil_1.isSameMonth(generateConfig, current, target);
    },
    isInView: function isInView() {
      return true;
    },
    offsetCell: function offsetCell(date, offset) {
      return generateConfig.addMonth(date, offset);
    }
  });
  var monthsLocale = locale.shortMonths || (generateConfig.locale.getShortMonths ? generateConfig.locale.getShortMonths(locale.locale) : []);
  var startMonth = generateConfig.setMonth(viewDate, 0);

  for (var i = 0; i < MONTH_ROW_COUNT; i += 1) {
    var row = [];

    var _loop = function _loop(j) {
      var _objectSpread2;

      var diffMonth = i * exports.MONTH_COL_COUNT + j;
      var monthDate = generateConfig.addMonth(startMonth, diffMonth);
      var disabled = disabledDate && disabledDate(monthDate);
      row.push(React.createElement("td", {
        key: j,
        title: generateConfig.locale.format(locale.locale, monthDate, 'YYYY-MM'),
        className: classnames_1.default(monthPrefixCls, _objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, "".concat(monthPrefixCls, "-disabled"), disabled), _defineProperty(_objectSpread2, "".concat(monthPrefixCls, "-selected"), dateUtil_1.isSameMonth(generateConfig, value, monthDate)), _objectSpread2), getCellClassName(monthDate))),
        onClick: function onClick() {
          if (!disabled) {
            onSelect(monthDate);
          }
        },
        onMouseEnter: function onMouseEnter() {
          if (!disabled && onDateMouseEnter) {
            onDateMouseEnter(monthDate);
          }
        },
        onMouseLeave: function onMouseLeave() {
          if (!disabled && onDateMouseLeave) {
            onDateMouseLeave(monthDate);
          }
        }
      }, monthCellRender ? monthCellRender(monthDate, locale) : React.createElement("div", {
        className: "".concat(monthPrefixCls, "-inner")
      }, locale.monthFormat ? generateConfig.locale.format(locale.locale, monthDate, locale.monthFormat) : monthsLocale[diffMonth])));
    };

    for (var j = 0; j < exports.MONTH_COL_COUNT; j += 1) {
      _loop(j);
    }

    rows.push(React.createElement("tr", {
      key: i
    }, row));
  }

  return React.createElement("div", {
    className: "".concat(prefixCls, "-body")
  }, React.createElement("table", {
    className: "".concat(prefixCls, "-content")
  }, React.createElement("tbody", null, rows)));
}

exports.default = MonthBody;