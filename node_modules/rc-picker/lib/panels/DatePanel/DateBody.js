"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __importStar(require("react"));

var classnames_1 = __importDefault(require("classnames"));

var dateUtil_1 = require("../../utils/dateUtil");

var RangeContext_1 = __importDefault(require("../../RangeContext"));

var PanelContext_1 = __importDefault(require("../../PanelContext"));

var useCellClassName_1 = __importDefault(require("../../hooks/useCellClassName"));

function DateBody(_ref) {
  var prefixCls = _ref.prefixCls,
      generateConfig = _ref.generateConfig,
      prefixColumn = _ref.prefixColumn,
      rowClassName = _ref.rowClassName,
      locale = _ref.locale,
      rowCount = _ref.rowCount,
      viewDate = _ref.viewDate,
      value = _ref.value,
      disabledDate = _ref.disabledDate,
      dateRender = _ref.dateRender,
      onSelect = _ref.onSelect;

  var _React$useContext = React.useContext(RangeContext_1.default),
      rangedValue = _React$useContext.rangedValue,
      hoverRangedValue = _React$useContext.hoverRangedValue;

  var _React$useContext2 = React.useContext(PanelContext_1.default),
      onDateMouseEnter = _React$useContext2.onDateMouseEnter,
      onDateMouseLeave = _React$useContext2.onDateMouseLeave;

  var datePrefixCls = "".concat(prefixCls, "-cell");
  var weekFirstDay = generateConfig.locale.getWeekFirstDay(locale.locale);
  var today = generateConfig.getNow(); // ============================== Header ==============================

  var headerCells = [];
  var weekDaysLocale = locale.shortWeekDays || (generateConfig.locale.getShortWeekDays ? generateConfig.locale.getShortWeekDays(locale.locale) : []);

  if (prefixColumn) {
    headerCells.push(React.createElement("th", {
      key: "empty"
    }));
  }

  for (var i = 0; i < dateUtil_1.WEEK_DAY_COUNT; i += 1) {
    headerCells.push(React.createElement("th", {
      key: i
    }, weekDaysLocale[(i + weekFirstDay) % dateUtil_1.WEEK_DAY_COUNT]));
  } // =============================== Date ===============================


  var rows = [];
  var startDate = dateUtil_1.getWeekStartDate(locale.locale, generateConfig, viewDate);
  var getCellClassName = useCellClassName_1.default({
    cellPrefixCls: datePrefixCls,
    today: today,
    value: value,
    generateConfig: generateConfig,
    rangedValue: prefixColumn ? null : rangedValue,
    hoverRangedValue: prefixColumn ? null : hoverRangedValue,
    isSameCell: function isSameCell(current, target) {
      return dateUtil_1.isSameDate(generateConfig, current, target);
    },
    isInView: function isInView(date) {
      return dateUtil_1.isSameMonth(generateConfig, date, viewDate);
    },
    offsetCell: function offsetCell(date, offset) {
      return generateConfig.addDate(date, offset);
    }
  });

  for (var y = 0; y < rowCount; y += 1) {
    var row = [];
    var startWeekDate = generateConfig.addDate(startDate, y * dateUtil_1.WEEK_DAY_COUNT);

    if (prefixColumn) {
      row.push(prefixColumn(startWeekDate));
    }

    var _loop = function _loop(x) {
      var currentDate = generateConfig.addDate(startWeekDate, x);
      var disabled = disabledDate && disabledDate(currentDate);
      row.push(React.createElement("td", {
        key: "".concat(x, "-").concat(y),
        title: generateConfig.locale.format(locale.locale, currentDate, 'YYYY-MM-DD'),
        onClick: function onClick() {
          if (!disabled) {
            onSelect(currentDate, 'mouse');
          }
        },
        onMouseEnter: function onMouseEnter() {
          if (!disabled && onDateMouseEnter) {
            onDateMouseEnter(currentDate);
          }
        },
        onMouseLeave: function onMouseLeave() {
          if (!disabled && onDateMouseLeave) {
            onDateMouseLeave(currentDate);
          }
        },
        className: classnames_1.default(datePrefixCls, _objectSpread(_defineProperty({}, "".concat(datePrefixCls, "-disabled"), disabled), getCellClassName(currentDate)))
      }, dateRender ? dateRender(currentDate, today) : React.createElement("div", {
        className: "".concat(datePrefixCls, "-inner")
      }, generateConfig.getDate(currentDate))));
    };

    for (var x = 0; x < dateUtil_1.WEEK_DAY_COUNT; x += 1) {
      _loop(x);
    }

    rows.push(React.createElement("tr", {
      key: y,
      className: classnames_1.default(rowClassName && rowClassName(startWeekDate))
    }, row));
  }

  return React.createElement("div", {
    className: "".concat(prefixCls, "-body")
  }, React.createElement("table", {
    className: "".concat(prefixCls, "-content")
  }, React.createElement("thead", null, React.createElement("tr", null, headerCells)), React.createElement("tbody", null, rows)));
}

exports.default = DateBody;