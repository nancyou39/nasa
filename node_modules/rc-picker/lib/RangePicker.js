"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __importStar(require("react"));

var classnames_1 = __importDefault(require("classnames"));

var warning_1 = __importDefault(require("rc-util/lib/warning"));

var useMergedState_1 = __importDefault(require("rc-util/lib/hooks/useMergedState"));

var PickerTrigger_1 = __importDefault(require("./PickerTrigger"));

var PickerPanel_1 = __importDefault(require("./PickerPanel"));

var usePickerInput_1 = __importDefault(require("./hooks/usePickerInput"));

var miscUtil_1 = __importStar(require("./utils/miscUtil"));

var uiUtil_1 = require("./utils/uiUtil");

var PanelContext_1 = __importDefault(require("./PanelContext"));

var dateUtil_1 = require("./utils/dateUtil");

var useValueTexts_1 = __importDefault(require("./hooks/useValueTexts"));

var useTextValueMapping_1 = __importDefault(require("./hooks/useTextValueMapping"));

var RangeContext_1 = __importDefault(require("./RangeContext"));

var useRangeDisabled_1 = __importDefault(require("./hooks/useRangeDisabled"));

var getExtraFooter_1 = __importDefault(require("./utils/getExtraFooter"));

var getRanges_1 = __importDefault(require("./utils/getRanges"));

var useRangeViewDates_1 = __importDefault(require("./hooks/useRangeViewDates"));

function reorderValues(values, generateConfig) {
  if (values && values[0] && values[1] && generateConfig.isAfter(values[0], values[1])) {
    return [values[1], values[0]];
  }

  return values;
}

function canValueTrigger(value, index, disabled, allowEmpty) {
  if (value) {
    return true;
  }

  if (allowEmpty && allowEmpty[index]) {
    return true;
  }

  if (disabled[(index + 1) % 2]) {
    return true;
  }

  return false;
}

function InnerRangePicker(props) {
  var _classnames_1$default2;

  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'rc-picker' : _props$prefixCls,
      style = props.style,
      className = props.className,
      popupStyle = props.popupStyle,
      dropdownClassName = props.dropdownClassName,
      transitionName = props.transitionName,
      dropdownAlign = props.dropdownAlign,
      getPopupContainer = props.getPopupContainer,
      generateConfig = props.generateConfig,
      locale = props.locale,
      placeholder = props.placeholder,
      autoFocus = props.autoFocus,
      disabled = props.disabled,
      format = props.format,
      _props$picker = props.picker,
      picker = _props$picker === void 0 ? 'date' : _props$picker,
      showTime = props.showTime,
      use12Hours = props.use12Hours,
      _props$separator = props.separator,
      separator = _props$separator === void 0 ? '~' : _props$separator,
      value = props.value,
      defaultValue = props.defaultValue,
      defaultPickerValue = props.defaultPickerValue,
      open = props.open,
      defaultOpen = props.defaultOpen,
      disabledDate = props.disabledDate,
      _disabledTime = props.disabledTime,
      ranges = props.ranges,
      allowEmpty = props.allowEmpty,
      allowClear = props.allowClear,
      suffixIcon = props.suffixIcon,
      clearIcon = props.clearIcon,
      pickerRef = props.pickerRef,
      inputReadOnly = props.inputReadOnly,
      mode = props.mode,
      renderExtraFooter = props.renderExtraFooter,
      onChange = props.onChange,
      onOpenChange = props.onOpenChange,
      onPanelChange = props.onPanelChange,
      onCalendarChange = props.onCalendarChange,
      _onFocus = props.onFocus,
      onBlur = props.onBlur,
      _onOk = props.onOk,
      components = props.components,
      direction = props.direction;
  var needConfirmButton = picker === 'date' && !!showTime || picker === 'time';
  var containerRef = React.useRef(null);
  var panelDivRef = React.useRef(null);
  var startInputDivRef = React.useRef(null);
  var endInputDivRef = React.useRef(null);
  var separatorRef = React.useRef(null);
  var startInputRef = React.useRef(null);
  var endInputRef = React.useRef(null); // ============================= Misc ==============================

  var formatList = miscUtil_1.toArray(uiUtil_1.getDefaultFormat(format, picker, showTime, use12Hours)); // Active picker

  var _React$useState = React.useState(0),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      activePickerIndex = _React$useState2[0],
      setActivePickerIndex = _React$useState2[1]; // Operation ref


  var operationRef = React.useRef(null);
  var mergedDisabled = React.useMemo(function () {
    if (Array.isArray(disabled)) {
      return disabled;
    }

    return [disabled || false, disabled || false];
  }, [disabled]); // ============================= Value =============================

  var _useMergedState_1$def = useMergedState_1.default(null, {
    value: value,
    defaultValue: defaultValue,
    postState: function postState(values) {
      return reorderValues(values, generateConfig);
    }
  }),
      _useMergedState_1$def2 = _slicedToArray(_useMergedState_1$def, 2),
      mergedValue = _useMergedState_1$def2[0],
      setInnerValue = _useMergedState_1$def2[1]; // =========================== View Date ===========================
  // Config view panel


  var _useRangeViewDates_1$ = useRangeViewDates_1.default({
    values: mergedValue,
    picker: picker,
    defaultDates: defaultPickerValue,
    generateConfig: generateConfig
  }),
      _useRangeViewDates_1$2 = _slicedToArray(_useRangeViewDates_1$, 2),
      getViewDate = _useRangeViewDates_1$2[0],
      setViewDate = _useRangeViewDates_1$2[1]; // ========================= Select Values =========================


  var _useMergedState_1$def3 = useMergedState_1.default(mergedValue, {
    postState: function postState(values) {
      var postValues = values;

      for (var i = 0; i < 2; i += 1) {
        if (mergedDisabled[i] && !miscUtil_1.getValue(postValues, i) && !miscUtil_1.getValue(allowEmpty, i)) {
          postValues = miscUtil_1.updateValues(postValues, generateConfig.getNow(), i);
        }
      }

      return postValues;
    }
  }),
      _useMergedState_1$def4 = _slicedToArray(_useMergedState_1$def3, 2),
      selectedValue = _useMergedState_1$def4[0],
      setSelectedValue = _useMergedState_1$def4[1];

  var _React$useState3 = React.useState(null),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      rangeHoverValue = _React$useState4[0],
      setRangeHoverValue = _React$useState4[1]; // ========================== Hover Range ==========================


  var _React$useState5 = React.useState(null),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      hoverRangedValue = _React$useState6[0],
      setHoverRangedValue = _React$useState6[1];

  var onDateMouseEnter = function onDateMouseEnter(date) {
    setHoverRangedValue(miscUtil_1.updateValues(selectedValue, date, activePickerIndex));
  };

  var onDateMouseLeave = function onDateMouseLeave() {
    setHoverRangedValue(miscUtil_1.updateValues(selectedValue, null, activePickerIndex));
  }; // ============================= Modes =============================


  var _useMergedState_1$def5 = useMergedState_1.default([picker, picker], {
    value: mode
  }),
      _useMergedState_1$def6 = _slicedToArray(_useMergedState_1$def5, 2),
      mergedModes = _useMergedState_1$def6[0],
      setInnerModes = _useMergedState_1$def6[1];

  React.useEffect(function () {
    setInnerModes([picker, picker]);
  }, [picker]);

  var triggerModesChange = function triggerModesChange(modes, values) {
    setInnerModes(modes);

    if (onPanelChange) {
      onPanelChange(values, modes);
    }
  }; // ========================= Disable Date ==========================


  var _useRangeDisabled_1$d = useRangeDisabled_1.default({
    picker: picker,
    selectedValue: selectedValue,
    locale: locale,
    disabled: mergedDisabled,
    disabledDate: disabledDate,
    generateConfig: generateConfig
  }),
      _useRangeDisabled_1$d2 = _slicedToArray(_useRangeDisabled_1$d, 2),
      disabledStartDate = _useRangeDisabled_1$d2[0],
      disabledEndDate = _useRangeDisabled_1$d2[1]; // ============================= Open ==============================


  var _useMergedState_1$def7 = useMergedState_1.default(false, {
    value: open,
    defaultValue: defaultOpen,
    postState: function postState(postOpen) {
      return mergedDisabled[activePickerIndex] ? false : postOpen;
    },
    onChange: function onChange(newOpen) {
      if (onOpenChange) {
        onOpenChange(newOpen);
      }

      if (!newOpen && operationRef.current && operationRef.current.onClose) {
        operationRef.current.onClose();
      }
    }
  }),
      _useMergedState_1$def8 = _slicedToArray(_useMergedState_1$def7, 2),
      mergedOpen = _useMergedState_1$def8[0],
      triggerInnerOpen = _useMergedState_1$def8[1];

  var startOpen = mergedOpen && activePickerIndex === 0;
  var endOpen = mergedOpen && activePickerIndex === 1; // ============================= Popup =============================
  // Popup min width

  var _React$useState7 = React.useState(0),
      _React$useState8 = _slicedToArray(_React$useState7, 2),
      popupMinWidth = _React$useState8[0],
      setPopupMinWidth = _React$useState8[1];

  React.useEffect(function () {
    if (!mergedOpen && containerRef.current) {
      setPopupMinWidth(containerRef.current.offsetWidth);
    }
  }, [mergedOpen]); // ============================ Trigger ============================

  var _triggerOpen;

  var triggerChange = function triggerChange(newValue) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _config$forceInput = config.forceInput,
        forceInput = _config$forceInput === void 0 ? true : _config$forceInput,
        source = config.source;
    var values = newValue;
    var startValue = miscUtil_1.getValue(values, 0);
    var endValue = miscUtil_1.getValue(values, 1);

    if (startValue && endValue && generateConfig.isAfter(startValue, endValue)) {
      if (!dateUtil_1.isSameDate(generateConfig, startValue, endValue)) {
        // Clean up end date when start date is after end date
        values = [startValue, null];
        endValue = null;
      } else {
        // Reorder when in same date
        values = [endValue, startValue];
      }
    }

    setSelectedValue(values);
    var startStr = values && values[0] ? generateConfig.locale.format(locale.locale, values[0], formatList[0]) : '';
    var endStr = values && values[1] ? generateConfig.locale.format(locale.locale, values[1], formatList[0]) : '';

    if (onCalendarChange) {
      onCalendarChange(values, [startStr, endStr]);
    }

    var canStartValueTrigger = canValueTrigger(startValue, 0, mergedDisabled, allowEmpty);
    var canEndValueTrigger = canValueTrigger(endValue, 1, mergedDisabled, allowEmpty);
    var canTrigger = values === null || canStartValueTrigger && canEndValueTrigger;

    if (canTrigger) {
      // Trigger onChange only when value is validate
      setInnerValue(values);

      if (source !== 'open') {
        _triggerOpen(false, activePickerIndex, true);
      }

      if (onChange && (!dateUtil_1.isEqual(generateConfig, miscUtil_1.getValue(mergedValue, 0), startValue) || !dateUtil_1.isEqual(generateConfig, miscUtil_1.getValue(mergedValue, 1), endValue))) {
        onChange(values, [startStr, endStr]);
      }
    } else if (forceInput) {
      // Open miss value panel to force user input
      var missingValueIndex = canStartValueTrigger ? 1 : 0; // Same index means user choice to close picker

      if (missingValueIndex === activePickerIndex) {
        return;
      }

      if (source !== 'open') {
        _triggerOpen(true, missingValueIndex);
      } // Delay to focus to avoid input blur trigger expired selectedValues


      setTimeout(function () {
        var inputRef = [startInputRef, endInputRef][missingValueIndex];

        if (inputRef.current) {
          inputRef.current.focus();
        }
      }, 0);
    }
  };

  _triggerOpen = function triggerOpen(newOpen, index) {
    var preventChangeEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (newOpen) {
      setActivePickerIndex(index);
      triggerInnerOpen(newOpen); // Open to reset view date

      if (!mergedOpen) {
        setViewDate(null, index);
      }
    } else if (activePickerIndex === index) {
      triggerInnerOpen(newOpen);

      if (!preventChangeEvent) {
        triggerChange(selectedValue, {
          source: 'open'
        });
      }
    }
  };

  var forwardKeyDown = function forwardKeyDown(e) {
    if (mergedOpen && operationRef.current && operationRef.current.onKeyDown) {
      // Let popup panel handle keyboard
      return operationRef.current.onKeyDown(e);
    }
    /* istanbul ignore next */

    /* eslint-disable no-lone-blocks */


    {
      warning_1.default(false, 'Picker not correct forward KeyDown operation. Please help to fire issue about this.');
      return false;
    }
  }; // ============================= Text ==============================


  var sharedTextHooksProps = {
    formatList: formatList,
    generateConfig: generateConfig,
    locale: locale
  };
  var startValueTexts = useValueTexts_1.default(miscUtil_1.getValue(selectedValue, 0), sharedTextHooksProps);
  var endValueTexts = useValueTexts_1.default(miscUtil_1.getValue(selectedValue, 1), sharedTextHooksProps);

  var _onTextChange = function onTextChange(newText, index) {
    var inputDate = generateConfig.locale.parse(locale.locale, newText, formatList);
    var disabledFunc = index === 0 ? disabledStartDate : disabledEndDate;

    if (inputDate && !disabledFunc(inputDate)) {
      setSelectedValue(miscUtil_1.updateValues(selectedValue, inputDate, index));
      setViewDate(inputDate, index);
    }
  };

  var _useTextValueMapping_ = useTextValueMapping_1.default({
    valueTexts: startValueTexts,
    onTextChange: function onTextChange(newText) {
      return _onTextChange(newText, 0);
    }
  }),
      _useTextValueMapping_2 = _slicedToArray(_useTextValueMapping_, 3),
      startText = _useTextValueMapping_2[0],
      triggerStartTextChange = _useTextValueMapping_2[1],
      resetStartText = _useTextValueMapping_2[2];

  var _useTextValueMapping_3 = useTextValueMapping_1.default({
    valueTexts: endValueTexts,
    onTextChange: function onTextChange(newText) {
      return _onTextChange(newText, 1);
    }
  }),
      _useTextValueMapping_4 = _slicedToArray(_useTextValueMapping_3, 3),
      endText = _useTextValueMapping_4[0],
      triggerEndTextChange = _useTextValueMapping_4[1],
      resetEndText = _useTextValueMapping_4[2]; // ============================= Input =============================


  var getSharedInputHookProps = function getSharedInputHookProps(index, resetText) {
    return {
      blurToCancel: needConfirmButton,
      forwardKeyDown: forwardKeyDown,
      onBlur: onBlur,
      isClickOutside: function isClickOutside(target) {
        return !uiUtil_1.elementsContains([panelDivRef.current, startInputDivRef.current, endInputDivRef.current], target);
      },
      onFocus: function onFocus(e) {
        setActivePickerIndex(index);

        if (_onFocus) {
          _onFocus(e);
        }
      },
      triggerOpen: function triggerOpen(newOpen) {
        return _triggerOpen(newOpen, index);
      },
      onSubmit: function onSubmit() {
        triggerChange(selectedValue);
        resetText();
      },
      onCancel: function onCancel() {
        _triggerOpen(false, index, true);

        setSelectedValue(mergedValue);
        resetText();
      }
    };
  };

  var _usePickerInput_1$def = usePickerInput_1.default(_objectSpread({}, getSharedInputHookProps(0, resetStartText), {
    open: startOpen
  })),
      _usePickerInput_1$def2 = _slicedToArray(_usePickerInput_1$def, 2),
      startInputProps = _usePickerInput_1$def2[0],
      _usePickerInput_1$def3 = _usePickerInput_1$def2[1],
      startFocused = _usePickerInput_1$def3.focused,
      startTyping = _usePickerInput_1$def3.typing;

  var _usePickerInput_1$def4 = usePickerInput_1.default(_objectSpread({}, getSharedInputHookProps(1, resetEndText), {
    open: endOpen
  })),
      _usePickerInput_1$def5 = _slicedToArray(_usePickerInput_1$def4, 2),
      endInputProps = _usePickerInput_1$def5[0],
      _usePickerInput_1$def6 = _usePickerInput_1$def5[1],
      endFocused = _usePickerInput_1$def6.focused,
      endTyping = _usePickerInput_1$def6.typing; // ============================= Sync ==============================
  // Close should sync back with text value


  var startStr = mergedValue && mergedValue[0] ? generateConfig.locale.format(locale.locale, mergedValue[0], 'YYYYMMDDHHmmss') : '';
  var endStr = mergedValue && mergedValue[1] ? generateConfig.locale.format(locale.locale, mergedValue[1], 'YYYYMMDDHHmmss') : '';
  React.useEffect(function () {
    if (!mergedOpen) {
      setSelectedValue(mergedValue);

      if (!startValueTexts.length || startValueTexts[0] === '') {
        triggerStartTextChange('');
      } else if (!startValueTexts.includes(startText)) {
        resetStartText();
      }

      if (!endValueTexts.length || endValueTexts[0] === '') {
        triggerEndTextChange('');
      } else if (!endValueTexts.includes(endText)) {
        resetEndText();
      }
    }
  }, [mergedOpen, startValueTexts, endValueTexts]); // Sync innerValue with control mode

  React.useEffect(function () {
    setSelectedValue(mergedValue);
  }, [startStr, endStr]); // ============================ Warning ============================

  if (process.env.NODE_ENV !== 'production') {
    if (value && Array.isArray(disabled) && (miscUtil_1.getValue(disabled, 0) && !miscUtil_1.getValue(value, 0) || miscUtil_1.getValue(disabled, 1) && !miscUtil_1.getValue(value, 1))) {
      warning_1.default(false, '`disabled` should not set with empty `value`. You should set `allowEmpty` or `value` instead.');
    }
  } // ============================ Private ============================


  if (pickerRef) {
    pickerRef.current = {
      focus: function focus() {
        if (startInputRef.current) {
          startInputRef.current.focus();
        }
      },
      blur: function blur() {
        if (startInputRef.current) {
          startInputRef.current.blur();
        }

        if (endInputRef.current) {
          endInputRef.current.blur();
        }
      }
    };
  } // ============================ Ranges =============================


  var rangeLabels = Object.keys(ranges || {});
  var rangeList = rangeLabels.map(function (label) {
    var range = ranges[label];
    var newValues = typeof range === 'function' ? range() : range;
    return {
      label: label,
      onClick: function onClick() {
        triggerChange(newValues);
      },
      onMouseEnter: function onMouseEnter() {
        setRangeHoverValue(newValues);
      },
      onMouseLeave: function onMouseLeave() {
        setRangeHoverValue(null);
      }
    };
  }); // ============================= Panel =============================

  function renderPanel() {
    var panelPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var panelProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var panelHoverRangedValue = null;

    if (mergedOpen && hoverRangedValue && hoverRangedValue[0] && hoverRangedValue[1] && generateConfig.isAfter(hoverRangedValue[1], hoverRangedValue[0])) {
      panelHoverRangedValue = hoverRangedValue;
    }

    var panelShowTime = showTime;

    if (showTime && _typeof(showTime) === 'object' && showTime.defaultValue) {
      var timeDefaultValues = showTime.defaultValue;
      panelShowTime = _objectSpread({}, showTime, {
        defaultValue: miscUtil_1.getValue(timeDefaultValues, activePickerIndex) || undefined
      });
    }

    return React.createElement(RangeContext_1.default.Provider, {
      value: {
        inRange: true,
        panelPosition: panelPosition,
        rangedValue: rangeHoverValue || selectedValue,
        hoverRangedValue: panelHoverRangedValue
      }
    }, React.createElement(PickerPanel_1.default, Object.assign({}, props, panelProps, {
      showTime: panelShowTime,
      mode: mergedModes[activePickerIndex],
      generateConfig: generateConfig,
      style: undefined,
      direction: direction,
      disabledDate: activePickerIndex === 0 ? disabledStartDate : disabledEndDate,
      disabledTime: function disabledTime(date) {
        if (_disabledTime) {
          return _disabledTime(date, activePickerIndex === 0 ? 'start' : 'end');
        }

        return false;
      },
      className: classnames_1.default(_defineProperty({}, "".concat(prefixCls, "-panel-focused"), activePickerIndex === 0 ? !startTyping : !endTyping)),
      value: miscUtil_1.getValue(selectedValue, activePickerIndex),
      locale: locale,
      tabIndex: -1,
      onPanelChange: function onPanelChange(date, newMode) {
        triggerModesChange(miscUtil_1.updateValues(mergedModes, newMode, activePickerIndex), miscUtil_1.updateValues(selectedValue, date, activePickerIndex));
        setViewDate(date, activePickerIndex);
      },
      onOk: null,
      onSelect: undefined,
      onChange: undefined,
      defaultValue: undefined,
      defaultPickerValue: undefined
    })));
  }

  var arrowLeft = 0;
  var panelLeft = 0;

  if (activePickerIndex && startInputDivRef.current && separatorRef.current && panelDivRef.current) {
    // Arrow offset
    arrowLeft = startInputDivRef.current.offsetWidth + separatorRef.current.offsetWidth;

    if (panelDivRef.current.offsetWidth && arrowLeft > panelDivRef.current.offsetWidth) {
      panelLeft = arrowLeft;
    }
  }

  var arrowPositionStyle = direction === 'rtl' ? {
    right: arrowLeft
  } : {
    left: arrowLeft
  };

  function renderPanels() {
    var panels;
    var extraNode = getExtraFooter_1.default(prefixCls, mergedModes[activePickerIndex], renderExtraFooter);
    var rangesNode = getRanges_1.default({
      prefixCls: prefixCls,
      components: components,
      needConfirmButton: needConfirmButton,
      okDisabled: !miscUtil_1.getValue(selectedValue, activePickerIndex),
      locale: locale,
      rangeList: rangeList,
      onOk: function onOk() {
        if (miscUtil_1.getValue(selectedValue, activePickerIndex)) {
          triggerChange(selectedValue);

          if (_onOk) {
            _onOk(selectedValue);
          }
        }
      }
    });

    if (picker !== 'time' && !showTime) {
      var viewDate = getViewDate(activePickerIndex);
      var nextViewDate = dateUtil_1.getClosingViewDate(viewDate, picker, generateConfig);
      var currentMode = mergedModes[activePickerIndex];
      var showDoublePanel = currentMode === picker;
      var leftPanel = renderPanel(showDoublePanel ? 'left' : false, {
        pickerValue: viewDate,
        onPickerValueChange: function onPickerValueChange(newViewDate) {
          setViewDate(newViewDate, activePickerIndex);
        }
      });
      var rightPanel = renderPanel('right', {
        pickerValue: nextViewDate,
        onPickerValueChange: function onPickerValueChange(newViewDate) {
          setViewDate(dateUtil_1.getClosingViewDate(newViewDate, picker, generateConfig, -1), activePickerIndex);
        }
      });
      panels = React.createElement(React.Fragment, null, direction === 'rtl' ? rightPanel : leftPanel, direction === 'rtl' ? showDoublePanel && leftPanel : showDoublePanel && rightPanel);
    } else {
      panels = renderPanel();
    }

    return React.createElement("div", {
      className: "".concat(prefixCls, "-panel-container"),
      style: {
        marginLeft: panelLeft
      },
      ref: panelDivRef,
      onMouseDown: function onMouseDown(e) {
        e.preventDefault();
      }
    }, React.createElement("div", {
      className: "".concat(prefixCls, "-panels")
    }, panels), (extraNode || rangesNode) && React.createElement("div", {
      className: "".concat(prefixCls, "-footer")
    }, extraNode, rangesNode));
  }

  var rangePanel = React.createElement("div", {
    className: classnames_1.default("".concat(prefixCls, "-range-wrapper"), "".concat(prefixCls, "-").concat(picker, "-range-wrapper")),
    style: {
      minWidth: popupMinWidth
    }
  }, React.createElement("div", {
    className: "".concat(prefixCls, "-range-arrow"),
    style: arrowPositionStyle
  }), renderPanels()); // ============================= Icons =============================

  var suffixNode;

  if (suffixIcon) {
    suffixNode = React.createElement("span", {
      className: "".concat(prefixCls, "-suffix")
    }, suffixIcon);
  }

  var clearNode;

  if (allowClear && (miscUtil_1.getValue(mergedValue, 0) && !mergedDisabled[0] || miscUtil_1.getValue(mergedValue, 1) && !mergedDisabled[1])) {
    clearNode = React.createElement("span", {
      onMouseDown: function onMouseDown(e) {
        e.preventDefault();
        e.stopPropagation();
      },
      onMouseUp: function onMouseUp(e) {
        e.preventDefault();
        e.stopPropagation();
        var values = mergedValue;

        if (!mergedDisabled[0]) {
          values = miscUtil_1.updateValues(values, null, 0);
        }

        if (!mergedDisabled[1]) {
          values = miscUtil_1.updateValues(values, null, 1);
        }

        triggerChange(values, {
          forceInput: false
        });
      },
      className: "".concat(prefixCls, "-clear")
    }, clearIcon || React.createElement("span", {
      className: "".concat(prefixCls, "-clear-btn")
    }));
  }

  var inputSharedProps = {
    size: uiUtil_1.getInputSize(picker, formatList[0])
  };
  var activeBarLeft = 0;
  var activeBarWidth = 0;

  if (startInputDivRef.current && endInputDivRef.current && separatorRef.current) {
    if (activePickerIndex === 0) {
      activeBarWidth = startInputDivRef.current.offsetWidth;
    } else {
      activeBarLeft = arrowLeft;
      activeBarWidth = endInputDivRef.current.offsetWidth;
    }
  }

  var activeBarPositionStyle = direction === 'rtl' ? {
    right: activeBarLeft
  } : {
    left: activeBarLeft
  }; // ============================ Return =============================

  var onContextSelect = function onContextSelect(date, type) {
    var values = miscUtil_1.updateValues(selectedValue, date, activePickerIndex);

    if (type === 'submit' || type !== 'key' && !needConfirmButton) {
      // triggerChange will also update selected values
      triggerChange(values);
    } else {
      setSelectedValue(values);
    }
  };

  return React.createElement(PanelContext_1.default.Provider, {
    value: {
      operationRef: operationRef,
      hideHeader: picker === 'time',
      onDateMouseEnter: onDateMouseEnter,
      onDateMouseLeave: onDateMouseLeave,
      hideRanges: true,
      onSelect: onContextSelect,
      open: mergedOpen
    }
  }, React.createElement(PickerTrigger_1.default, {
    visible: mergedOpen,
    popupElement: rangePanel,
    popupStyle: popupStyle,
    prefixCls: prefixCls,
    dropdownClassName: dropdownClassName,
    dropdownAlign: dropdownAlign,
    getPopupContainer: getPopupContainer,
    transitionName: transitionName,
    range: true,
    direction: direction
  }, React.createElement("div", Object.assign({
    ref: containerRef,
    className: classnames_1.default(prefixCls, "".concat(prefixCls, "-range"), className, (_classnames_1$default2 = {}, _defineProperty(_classnames_1$default2, "".concat(prefixCls, "-disabled"), mergedDisabled[0] && mergedDisabled[1]), _defineProperty(_classnames_1$default2, "".concat(prefixCls, "-focused"), activePickerIndex === 0 ? startFocused : endFocused), _defineProperty(_classnames_1$default2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classnames_1$default2)),
    style: style
  }, miscUtil_1.default(props)), React.createElement("div", {
    className: classnames_1.default("".concat(prefixCls, "-input"), _defineProperty({}, "".concat(prefixCls, "-input-active"), activePickerIndex === 0)),
    ref: startInputDivRef
  }, React.createElement("input", Object.assign({
    disabled: mergedDisabled[0],
    readOnly: inputReadOnly || !startTyping,
    value: startText,
    onChange: function onChange(e) {
      triggerStartTextChange(e.target.value);
    },
    autoFocus: autoFocus,
    placeholder: miscUtil_1.getValue(placeholder, 0) || '',
    ref: startInputRef
  }, startInputProps, inputSharedProps))), React.createElement("div", {
    className: "".concat(prefixCls, "-range-separator"),
    ref: separatorRef
  }, separator), React.createElement("div", {
    className: classnames_1.default("".concat(prefixCls, "-input"), _defineProperty({}, "".concat(prefixCls, "-input-active"), activePickerIndex === 1)),
    ref: endInputDivRef
  }, React.createElement("input", Object.assign({
    disabled: mergedDisabled[1],
    readOnly: inputReadOnly || !endTyping,
    value: endText,
    onChange: function onChange(e) {
      triggerEndTextChange(e.target.value);
    },
    placeholder: miscUtil_1.getValue(placeholder, 1) || '',
    ref: endInputRef
  }, endInputProps, inputSharedProps))), React.createElement("div", {
    className: "".concat(prefixCls, "-active-bar"),
    style: _objectSpread({}, activeBarPositionStyle, {
      width: activeBarWidth,
      position: 'absolute'
    })
  }), suffixNode, clearNode)));
} // Wrap with class component to enable pass generic with instance method


var RangePicker = /*#__PURE__*/function (_React$Component) {
  _inherits(RangePicker, _React$Component);

  function RangePicker() {
    var _this;

    _classCallCheck(this, RangePicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RangePicker).apply(this, arguments));
    _this.pickerRef = React.createRef();

    _this.focus = function () {
      if (_this.pickerRef.current) {
        _this.pickerRef.current.focus();
      }
    };

    _this.blur = function () {
      if (_this.pickerRef.current) {
        _this.pickerRef.current.blur();
      }
    };

    return _this;
  }

  _createClass(RangePicker, [{
    key: "render",
    value: function render() {
      return React.createElement(InnerRangePicker, Object.assign({}, this.props, {
        pickerRef: this.pickerRef
      }));
    }
  }]);

  return RangePicker;
}(React.Component);

exports.default = RangePicker;