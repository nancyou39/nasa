"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dayjs_1 = __importDefault(require("dayjs"));

var warning_1 = require("rc-util/lib/warning");

var weekday_1 = __importDefault(require("dayjs/plugin/weekday"));

var localeData_1 = __importDefault(require("dayjs/plugin/localeData"));

var weekOfYear_1 = __importDefault(require("dayjs/plugin/weekOfYear"));

var weekYear_1 = __importDefault(require("dayjs/plugin/weekYear"));

var advancedFormat_1 = __importDefault(require("dayjs/plugin/advancedFormat"));

var customParseFormat_1 = __importDefault(require("dayjs/plugin/customParseFormat"));

dayjs_1.default.extend(customParseFormat_1.default);
dayjs_1.default.extend(advancedFormat_1.default);
dayjs_1.default.extend(weekday_1.default);
dayjs_1.default.extend(localeData_1.default);
dayjs_1.default.extend(weekOfYear_1.default);
dayjs_1.default.extend(weekYear_1.default);
dayjs_1.default.extend(function (o, c) {
  // todo support Wo (ISO week)
  var proto = c.prototype;
  var oldFormat = proto.format;

  proto.format = function f(formatStr) {
    var str = (formatStr || '').replace('Wo', 'wo');
    return oldFormat.bind(this)(str);
  };
});
var localeMap = {
  en_GB: 'en-gb',
  en_US: 'en',
  zh_CN: 'zh-cn',
  zh_TW: 'zh-tw'
};

var parseLocale = function parseLocale(locale) {
  var mapLocale = localeMap[locale];
  return mapLocale || locale.split('_')[0];
};

var parseNoMatchNotice = function parseNoMatchNotice() {
  /* istanbul ignore next */
  warning_1.noteOnce(false, 'Not match any format. Please help to fire a issue about this.');
};

var generateConfig = {
  // get
  getNow: function getNow() {
    return dayjs_1.default();
  },
  getWeekDay: function getWeekDay(date) {
    return date.weekday();
  },
  getYear: function getYear(date) {
    return date.year();
  },
  getMonth: function getMonth(date) {
    return date.month();
  },
  getDate: function getDate(date) {
    return date.date();
  },
  getHour: function getHour(date) {
    return date.hour();
  },
  getMinute: function getMinute(date) {
    return date.minute();
  },
  getSecond: function getSecond(date) {
    return date.second();
  },
  // set
  addYear: function addYear(date, diff) {
    return date.add(diff, 'year');
  },
  addMonth: function addMonth(date, diff) {
    return date.add(diff, 'month');
  },
  addDate: function addDate(date, diff) {
    return date.add(diff, 'day');
  },
  setYear: function setYear(date, year) {
    return date.year(year);
  },
  setMonth: function setMonth(date, month) {
    return date.month(month);
  },
  setDate: function setDate(date, num) {
    return date.date(num);
  },
  setHour: function setHour(date, hour) {
    return date.hour(hour);
  },
  setMinute: function setMinute(date, minute) {
    return date.minute(minute);
  },
  setSecond: function setSecond(date, second) {
    return date.second(second);
  },
  // Compare
  isAfter: function isAfter(date1, date2) {
    return date1.isAfter(date2);
  },
  isValidate: function isValidate(date) {
    return date.isValid();
  },
  locale: {
    getWeekFirstDay: function getWeekFirstDay(locale) {
      return dayjs_1.default().locale(parseLocale(locale)).localeData().firstDayOfWeek();
    },
    getWeek: function getWeek(locale, date) {
      return date.locale(parseLocale(locale)).week();
    },
    getShortWeekDays: function getShortWeekDays(locale) {
      return dayjs_1.default().locale(parseLocale(locale)).localeData().weekdaysMin();
    },
    getShortMonths: function getShortMonths(locale) {
      return dayjs_1.default().locale(parseLocale(locale)).localeData().monthsShort();
    },
    format: function format(locale, date, _format) {
      return date.locale(parseLocale(locale)).format(_format);
    },
    parse: function parse(locale, text, formats) {
      var localeStr = parseLocale(locale);

      for (var i = 0; i < formats.length; i += 1) {
        var format = formats[i];
        var formatText = text;

        if (format.includes('wo') || format.includes('Wo')) {
          // parse Wo
          var year = formatText.split('-')[0];
          var weekStr = formatText.split('-')[1];
          var firstWeek = dayjs_1.default(year, 'YYYY').startOf('year').locale(localeStr);

          for (var j = 0; j <= 52; j += 1) {
            var nextWeek = firstWeek.add(j, 'week');

            if (nextWeek.format('Wo') === weekStr) {
              return nextWeek;
            }
          }

          parseNoMatchNotice();
          return null;
        }

        var date = dayjs_1.default(formatText, format).locale(localeStr);

        if (date.isValid()) {
          return date;
        }
      }

      parseNoMatchNotice();
      return null;
    }
  }
};
exports.default = generateConfig;