{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { convertChildrenToColumns } from \"rc-table/es/hooks/useColumns\";\nimport CaretDownOutlined from '@ant-design/icons/CaretDownOutlined';\nimport CaretUpOutlined from '@ant-design/icons/CaretUpOutlined';\nimport { getColumnKey, getColumnPos, renderColumnTitle } from '../util';\n\nfunction getMultiplePriority(column) {\n  if (_typeof(column.sorter) === 'object' && typeof column.sorter.multiple === 'number') {\n    return column.sorter.multiple;\n  }\n\n  return false;\n}\n\nfunction getSortFunction(sorter) {\n  if (typeof sorter === 'function') {\n    return sorter;\n  }\n\n  if (sorter && _typeof(sorter) === 'object' && sorter.compare) {\n    return sorter.compare;\n  }\n\n  return false;\n}\n\nfunction nextSortDirection(sortDirections, current) {\n  if (!current) {\n    return sortDirections[0];\n  }\n\n  return sortDirections[sortDirections.indexOf(current) + 1];\n}\n\nfunction collectSortStates(columns, init, pos) {\n  var sortStates = [];\n  (columns || []).forEach(function (column, index) {\n    var columnPos = getColumnPos(index, pos);\n\n    if ('children' in column) {\n      sortStates = [].concat(_toConsumableArray(sortStates), _toConsumableArray(collectSortStates(column.children, init, columnPos)));\n    } else if (column.sorter) {\n      if ('sortOrder' in column) {\n        // Controlled\n        sortStates.push({\n          column: column,\n          key: getColumnKey(column, columnPos),\n          multiplePriority: getMultiplePriority(column),\n          sortOrder: column.sortOrder\n        });\n      } else if (init && column.defaultSortOrder) {\n        // Default sorter\n        sortStates.push({\n          column: column,\n          key: getColumnKey(column, columnPos),\n          multiplePriority: getMultiplePriority(column),\n          sortOrder: column.defaultSortOrder\n        });\n      }\n    }\n  });\n  return sortStates;\n}\n\nfunction injectSorter(prefixCls, columns, sorterSates, triggerSorter, defaultSortDirections, pos) {\n  return (columns || []).map(function (column, index) {\n    var columnPos = getColumnPos(index, pos);\n    var newColumn = column;\n\n    if (newColumn.sorter) {\n      var sortDirections = newColumn.sortDirections || defaultSortDirections;\n      var columnKey = getColumnKey(newColumn, columnPos);\n      var sorterState = sorterSates.find(function (_ref) {\n        var key = _ref.key;\n        return key === columnKey;\n      });\n      var sorterOrder = sorterState ? sorterState.sortOrder : null;\n      var upNode = sortDirections.includes('ascend') && React.createElement(CaretUpOutlined, {\n        className: classNames(\"\".concat(prefixCls, \"-column-sorter-up\"), {\n          active: sorterOrder === 'ascend'\n        })\n      });\n      var downNode = sortDirections.includes('descend') && React.createElement(CaretDownOutlined, {\n        className: classNames(\"\".concat(prefixCls, \"-column-sorter-down\"), {\n          active: sorterOrder === 'descend'\n        })\n      });\n      newColumn = _extends(_extends({}, newColumn), {\n        className: classNames(newColumn.className, _defineProperty({}, \"\".concat(prefixCls, \"-column-sort\"), sorterOrder)),\n        title: function title(renderProps) {\n          return React.createElement(\"div\", {\n            className: \"\".concat(prefixCls, \"-column-sorters\")\n          }, React.createElement(\"span\", null, renderColumnTitle(column.title, renderProps)), React.createElement(\"span\", {\n            className: classNames(\"\".concat(prefixCls, \"-column-sorter\"), _defineProperty({}, \"\".concat(prefixCls, \"-column-sorter-full\"), upNode && downNode))\n          }, React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-column-sorter-inner\")\n          }, upNode, downNode)));\n        },\n        onHeaderCell: function onHeaderCell(col) {\n          var cell = column.onHeaderCell && column.onHeaderCell(col) || {};\n          var originOnClick = cell.onClick;\n\n          cell.onClick = function (event) {\n            triggerSorter({\n              column: column,\n              key: columnKey,\n              sortOrder: nextSortDirection(sortDirections, sorterOrder),\n              multiplePriority: getMultiplePriority(column)\n            });\n\n            if (originOnClick) {\n              originOnClick(event);\n            }\n          };\n\n          cell.className = classNames(cell.className, \"\".concat(prefixCls, \"-column-has-sorters\"));\n          return cell;\n        }\n      });\n    }\n\n    if ('children' in newColumn) {\n      newColumn = _extends(_extends({}, newColumn), {\n        children: injectSorter(prefixCls, newColumn.children, sorterSates, triggerSorter, defaultSortDirections, columnPos)\n      });\n    }\n\n    return newColumn;\n  });\n}\n\nfunction stateToInfo(sorterStates) {\n  var column = sorterStates.column,\n      sortOrder = sorterStates.sortOrder;\n  return {\n    column: column,\n    order: sortOrder,\n    field: column.dataIndex,\n    columnKey: column.key\n  };\n}\n\nfunction generateSorterInfo(sorterStates) {\n  var list = sorterStates.filter(function (_ref2) {\n    var sortOrder = _ref2.sortOrder;\n    return sortOrder;\n  }).map(stateToInfo); // =========== Legacy compatible support ===========\n  // https://github.com/ant-design/ant-design/pull/19226\n\n  if (list.length === 0 && sorterStates.length) {\n    return _extends(_extends({}, stateToInfo(sorterStates[0])), {\n      column: undefined\n    });\n  }\n\n  if (list.length <= 1) {\n    return list[0] || {};\n  }\n\n  return list;\n}\n\nexport function getSortData(data, sortStates, childrenColumnName) {\n  var innerSorterStates = sortStates.slice().sort(function (a, b) {\n    return b.multiplePriority - a.multiplePriority;\n  });\n  var cloneData = data.slice();\n  var runningSorters = innerSorterStates.filter(function (_ref3) {\n    var sorter = _ref3.column.sorter,\n        sortOrder = _ref3.sortOrder;\n    return getSortFunction(sorter) && sortOrder;\n  }); // Skip if no sorter needed\n\n  if (!runningSorters.length) {\n    return cloneData;\n  }\n\n  return cloneData.sort(function (record1, record2) {\n    for (var i = 0; i < runningSorters.length; i += 1) {\n      var sorterState = runningSorters[i];\n      var sorter = sorterState.column.sorter,\n          sortOrder = sorterState.sortOrder;\n      var compareFn = getSortFunction(sorter);\n\n      if (compareFn && sortOrder) {\n        var compareResult = compareFn(record1, record2, sortOrder);\n\n        if (compareResult !== 0) {\n          return sortOrder === 'ascend' ? compareResult : -compareResult;\n        }\n      }\n    }\n\n    return 0;\n  }).map(function (record) {\n    var subRecords = record[childrenColumnName];\n\n    if (subRecords) {\n      return _extends(_extends({}, record), _defineProperty({}, childrenColumnName, getSortData(subRecords, sortStates, childrenColumnName)));\n    }\n\n    return record;\n  });\n}\nexport default function useFilterSorter(_ref4) {\n  var prefixCls = _ref4.prefixCls,\n      columns = _ref4.columns,\n      children = _ref4.children,\n      onSorterChange = _ref4.onSorterChange,\n      sortDirections = _ref4.sortDirections;\n  var mergedColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [children, columns]);\n\n  var _React$useState = React.useState(collectSortStates(mergedColumns, true)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      sortStates = _React$useState2[0],\n      setSortStates = _React$useState2[1];\n\n  var mergedSorterStates = React.useMemo(function () {\n    var validate = true;\n    var collectedStates = collectSortStates(mergedColumns, false); // Return if not controlled\n\n    if (!collectedStates.length) {\n      return sortStates;\n    }\n\n    var validateStates = [];\n\n    function patchStates(state) {\n      if (validate) {\n        validateStates.push(state);\n      } else {\n        validateStates.push(_extends(_extends({}, state), {\n          sortOrder: null\n        }));\n      }\n    }\n\n    var multipleMode = null;\n    collectedStates.forEach(function (state) {\n      if (multipleMode === null) {\n        patchStates(state);\n\n        if (state.sortOrder) {\n          if (state.multiplePriority === false) {\n            validate = false;\n          } else {\n            multipleMode = true;\n          }\n        }\n      } else if (multipleMode && state.multiplePriority !== false) {\n        patchStates(state);\n      } else {\n        validate = false;\n        patchStates(state);\n      }\n    });\n    return validateStates;\n  }, [mergedColumns, sortStates]); // Get render columns title required props\n\n  var columnTitleSorterProps = React.useMemo(function () {\n    var sortColumns = mergedSorterStates.map(function (_ref5) {\n      var column = _ref5.column,\n          sortOrder = _ref5.sortOrder;\n      return {\n        column: column,\n        order: sortOrder\n      };\n    });\n    return {\n      sortColumns: sortColumns,\n      // Legacy\n      sortColumn: sortColumns[0] && sortColumns[0].column,\n      sortOrder: sortColumns[0] && sortColumns[0].order\n    };\n  }, [mergedSorterStates]);\n\n  function triggerSorter(sortState) {\n    var newSorterStates;\n\n    if (sortState.multiplePriority === false || !mergedSorterStates.length || mergedSorterStates[0].multiplePriority === false) {\n      newSorterStates = [sortState];\n    } else {\n      newSorterStates = [].concat(_toConsumableArray(mergedSorterStates.filter(function (_ref6) {\n        var key = _ref6.key;\n        return key !== sortState.key;\n      })), [sortState]);\n    }\n\n    setSortStates(newSorterStates);\n    onSorterChange(generateSorterInfo(newSorterStates), newSorterStates);\n  }\n\n  var transformColumns = function transformColumns(innerColumns) {\n    return injectSorter(prefixCls, innerColumns, mergedSorterStates, triggerSorter, sortDirections);\n  };\n\n  var getSorters = function getSorters() {\n    return generateSorterInfo(mergedSorterStates);\n  };\n\n  return [transformColumns, mergedSorterStates, columnTitleSorterProps, getSorters];\n}","map":{"version":3,"sources":["table/hooks/useSorter.jsx"],"names":["column","sorter","sortDirections","sortStates","columns","columnPos","getColumnPos","collectSortStates","key","getColumnKey","multiplePriority","getMultiplePriority","sortOrder","init","defaultSortOrder","newColumn","columnKey","sorterState","sorterOrder","upNode","classNames","active","downNode","className","title","renderColumnTitle","onHeaderCell","cell","originOnClick","triggerSorter","nextSortDirection","children","injectSorter","sorterStates","order","field","list","stateToInfo","undefined","innerSorterStates","b","a","cloneData","data","runningSorters","getSortFunction","i","compareFn","compareResult","subRecords","record","getSortData","prefixCls","onSorterChange","mergedColumns","convertChildrenToColumns","setSortStates","React","mergedSorterStates","validate","collectedStates","validateStates","multipleMode","patchStates","state","columnTitleSorterProps","sortColumns","sortColumn","sortState","newSorterStates","generateSorterInfo","transformColumns","getSorters"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { convertChildrenToColumns } from 'rc-table/lib/hooks/useColumns';\nimport CaretDownOutlined from '@ant-design/icons/CaretDownOutlined';\nimport CaretUpOutlined from '@ant-design/icons/CaretUpOutlined';\nimport { getColumnKey, getColumnPos, renderColumnTitle } from '../util';\nfunction getMultiplePriority(column) {\n    if (typeof column.sorter === 'object' && typeof column.sorter.multiple === 'number') {\n        return column.sorter.multiple;\n    }\n    return false;\n}\nfunction getSortFunction(sorter) {\n    if (typeof sorter === 'function') {\n        return sorter;\n    }\n    if (sorter && typeof sorter === 'object' && sorter.compare) {\n        return sorter.compare;\n    }\n    return false;\n}\nfunction nextSortDirection(sortDirections, current) {\n    if (!current) {\n        return sortDirections[0];\n    }\n    return sortDirections[sortDirections.indexOf(current) + 1];\n}\nfunction collectSortStates(columns, init, pos) {\n    let sortStates = [];\n    (columns || []).forEach((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        if ('children' in column) {\n            sortStates = [...sortStates, ...collectSortStates(column.children, init, columnPos)];\n        }\n        else if (column.sorter) {\n            if ('sortOrder' in column) {\n                // Controlled\n                sortStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    multiplePriority: getMultiplePriority(column),\n                    sortOrder: column.sortOrder,\n                });\n            }\n            else if (init && column.defaultSortOrder) {\n                // Default sorter\n                sortStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    multiplePriority: getMultiplePriority(column),\n                    sortOrder: column.defaultSortOrder,\n                });\n            }\n        }\n    });\n    return sortStates;\n}\nfunction injectSorter(prefixCls, columns, sorterSates, triggerSorter, defaultSortDirections, pos) {\n    return (columns || []).map((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        let newColumn = column;\n        if (newColumn.sorter) {\n            const sortDirections = newColumn.sortDirections || defaultSortDirections;\n            const columnKey = getColumnKey(newColumn, columnPos);\n            const sorterState = sorterSates.find(({ key }) => key === columnKey);\n            const sorterOrder = sorterState ? sorterState.sortOrder : null;\n            const upNode = sortDirections.includes('ascend') && (<CaretUpOutlined className={classNames(`${prefixCls}-column-sorter-up`, {\n                active: sorterOrder === 'ascend',\n            })}/>);\n            const downNode = sortDirections.includes('descend') && (<CaretDownOutlined className={classNames(`${prefixCls}-column-sorter-down`, {\n                active: sorterOrder === 'descend',\n            })}/>);\n            newColumn = Object.assign(Object.assign({}, newColumn), { className: classNames(newColumn.className, { [`${prefixCls}-column-sort`]: sorterOrder }), title: (renderProps) => (<div className={`${prefixCls}-column-sorters`}>\n            <span>{renderColumnTitle(column.title, renderProps)}</span>\n            <span className={classNames(`${prefixCls}-column-sorter`, {\n                    [`${prefixCls}-column-sorter-full`]: upNode && downNode,\n                })}>\n              <span className={`${prefixCls}-column-sorter-inner`}>\n                {upNode}\n                {downNode}\n              </span>\n            </span>\n          </div>), onHeaderCell: col => {\n                    const cell = (column.onHeaderCell && column.onHeaderCell(col)) || {};\n                    const originOnClick = cell.onClick;\n                    cell.onClick = (event) => {\n                        triggerSorter({\n                            column,\n                            key: columnKey,\n                            sortOrder: nextSortDirection(sortDirections, sorterOrder),\n                            multiplePriority: getMultiplePriority(column),\n                        });\n                        if (originOnClick) {\n                            originOnClick(event);\n                        }\n                    };\n                    cell.className = classNames(cell.className, `${prefixCls}-column-has-sorters`);\n                    return cell;\n                } });\n        }\n        if ('children' in newColumn) {\n            newColumn = Object.assign(Object.assign({}, newColumn), { children: injectSorter(prefixCls, newColumn.children, sorterSates, triggerSorter, defaultSortDirections, columnPos) });\n        }\n        return newColumn;\n    });\n}\nfunction stateToInfo(sorterStates) {\n    const { column, sortOrder } = sorterStates;\n    return { column, order: sortOrder, field: column.dataIndex, columnKey: column.key };\n}\nfunction generateSorterInfo(sorterStates) {\n    const list = sorterStates.filter(({ sortOrder }) => sortOrder).map(stateToInfo);\n    // =========== Legacy compatible support ===========\n    // https://github.com/ant-design/ant-design/pull/19226\n    if (list.length === 0 && sorterStates.length) {\n        return Object.assign(Object.assign({}, stateToInfo(sorterStates[0])), { column: undefined });\n    }\n    if (list.length <= 1) {\n        return list[0] || {};\n    }\n    return list;\n}\nexport function getSortData(data, sortStates, childrenColumnName) {\n    const innerSorterStates = sortStates\n        .slice()\n        .sort((a, b) => b.multiplePriority - a.multiplePriority);\n    const cloneData = data.slice();\n    const runningSorters = innerSorterStates.filter(({ column: { sorter }, sortOrder }) => {\n        return getSortFunction(sorter) && sortOrder;\n    });\n    // Skip if no sorter needed\n    if (!runningSorters.length) {\n        return cloneData;\n    }\n    return cloneData\n        .sort((record1, record2) => {\n        for (let i = 0; i < runningSorters.length; i += 1) {\n            const sorterState = runningSorters[i];\n            const { column: { sorter }, sortOrder, } = sorterState;\n            const compareFn = getSortFunction(sorter);\n            if (compareFn && sortOrder) {\n                const compareResult = compareFn(record1, record2, sortOrder);\n                if (compareResult !== 0) {\n                    return sortOrder === 'ascend' ? compareResult : -compareResult;\n                }\n            }\n        }\n        return 0;\n    })\n        .map(record => {\n        const subRecords = record[childrenColumnName];\n        if (subRecords) {\n            return Object.assign(Object.assign({}, record), { [childrenColumnName]: getSortData(subRecords, sortStates, childrenColumnName) });\n        }\n        return record;\n    });\n}\nexport default function useFilterSorter({ prefixCls, columns, children, onSorterChange, sortDirections, }) {\n    const mergedColumns = React.useMemo(() => {\n        return columns || convertChildrenToColumns(children);\n    }, [children, columns]);\n    const [sortStates, setSortStates] = React.useState(collectSortStates(mergedColumns, true));\n    const mergedSorterStates = React.useMemo(() => {\n        let validate = true;\n        const collectedStates = collectSortStates(mergedColumns, false);\n        // Return if not controlled\n        if (!collectedStates.length) {\n            return sortStates;\n        }\n        const validateStates = [];\n        function patchStates(state) {\n            if (validate) {\n                validateStates.push(state);\n            }\n            else {\n                validateStates.push(Object.assign(Object.assign({}, state), { sortOrder: null }));\n            }\n        }\n        let multipleMode = null;\n        collectedStates.forEach(state => {\n            if (multipleMode === null) {\n                patchStates(state);\n                if (state.sortOrder) {\n                    if (state.multiplePriority === false) {\n                        validate = false;\n                    }\n                    else {\n                        multipleMode = true;\n                    }\n                }\n            }\n            else if (multipleMode && state.multiplePriority !== false) {\n                patchStates(state);\n            }\n            else {\n                validate = false;\n                patchStates(state);\n            }\n        });\n        return validateStates;\n    }, [mergedColumns, sortStates]);\n    // Get render columns title required props\n    const columnTitleSorterProps = React.useMemo(() => {\n        const sortColumns = mergedSorterStates.map(({ column, sortOrder }) => ({\n            column,\n            order: sortOrder,\n        }));\n        return {\n            sortColumns,\n            // Legacy\n            sortColumn: sortColumns[0] && sortColumns[0].column,\n            sortOrder: sortColumns[0] && sortColumns[0].order,\n        };\n    }, [mergedSorterStates]);\n    function triggerSorter(sortState) {\n        let newSorterStates;\n        if (sortState.multiplePriority === false ||\n            !mergedSorterStates.length ||\n            mergedSorterStates[0].multiplePriority === false) {\n            newSorterStates = [sortState];\n        }\n        else {\n            newSorterStates = [\n                ...mergedSorterStates.filter(({ key }) => key !== sortState.key),\n                sortState,\n            ];\n        }\n        setSortStates(newSorterStates);\n        onSorterChange(generateSorterInfo(newSorterStates), newSorterStates);\n    }\n    const transformColumns = (innerColumns) => injectSorter(prefixCls, innerColumns, mergedSorterStates, triggerSorter, sortDirections);\n    const getSorters = () => {\n        return generateSorterInfo(mergedSorterStates);\n    };\n    return [transformColumns, mergedSorterStates, columnTitleSorterProps, getSorters];\n}\n"]},"metadata":{},"sourceType":"module"}