{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nimport { ConfigConsumer } from '../config-provider';\nimport Element from './Element';\n\nfunction getComponentProps(prop) {\n  if (prop && _typeof(prop) === 'object') {\n    return prop;\n  }\n\n  return {};\n}\n\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n  if (hasTitle && !hasParagraph) {\n    // Square avatar\n    return {\n      size: 'large',\n      shape: 'square'\n    };\n  }\n\n  return {\n    size: 'large',\n    shape: 'circle'\n  };\n}\n\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n  if (!hasAvatar && hasParagraph) {\n    return {\n      width: '38%'\n    };\n  }\n\n  if (hasAvatar && hasParagraph) {\n    return {\n      width: '50%'\n    };\n  }\n\n  return {};\n}\n\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n  var basicProps = {}; // Width\n\n  if (!hasAvatar || !hasTitle) {\n    basicProps.width = '61%';\n  } // Rows\n\n\n  if (!hasAvatar && hasTitle) {\n    basicProps.rows = 3;\n  } else {\n    basicProps.rows = 2;\n  }\n\n  return basicProps;\n}\n\nvar Skeleton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Skeleton, _React$Component);\n\n  function Skeleton() {\n    var _this;\n\n    _classCallCheck(this, Skeleton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Skeleton).apply(this, arguments));\n\n    _this.renderSkeleton = function (_ref) {\n      var getPrefixCls = _ref.getPrefixCls,\n          direction = _ref.direction;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          loading = _this$props.loading,\n          className = _this$props.className,\n          children = _this$props.children,\n          avatar = _this$props.avatar,\n          title = _this$props.title,\n          paragraph = _this$props.paragraph,\n          active = _this$props.active;\n      var prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n\n      if (loading || !('loading' in _this.props)) {\n        var _classNames;\n\n        var hasAvatar = !!avatar;\n        var hasTitle = !!title;\n        var hasParagraph = !!paragraph; // Avatar\n\n        var avatarNode;\n\n        if (hasAvatar) {\n          var avatarProps = _extends(_extends({\n            prefixCls: \"\".concat(prefixCls, \"-avatar\")\n          }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar)); // We direct use SkeletonElement as avatar in skeleton internal.\n\n\n          avatarNode = React.createElement(\"div\", {\n            className: \"\".concat(prefixCls, \"-header\")\n          }, React.createElement(Element, avatarProps));\n        }\n\n        var contentNode;\n\n        if (hasTitle || hasParagraph) {\n          // Title\n          var $title;\n\n          if (hasTitle) {\n            var titleProps = _extends(_extends({\n              prefixCls: \"\".concat(prefixCls, \"-title\")\n            }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n\n            $title = React.createElement(Title, titleProps);\n          } // Paragraph\n\n\n          var paragraphNode;\n\n          if (hasParagraph) {\n            var paragraphProps = _extends(_extends({\n              prefixCls: \"\".concat(prefixCls, \"-paragraph\")\n            }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n\n            paragraphNode = React.createElement(Paragraph, paragraphProps);\n          }\n\n          contentNode = React.createElement(\"div\", {\n            className: \"\".concat(prefixCls, \"-content\")\n          }, $title, paragraphNode);\n        }\n\n        var cls = classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-with-avatar\"), hasAvatar), _defineProperty(_classNames, \"\".concat(prefixCls, \"-active\"), active), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames));\n        return React.createElement(\"div\", {\n          className: cls\n        }, avatarNode, contentNode);\n      }\n\n      return children;\n    };\n\n    return _this;\n  }\n\n  _createClass(Skeleton, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderSkeleton);\n    }\n  }]);\n\n  return Skeleton;\n}(React.Component);\n\nSkeleton.defaultProps = {\n  avatar: false,\n  title: true,\n  paragraph: true\n};\nexport default Skeleton;","map":{"version":3,"sources":["skeleton/Skeleton.jsx"],"names":["prop","hasTitle","size","shape","width","hasAvatar","basicProps","Skeleton","React","Component","getPrefixCls","direction","customizePrefixCls","loading","className","children","avatar","title","paragraph","active","prefixCls","hasParagraph","avatarProps","getAvatarBasicProps","getComponentProps","avatarNode","titleProps","getTitleBasicProps","$title","paragraphProps","getParagraphBasicProps","paragraphNode","contentNode","cls","classNames"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nimport { ConfigConsumer } from '../config-provider';\nimport Element from './Element';\nfunction getComponentProps(prop) {\n    if (prop && typeof prop === 'object') {\n        return prop;\n    }\n    return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n    if (hasTitle && !hasParagraph) {\n        // Square avatar\n        return { size: 'large', shape: 'square' };\n    }\n    return { size: 'large', shape: 'circle' };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n    if (!hasAvatar && hasParagraph) {\n        return { width: '38%' };\n    }\n    if (hasAvatar && hasParagraph) {\n        return { width: '50%' };\n    }\n    return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n    const basicProps = {};\n    // Width\n    if (!hasAvatar || !hasTitle) {\n        basicProps.width = '61%';\n    }\n    // Rows\n    if (!hasAvatar && hasTitle) {\n        basicProps.rows = 3;\n    }\n    else {\n        basicProps.rows = 2;\n    }\n    return basicProps;\n}\nclass Skeleton extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderSkeleton = ({ getPrefixCls, direction }) => {\n            const { prefixCls: customizePrefixCls, loading, className, children, avatar, title, paragraph, active, } = this.props;\n            const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n            if (loading || !('loading' in this.props)) {\n                const hasAvatar = !!avatar;\n                const hasTitle = !!title;\n                const hasParagraph = !!paragraph;\n                // Avatar\n                let avatarNode;\n                if (hasAvatar) {\n                    const avatarProps = Object.assign(Object.assign({ prefixCls: `${prefixCls}-avatar` }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));\n                    // We direct use SkeletonElement as avatar in skeleton internal.\n                    avatarNode = (<div className={`${prefixCls}-header`}>\n            <Element {...avatarProps}/>\n          </div>);\n                }\n                let contentNode;\n                if (hasTitle || hasParagraph) {\n                    // Title\n                    let $title;\n                    if (hasTitle) {\n                        const titleProps = Object.assign(Object.assign({ prefixCls: `${prefixCls}-title` }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n                        $title = <Title {...titleProps}/>;\n                    }\n                    // Paragraph\n                    let paragraphNode;\n                    if (hasParagraph) {\n                        const paragraphProps = Object.assign(Object.assign({ prefixCls: `${prefixCls}-paragraph` }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n                        paragraphNode = <Paragraph {...paragraphProps}/>;\n                    }\n                    contentNode = (<div className={`${prefixCls}-content`}>\n            {$title}\n            {paragraphNode}\n          </div>);\n                }\n                const cls = classNames(prefixCls, className, {\n                    [`${prefixCls}-with-avatar`]: hasAvatar,\n                    [`${prefixCls}-active`]: active,\n                    [`${prefixCls}-rtl`]: direction === 'rtl',\n                });\n                return (<div className={cls}>\n          {avatarNode}\n          {contentNode}\n        </div>);\n            }\n            return children;\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderSkeleton}</ConfigConsumer>;\n    }\n}\nSkeleton.defaultProps = {\n    avatar: false,\n    title: true,\n    paragraph: true,\n};\nexport default Skeleton;\n"]},"metadata":{},"sourceType":"module"}