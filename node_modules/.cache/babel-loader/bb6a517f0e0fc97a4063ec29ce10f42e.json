{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport Statistic from './Statistic';\nimport { formatCountdown } from './utils';\nvar REFRESH_INTERVAL = 1000 / 30;\n\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\n\nvar Countdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Countdown, _React$Component);\n\n  function Countdown() {\n    var _this;\n\n    _classCallCheck(this, Countdown);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Countdown).apply(this, arguments));\n\n    _this.syncTimer = function () {\n      var value = _this.props.value;\n      var timestamp = getTime(value);\n\n      if (timestamp >= Date.now()) {\n        _this.startTimer();\n      } else {\n        _this.stopTimer();\n      }\n    };\n\n    _this.startTimer = function () {\n      if (_this.countdownId) return;\n      _this.countdownId = window.setInterval(function () {\n        _this.forceUpdate();\n      }, REFRESH_INTERVAL);\n    };\n\n    _this.stopTimer = function () {\n      var _this$props = _this.props,\n          onFinish = _this$props.onFinish,\n          value = _this$props.value;\n\n      if (_this.countdownId) {\n        clearInterval(_this.countdownId);\n        _this.countdownId = undefined;\n        var timestamp = getTime(value);\n\n        if (onFinish && timestamp < Date.now()) {\n          onFinish();\n        }\n      }\n    };\n\n    _this.formatCountdown = function (value, config) {\n      var format = _this.props.format;\n      return formatCountdown(value, _extends(_extends({}, config), {\n        format: format\n      }));\n    }; // Countdown do not need display the timestamp\n\n\n    _this.valueRender = function (node) {\n      return React.cloneElement(node, {\n        title: undefined\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Countdown, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.syncTimer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.syncTimer();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stopTimer();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Statistic, _extends({\n        valueRender: this.valueRender\n      }, this.props, {\n        formatter: this.formatCountdown\n      }));\n    }\n  }]);\n\n  return Countdown;\n}(React.Component);\n\nCountdown.defaultProps = {\n  format: 'HH:mm:ss'\n};\nexport default Countdown;","map":{"version":3,"sources":["statistic/Countdown.jsx"],"names":["REFRESH_INTERVAL","Countdown","React","Component","value","timestamp","getTime","Date","onFinish","clearInterval","format","formatCountdown","title","undefined","valueRender"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Statistic from './Statistic';\nimport { formatCountdown } from './utils';\nconst REFRESH_INTERVAL = 1000 / 30;\nfunction getTime(value) {\n    return new Date(value).getTime();\n}\nclass Countdown extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.syncTimer = () => {\n            const { value } = this.props;\n            const timestamp = getTime(value);\n            if (timestamp >= Date.now()) {\n                this.startTimer();\n            }\n            else {\n                this.stopTimer();\n            }\n        };\n        this.startTimer = () => {\n            if (this.countdownId)\n                return;\n            this.countdownId = window.setInterval(() => {\n                this.forceUpdate();\n            }, REFRESH_INTERVAL);\n        };\n        this.stopTimer = () => {\n            const { onFinish, value } = this.props;\n            if (this.countdownId) {\n                clearInterval(this.countdownId);\n                this.countdownId = undefined;\n                const timestamp = getTime(value);\n                if (onFinish && timestamp < Date.now()) {\n                    onFinish();\n                }\n            }\n        };\n        this.formatCountdown = (value, config) => {\n            const { format } = this.props;\n            return formatCountdown(value, Object.assign(Object.assign({}, config), { format }));\n        };\n        // Countdown do not need display the timestamp\n        this.valueRender = (node) => React.cloneElement(node, {\n            title: undefined,\n        });\n    }\n    componentDidMount() {\n        this.syncTimer();\n    }\n    componentDidUpdate() {\n        this.syncTimer();\n    }\n    componentWillUnmount() {\n        this.stopTimer();\n    }\n    render() {\n        return (<Statistic valueRender={this.valueRender} {...this.props} formatter={this.formatCountdown}/>);\n    }\n}\nCountdown.defaultProps = {\n    format: 'HH:mm:ss',\n};\nexport default Countdown;\n"]},"metadata":{},"sourceType":"module"}