{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar Record;\n\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {}));\n\nfunction traverseNodesKey(treeData, callback) {\n  function processNode(dataNode) {\n    var key = dataNode.key,\n        children = dataNode.children;\n\n    if (callback(key, dataNode) !== false) {\n      traverseNodesKey(children || [], callback);\n    }\n  }\n\n  treeData.forEach(processNode);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\n\nexport function calcRangeKeys(treeData, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(treeData, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n\n    return true;\n  });\n  return keys;\n}\nexport function convertDirectoryKeysToNodes(treeData, keys) {\n  var restKeys = _toConsumableArray(keys);\n\n  var nodes = [];\n  traverseNodesKey(treeData, function (key, node) {\n    var index = restKeys.indexOf(key);\n\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n\n    return !!restKeys.length;\n  });\n  return nodes;\n}","map":{"version":3,"sources":["tree/utils/dictUtil.js"],"names":["Record","key","children","dataNode","callback","traverseNodesKey","treeData","keys","record","startKey","matchKey","expandedKeys","restKeys","nodes","index"],"mappings":"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","sourcesContent":["var Record;\n(function (Record) {\n    Record[Record[\"None\"] = 0] = \"None\";\n    Record[Record[\"Start\"] = 1] = \"Start\";\n    Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {}));\nfunction traverseNodesKey(treeData, callback) {\n    function processNode(dataNode) {\n        const { key, children } = dataNode;\n        if (callback(key, dataNode) !== false) {\n            traverseNodesKey(children || [], callback);\n        }\n    }\n    treeData.forEach(processNode);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\nexport function calcRangeKeys(treeData, expandedKeys, startKey, endKey) {\n    const keys = [];\n    let record = Record.None;\n    if (startKey && startKey === endKey) {\n        return [startKey];\n    }\n    if (!startKey || !endKey) {\n        return [];\n    }\n    function matchKey(key) {\n        return key === startKey || key === endKey;\n    }\n    traverseNodesKey(treeData, (key) => {\n        if (record === Record.End) {\n            return false;\n        }\n        if (matchKey(key)) {\n            // Match test\n            keys.push(key);\n            if (record === Record.None) {\n                record = Record.Start;\n            }\n            else if (record === Record.Start) {\n                record = Record.End;\n                return false;\n            }\n        }\n        else if (record === Record.Start) {\n            // Append selection\n            keys.push(key);\n        }\n        if (expandedKeys.indexOf(key) === -1) {\n            return false;\n        }\n        return true;\n    });\n    return keys;\n}\nexport function convertDirectoryKeysToNodes(treeData, keys) {\n    const restKeys = [...keys];\n    const nodes = [];\n    traverseNodesKey(treeData, (key, node) => {\n        const index = restKeys.indexOf(key);\n        if (index !== -1) {\n            nodes.push(node);\n            restKeys.splice(index, 1);\n        }\n        return !!restKeys.length;\n    });\n    return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}