{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nfunction notEmpty(val) {\n  return val !== undefined && val !== null;\n}\n\nvar Cell = function Cell(_ref) {\n  var itemPrefixCls = _ref.itemPrefixCls,\n      component = _ref.component,\n      span = _ref.span,\n      className = _ref.className,\n      style = _ref.style,\n      bordered = _ref.bordered,\n      label = _ref.label,\n      content = _ref.content,\n      colon = _ref.colon;\n  var Component = component;\n\n  if (bordered) {\n    var _classNames;\n\n    return React.createElement(Component, {\n      className: classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(itemPrefixCls, \"-item-label\"), notEmpty(label)), _defineProperty(_classNames, \"\".concat(itemPrefixCls, \"-item-content\"), notEmpty(content)), _classNames), className),\n      style: style,\n      colSpan: span\n    }, notEmpty(label) ? label : content);\n  }\n\n  return React.createElement(Component, {\n    className: classNames(\"\".concat(itemPrefixCls, \"-item\"), className),\n    style: style,\n    colSpan: span\n  }, label && React.createElement(\"span\", {\n    className: classNames(\"\".concat(itemPrefixCls, \"-item-label\"), _defineProperty({}, \"\".concat(itemPrefixCls, \"-item-colon\"), colon))\n  }, label), content && React.createElement(\"span\", {\n    className: classNames(\"\".concat(itemPrefixCls, \"-item-content\"))\n  }, content));\n};\n\nexport default Cell;","map":{"version":3,"sources":["descriptions/Cell.jsx"],"names":["val","Cell","itemPrefixCls","component","span","className","style","bordered","label","content","colon","Component","classNames","notEmpty"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,UAAA,MAAA,YAAA;;AACA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACnB,SAAOA,GAAG,KAAHA,SAAAA,IAAqBA,GAAG,KAA/B,IAAA;AACH;;AACD,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAA,IAAA,EAA4F;AAAA,MAAzFC,aAAyF,GAAA,IAAA,CAAzFA,aAAyF;AAAA,MAA1EC,SAA0E,GAAA,IAAA,CAA1EA,SAA0E;AAAA,MAA/DC,IAA+D,GAAA,IAAA,CAA/DA,IAA+D;AAAA,MAAzDC,SAAyD,GAAA,IAAA,CAAzDA,SAAyD;AAAA,MAA9CC,KAA8C,GAAA,IAAA,CAA9CA,KAA8C;AAAA,MAAvCC,QAAuC,GAAA,IAAA,CAAvCA,QAAuC;AAAA,MAA7BC,KAA6B,GAAA,IAAA,CAA7BA,KAA6B;AAAA,MAAtBC,OAAsB,GAAA,IAAA,CAAtBA,OAAsB;AAAA,MAAbC,KAAa,GAAA,IAAA,CAAbA,KAAa;AACrG,MAAMC,SAAS,GAAf,SAAA;;AACA,MAAA,QAAA,EAAc;AAAA,QAAA,WAAA;;AACV,WAAQ,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,MAAA,SAAS,EAAEC,UAAU,EAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,aAAA,EAAA,aAAA,CAAA,EACHC,QAAQ,CADL,KACK,CADL,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,aAAA,EAAA,eAAA,CAAA,EAEDA,QAAQ,CAFP,OAEO,CAFP,CAAA,EAAA,WAAA,GAAhC,SAAgC,CAAhC;AAGO,MAAA,KAAK,EAHZ,KAAA;AAGqB,MAAA,OAAO,EAAET;AAH9B,KAAA,EAIPS,QAAQ,CAARA,KAAQ,CAARA,GAAAA,KAAAA,GAJD,OAAQ,CAAR;AAMH;;AACD,SAAQ,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,IAAA,SAAS,EAAED,UAAU,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,OAAA,CAAA,EAAhC,SAAgC,CAAhC;AAAsE,IAAA,KAAK,EAA3E,KAAA;AAAoF,IAAA,OAAO,EAAER;AAA7F,GAAA,EACLI,KAAK,IAAK,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAEI,UAAU,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,aAAA,CAAA,EAAA,eAAA,CAAA,EAAA,EAAA,GAAA,MAAA,CAAA,aAAA,EAAA,aAAA,CAAA,EAAA,KAAA,CAAA;AAA3B,GAAA,EADL,KACK,CADL,EAMLH,OAAO,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAEG,UAAU,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,eAAA,CAAA;AAA3B,GAAA,EANd,OAMc,CANN,CAAR;AAVJ,CAAA;;AAmBA,eAAA,IAAA","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nfunction notEmpty(val) {\n    return val !== undefined && val !== null;\n}\nconst Cell = ({ itemPrefixCls, component, span, className, style, bordered, label, content, colon, }) => {\n    const Component = component;\n    if (bordered) {\n        return (<Component className={classNames({\n            [`${itemPrefixCls}-item-label`]: notEmpty(label),\n            [`${itemPrefixCls}-item-content`]: notEmpty(content),\n        }, className)} style={style} colSpan={span}>\n        {notEmpty(label) ? label : content}\n      </Component>);\n    }\n    return (<Component className={classNames(`${itemPrefixCls}-item`, className)} style={style} colSpan={span}>\n      {label && (<span className={classNames(`${itemPrefixCls}-item-label`, {\n        [`${itemPrefixCls}-item-colon`]: colon,\n    })}>\n          {label}\n        </span>)}\n      {content && <span className={classNames(`${itemPrefixCls}-item-content`)}>{content}</span>}\n    </Component>);\n};\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}