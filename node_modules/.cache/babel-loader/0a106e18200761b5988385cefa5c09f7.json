{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport { getCellFixedInfo } from '../utils/fixUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      stickyOffsets = props.stickyOffsets,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      getRowKey = props.getRowKey,\n      rowExpandable = props.rowExpandable,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = props.expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]); // Move to Body to enhance performance\n\n  var fixedInfoList = flattenColumns.map(function (column, colIndex) {\n    return getCellFixedInfo(colIndex, colIndex, flattenColumns, stickyOffsets);\n  });\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName in record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    if (additionalProps && additionalProps.onClick) {\n      var _additionalProps;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\n    }\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = React.createElement(RowComponent, Object.assign({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread({}, style, {}, additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return React.createElement(Cell, Object.assign({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  } // ========================= Nest Row ==========================\n\n\n  var nestRowNode;\n\n  if (hasNestChildren && expanded) {\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\n      var subKey = getRowKey(subRecord, subIndex);\n      return React.createElement(BodyRow, Object.assign({}, props, {\n        key: subKey,\n        record: subRecord,\n        recordKey: subKey,\n        index: subIndex,\n        indent: indent + 1\n      }));\n    });\n  }\n\n  return React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;","map":{"version":3,"sources":["/Users/nancyou/Desktop/nasa/node_modules/rc-table/es/Body/BodyRow.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","err","Array","isArray","React","classNames","Cell","TableContext","BodyContext","getColumnsKey","getCellFixedInfo","ExpandedRow","BodyRow","props","className","style","stickyOffsets","record","index","rowKey","getRowKey","rowExpandable","onRow","_props$indent","indent","RowComponent","rowComponent","cellComponent","childrenColumnName","_React$useContext","useContext","prefixCls","_React$useContext2","fixHeader","fixColumn","componentWidth","flattenColumns","expandableType","expandRowByClick","onTriggerExpand","rowClassName","expandedRowClassName","indentSize","expandIcon","expandedRowRender","expandIconColumnIndex","_React$useState","useState","_React$useState2","expandRended","setExpandRended","expanded","expandedKeys","has","recordKey","useEffect","fixedInfoList","map","column","colIndex","rowSupportExpand","nestExpandable","hasNestChildren","mergedExpandable","additionalProps","onClick","event","_additionalProps","_len","args","_key","concat","computeRowClassName","columnsKey","baseRowNode","createElement","assign","render","dataIndex","columnClassName","fixedInfo","appendCellNode","Fragment","paddingLeft","expandable","onExpand","additionalCellProps","onCell","ellipsis","align","component","appendNode","expandRowNode","expandContent","computedExpandedRowClassName","colSpan","nestRowNode","subRecord","subIndex","subKey","displayName"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport { getCellFixedInfo } from '../utils/fixUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      stickyOffsets = props.stickyOffsets,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      getRowKey = props.getRowKey,\n      rowExpandable = props.rowExpandable,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = props.expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]); // Move to Body to enhance performance\n\n  var fixedInfoList = flattenColumns.map(function (column, colIndex) {\n    return getCellFixedInfo(colIndex, colIndex, flattenColumns, stickyOffsets);\n  });\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName in record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    if (additionalProps && additionalProps.onClick) {\n      var _additionalProps;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\n    }\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = React.createElement(RowComponent, Object.assign({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread({}, style, {}, additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return React.createElement(Cell, Object.assign({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  } // ========================= Nest Row ==========================\n\n\n  var nestRowNode;\n\n  if (hasNestChildren && expanded) {\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\n      var subKey = getRowKey(subRecord, subIndex);\n      return React.createElement(BodyRow, Object.assign({}, props, {\n        key: subKey,\n        record: subRecord,\n        recordKey: subKey,\n        index: subIndex,\n        indent: indent + 1\n      }));\n    });\n  }\n\n  return React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;"]},"metadata":{},"sourceType":"module"}