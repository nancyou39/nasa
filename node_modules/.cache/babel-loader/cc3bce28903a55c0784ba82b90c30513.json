{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport * as React from 'react';\nimport ConfirmDialog from '../ConfirmDialog';\nimport defaultLocale from '../../locale/default';\nimport LocaleReceiver from '../../locale-provider/LocaleReceiver';\n\nvar HookModal = function HookModal(_ref, ref) {\n  var afterClose = _ref.afterClose,\n      config = _ref.config;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState(config),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      innerConfig = _React$useState4[0],\n      setInnerConfig = _React$useState4[1];\n\n  function close() {\n    setVisible(false);\n  }\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      destroy: close,\n      update: function update(newConfig) {\n        setInnerConfig(function (originConfig) {\n          return _extends(_extends({}, originConfig), newConfig);\n        });\n      }\n    };\n  });\n  return React.createElement(LocaleReceiver, {\n    componentName: \"Modal\",\n    defaultLocale: defaultLocale.Modal\n  }, function (modalLocale) {\n    return React.createElement(ConfirmDialog, _extends({}, innerConfig, {\n      close: close,\n      visible: visible,\n      afterClose: afterClose,\n      okText: innerConfig.okText || (innerConfig.okCancel ? modalLocale.okText : modalLocale.justOkText),\n      cancelText: innerConfig.cancelText || modalLocale.cancelText\n    }));\n  });\n};\n\nexport default React.forwardRef(HookModal);","map":{"version":3,"sources":["modal/useModal/HookModal.jsx"],"names":["HookModal","afterClose","config","visible","setVisible","React","innerConfig","setInnerConfig","destroy","update","defaultLocale","Modal","modalLocale","cancelText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,aAAA,MAAA,sBAAA;AACA,OAAA,cAAA,MAAA,sCAAA;;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAA,IAAA,EAAA,GAAA,EAAiC;AAAA,MAA9BC,UAA8B,GAAA,IAAA,CAA9BA,UAA8B;AAAA,MAAlBC,MAAkB,GAAA,IAAA,CAAlBA,MAAkB;;AAAA,MAAA,eAAA,GACjBG,KAAK,CAALA,QAAAA,CADiB,IACjBA,CADiB;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MACxCF,OADwC,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAC/BC,UAD+B,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,gBAAA,GAETC,KAAK,CAALA,QAAAA,CAFS,MAETA,CAFS;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,gBAAA,EAAA,CAAA,CAAA;AAAA,MAExCC,WAFwC,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAE3BC,cAF2B,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAG/C,WAAA,KAAA,GAAiB;AACbH,IAAAA,UAAU,CAAVA,KAAU,CAAVA;AACH;;AACDC,EAAAA,KAAK,CAALA,mBAAAA,CAAAA,GAAAA,EAA+B,YAAA;AAAA,WAAO;AAClCG,MAAAA,OAAO,EAD2B,KAAA;AAElCC,MAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,SAAA,EAAe;AACnBF,QAAAA,cAAc,CAAC,UAAA,YAAA,EAAY;AAAA,iBAAK,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,YAAc,CAAd,EAAL,SAAK,CAAL;AAA3BA,SAAc,CAAdA;AACH;AAJiC,KAAP;AAA/BF,GAAAA;AAMA,SAAQ,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AAAgB,IAAA,aAAa,EAA7B,OAAA;AAAsC,IAAA,aAAa,EAAEK,aAAa,CAACC;AAAnE,GAAA,EACL,UAAA,WAAA,EAAA;AAAA,WAAkB,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,WAAA,EAAA;AAAgC,MAAA,KAAK,EAArC,KAAA;AAA8C,MAAA,OAAO,EAArD,OAAA;AAAgE,MAAA,UAAU,EAA1E,UAAA;AAAwF,MAAA,MAAM,EAAEL,WAAW,CAAXA,MAAAA,KAChHA,WAAW,CAAXA,QAAAA,GAAuBM,WAAW,CAAlCN,MAAAA,GAA4CM,WAAW,CADvC,UAAgGN,CAAhG;AACqD,MAAA,UAAU,EAAEA,WAAW,CAAXA,UAAAA,IAA0BM,WAAW,CAACC;AADvG,KAAA,CAAA,CAAlB;AADH,GAAQ,CAAR;AAZJ,CAAA;;AAiBA,eAAeR,KAAK,CAALA,UAAAA,CAAf,SAAeA,CAAf","sourcesContent":["import * as React from 'react';\nimport ConfirmDialog from '../ConfirmDialog';\nimport defaultLocale from '../../locale/default';\nimport LocaleReceiver from '../../locale-provider/LocaleReceiver';\nconst HookModal = ({ afterClose, config }, ref) => {\n    const [visible, setVisible] = React.useState(true);\n    const [innerConfig, setInnerConfig] = React.useState(config);\n    function close() {\n        setVisible(false);\n    }\n    React.useImperativeHandle(ref, () => ({\n        destroy: close,\n        update: (newConfig) => {\n            setInnerConfig(originConfig => (Object.assign(Object.assign({}, originConfig), newConfig)));\n        },\n    }));\n    return (<LocaleReceiver componentName=\"Modal\" defaultLocale={defaultLocale.Modal}>\n      {(modalLocale) => (<ConfirmDialog {...innerConfig} close={close} visible={visible} afterClose={afterClose} okText={innerConfig.okText ||\n        (innerConfig.okCancel ? modalLocale.okText : modalLocale.justOkText)} cancelText={innerConfig.cancelText || modalLocale.cancelText}/>)}\n    </LocaleReceiver>);\n};\nexport default React.forwardRef(HookModal);\n"]},"metadata":{},"sourceType":"module"}