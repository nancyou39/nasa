{"ast":null,"code":"import warning from \"rc-util/es/warning\";\n\nfunction removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {\n  var filteredKeys = new Set();\n  halfCheckedKeys.forEach(function (key) {\n    if (!checkedKeys.has(key)) {\n      filteredKeys.add(key);\n    }\n  });\n  return filteredKeys;\n}\n\nexport function isCheckDisabled(node) {\n  var _ref = node || {},\n      disabled = _ref.disabled,\n      disableCheckbox = _ref.disableCheckbox,\n      checkable = _ref.checkable;\n\n  return !!(disabled || disableCheckbox) || checkable === false;\n} // Fill miss keys\n\nfunction fillConductCheck(keys, levelEntities, maxLevel) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set(); // Add checked keys top to bottom\n\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n          node = entity.node,\n          _entity$children = entity.children,\n          children = _entity$children === void 0 ? [] : _entity$children;\n\n      if (checkedKeys.has(key) && !isCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !isCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.add(childEntity.key);\n        });\n      }\n    });\n  } // Add checked keys from bottom to top\n\n\n  var visitedKeys = new Set();\n\n  for (var _level = maxLevel; _level >= 0; _level -= 1) {\n    var _entities = levelEntities.get(_level) || new Set();\n\n    _entities.forEach(function (entity) {\n      var parent = entity.parent,\n          node = entity.node; // Skip if no need to check\n\n      if (isCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      } // Skip if parent is disabled\n\n\n      if (isCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !isCheckDisabled(childEntity.node);\n      }).forEach(function (_ref2) {\n        var key = _ref2.key;\n        var checked = checkedKeys.has(key);\n\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n\n      if (allChecked) {\n        checkedKeys.add(parent.key);\n      }\n\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n} // Remove useless key\n\n\nfunction cleanConductCheck(keys, halfKeys, levelEntities, maxLevel) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set(halfKeys); // Remove checked keys from top to bottom\n\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n          node = entity.node,\n          _entity$children2 = entity.children,\n          children = _entity$children2 === void 0 ? [] : _entity$children2;\n\n      if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !isCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !isCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.delete(childEntity.key);\n        });\n      }\n    });\n  } // Remove checked keys form bottom to top\n\n\n  var visitedKeys = new Set();\n\n  for (var _level2 = maxLevel; _level2 >= 0; _level2 -= 1) {\n    var _entities2 = levelEntities.get(_level2) || new Set();\n\n    _entities2.forEach(function (entity) {\n      var parent = entity.parent,\n          node = entity.node; // Skip if no need to check\n\n      if (isCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      } // Skip if parent is disabled\n\n\n      if (isCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !isCheckDisabled(childEntity.node);\n      }).forEach(function (_ref3) {\n        var key = _ref3.key;\n        var checked = checkedKeys.has(key);\n\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n\n      if (!allChecked) {\n        checkedKeys.delete(parent.key);\n      }\n\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n}\n/**\n * Conduct with keys.\n * @param keyList current key list\n * @param keyEntities key - dataEntity map\n * @param mode `fill` to fill missing key, `clean` to remove useless key\n */\n\n\nexport function conductCheck(keyList, checked, keyEntities) {\n  var warningMissKeys = []; // We only handle exist keys\n\n  var keys = new Set(keyList.filter(function (key) {\n    var hasEntity = !!keyEntities[key];\n\n    if (!hasEntity) {\n      warningMissKeys.push(key);\n    }\n\n    return hasEntity;\n  }));\n  var levelEntities = new Map();\n  var maxLevel = 0; // Convert entities by level for calculation\n\n  Object.keys(keyEntities).forEach(function (key) {\n    var entity = keyEntities[key];\n    var level = entity.level;\n    var levelSet = levelEntities.get(level);\n\n    if (!levelSet) {\n      levelSet = new Set();\n      levelEntities.set(level, levelSet);\n    }\n\n    levelSet.add(entity);\n    maxLevel = Math.max(maxLevel, level);\n  });\n  warning(!warningMissKeys.length, \"Tree missing follow keys: \".concat(warningMissKeys.slice(0, 100).map(function (key) {\n    return \"'\".concat(key, \"'\");\n  }).join(', ')));\n  var result;\n\n  if (checked === true) {\n    result = fillConductCheck(keys, levelEntities, maxLevel);\n  } else {\n    result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/nancyou/Desktop/nasa/node_modules/rc-tree/es/utils/conductUtil.js"],"names":["warning","removeFromCheckedKeys","halfCheckedKeys","checkedKeys","filteredKeys","Set","forEach","key","has","add","isCheckDisabled","node","_ref","disabled","disableCheckbox","checkable","fillConductCheck","keys","levelEntities","maxLevel","level","entities","get","entity","_entity$children","children","filter","childEntity","visitedKeys","_level","_entities","parent","allChecked","partialChecked","_ref2","checked","Array","from","cleanConductCheck","halfKeys","_entity$children2","delete","_level2","_entities2","_ref3","conductCheck","keyList","keyEntities","warningMissKeys","hasEntity","push","Map","Object","levelSet","set","Math","max","length","concat","slice","map","join","result"],"mappings":"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","sourcesContent":["import warning from \"rc-util/es/warning\";\n\nfunction removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {\n  var filteredKeys = new Set();\n  halfCheckedKeys.forEach(function (key) {\n    if (!checkedKeys.has(key)) {\n      filteredKeys.add(key);\n    }\n  });\n  return filteredKeys;\n}\n\nexport function isCheckDisabled(node) {\n  var _ref = node || {},\n      disabled = _ref.disabled,\n      disableCheckbox = _ref.disableCheckbox,\n      checkable = _ref.checkable;\n\n  return !!(disabled || disableCheckbox) || checkable === false;\n} // Fill miss keys\n\nfunction fillConductCheck(keys, levelEntities, maxLevel) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set(); // Add checked keys top to bottom\n\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n          node = entity.node,\n          _entity$children = entity.children,\n          children = _entity$children === void 0 ? [] : _entity$children;\n\n      if (checkedKeys.has(key) && !isCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !isCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.add(childEntity.key);\n        });\n      }\n    });\n  } // Add checked keys from bottom to top\n\n\n  var visitedKeys = new Set();\n\n  for (var _level = maxLevel; _level >= 0; _level -= 1) {\n    var _entities = levelEntities.get(_level) || new Set();\n\n    _entities.forEach(function (entity) {\n      var parent = entity.parent,\n          node = entity.node; // Skip if no need to check\n\n      if (isCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      } // Skip if parent is disabled\n\n\n      if (isCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !isCheckDisabled(childEntity.node);\n      }).forEach(function (_ref2) {\n        var key = _ref2.key;\n        var checked = checkedKeys.has(key);\n\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n\n      if (allChecked) {\n        checkedKeys.add(parent.key);\n      }\n\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n} // Remove useless key\n\n\nfunction cleanConductCheck(keys, halfKeys, levelEntities, maxLevel) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set(halfKeys); // Remove checked keys from top to bottom\n\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n          node = entity.node,\n          _entity$children2 = entity.children,\n          children = _entity$children2 === void 0 ? [] : _entity$children2;\n\n      if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !isCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !isCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.delete(childEntity.key);\n        });\n      }\n    });\n  } // Remove checked keys form bottom to top\n\n\n  var visitedKeys = new Set();\n\n  for (var _level2 = maxLevel; _level2 >= 0; _level2 -= 1) {\n    var _entities2 = levelEntities.get(_level2) || new Set();\n\n    _entities2.forEach(function (entity) {\n      var parent = entity.parent,\n          node = entity.node; // Skip if no need to check\n\n      if (isCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      } // Skip if parent is disabled\n\n\n      if (isCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !isCheckDisabled(childEntity.node);\n      }).forEach(function (_ref3) {\n        var key = _ref3.key;\n        var checked = checkedKeys.has(key);\n\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n\n      if (!allChecked) {\n        checkedKeys.delete(parent.key);\n      }\n\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n}\n/**\n * Conduct with keys.\n * @param keyList current key list\n * @param keyEntities key - dataEntity map\n * @param mode `fill` to fill missing key, `clean` to remove useless key\n */\n\n\nexport function conductCheck(keyList, checked, keyEntities) {\n  var warningMissKeys = []; // We only handle exist keys\n\n  var keys = new Set(keyList.filter(function (key) {\n    var hasEntity = !!keyEntities[key];\n\n    if (!hasEntity) {\n      warningMissKeys.push(key);\n    }\n\n    return hasEntity;\n  }));\n  var levelEntities = new Map();\n  var maxLevel = 0; // Convert entities by level for calculation\n\n  Object.keys(keyEntities).forEach(function (key) {\n    var entity = keyEntities[key];\n    var level = entity.level;\n    var levelSet = levelEntities.get(level);\n\n    if (!levelSet) {\n      levelSet = new Set();\n      levelEntities.set(level, levelSet);\n    }\n\n    levelSet.add(entity);\n    maxLevel = Math.max(maxLevel, level);\n  });\n  warning(!warningMissKeys.length, \"Tree missing follow keys: \".concat(warningMissKeys.slice(0, 100).map(function (key) {\n    return \"'\".concat(key, \"'\");\n  }).join(', ')));\n  var result;\n\n  if (checked === true) {\n    result = fillConductCheck(keys, levelEntities, maxLevel);\n  } else {\n    result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel);\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}