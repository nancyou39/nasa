{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport defaultLocaleData from './default';\n\nvar LocaleReceiver =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LocaleReceiver, _React$Component);\n\n  function LocaleReceiver() {\n    _classCallCheck(this, LocaleReceiver);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LocaleReceiver).apply(this, arguments));\n  }\n\n  _createClass(LocaleReceiver, [{\n    key: \"getLocale\",\n    value: function getLocale() {\n      var _this$props = this.props,\n          componentName = _this$props.componentName,\n          defaultLocale = _this$props.defaultLocale;\n      var locale = defaultLocale || defaultLocaleData[componentName || 'global'];\n      var antLocale = this.context.antLocale;\n      var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};\n      return _extends(_extends({}, typeof locale === 'function' ? locale() : locale), localeFromContext || {});\n    }\n  }, {\n    key: \"getLocaleCode\",\n    value: function getLocaleCode() {\n      var antLocale = this.context.antLocale;\n      var localeCode = antLocale && antLocale.locale; // Had use LocaleProvide but didn't set locale\n\n      if (antLocale && antLocale.exist && !localeCode) {\n        return defaultLocaleData.locale;\n      }\n\n      return localeCode;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children(this.getLocale(), this.getLocaleCode(), this.context.antLocale);\n    }\n  }]);\n\n  return LocaleReceiver;\n}(React.Component);\n\nexport { LocaleReceiver as default };\nLocaleReceiver.defaultProps = {\n  componentName: 'global'\n};\nLocaleReceiver.contextTypes = {\n  antLocale: PropTypes.object\n};","map":{"version":3,"sources":["locale-provider/LocaleReceiver.jsx"],"names":["LocaleReceiver","React","Component","componentName","defaultLocale","locale","defaultLocaleData","antLocale","localeFromContext","localeCode","PropTypes","object"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAA,iBAAA,MAAA,WAAA;;IACqBA,c;;;;;;;;;;;;;gCACL;AAAA,UAAA,WAAA,GACiC,KADjC,KAAA;AAAA,UACAG,aADA,GAAA,WAAA,CAAA,aAAA;AAAA,UACeC,aADf,GAAA,WAAA,CAAA,aAAA;AAER,UAAMC,MAAM,GAAGD,aAAa,IAAIE,iBAAiB,CAACH,aAAa,IAA/D,QAAiD,CAAjD;AAFQ,UAGAI,SAHA,GAGc,KAHd,OAGc,CAHd,SAAA;AAIR,UAAMC,iBAAiB,GAAGL,aAAa,IAAbA,SAAAA,GAA6BI,SAAS,CAAtCJ,aAAsC,CAAtCA,GAA1B,EAAA;AACA,aAAO,QAAA,CAAc,QAAA,CAAA,EAAA,EAAmB,OAAA,MAAA,KAAA,UAAA,GAA+BE,MAA/B,EAAA,GAAjC,MAAc,CAAd,EAAsFG,iBAAiB,IAA9G,EAAO,CAAP;AACH;;;oCACe;AAAA,UACJD,SADI,GACU,KADV,OACU,CADV,SAAA;AAEZ,UAAME,UAAU,GAAGF,SAAS,IAAIA,SAAS,CAF7B,MAEZ,CAFY,CAGZ;;AACA,UAAIA,SAAS,IAAIA,SAAS,CAAtBA,KAAAA,IAAgC,CAApC,UAAA,EAAiD;AAC7C,eAAOD,iBAAiB,CAAxB,MAAA;AACH;;AACD,aAAA,UAAA;AACH;;;6BACQ;AACL,aAAO,KAAA,KAAA,CAAA,QAAA,CAAoB,KAApB,SAAoB,EAApB,EAAsC,KAAtC,aAAsC,EAAtC,EAA4D,KAAA,OAAA,CAAnE,SAAO,CAAP;AACH;;;;EAnBuCL,KAAK,CAACC,S;;SAA7BF,c;AAqBrBA,cAAc,CAAdA,YAAAA,GAA8B;AAC1BG,EAAAA,aAAa,EAAE;AADW,CAA9BH;AAGAA,cAAc,CAAdA,YAAAA,GAA8B;AAC1BO,EAAAA,SAAS,EAAEG,SAAS,CAACC;AADK,CAA9BX","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport defaultLocaleData from './default';\nexport default class LocaleReceiver extends React.Component {\n    getLocale() {\n        const { componentName, defaultLocale } = this.props;\n        const locale = defaultLocale || defaultLocaleData[componentName || 'global'];\n        const { antLocale } = this.context;\n        const localeFromContext = componentName && antLocale ? antLocale[componentName] : {};\n        return Object.assign(Object.assign({}, (typeof locale === 'function' ? locale() : locale)), (localeFromContext || {}));\n    }\n    getLocaleCode() {\n        const { antLocale } = this.context;\n        const localeCode = antLocale && antLocale.locale;\n        // Had use LocaleProvide but didn't set locale\n        if (antLocale && antLocale.exist && !localeCode) {\n            return defaultLocaleData.locale;\n        }\n        return localeCode;\n    }\n    render() {\n        return this.props.children(this.getLocale(), this.getLocaleCode(), this.context.antLocale);\n    }\n}\nLocaleReceiver.defaultProps = {\n    componentName: 'global',\n};\nLocaleReceiver.contextTypes = {\n    antLocale: PropTypes.object,\n};\n"]},"metadata":{},"sourceType":"module"}