{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport { convertChildrenToData } from '../utils/legacyUtil';\nvar MAX_WARNING_TIMES = 10;\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Format `treeData` with `value` & `key` which is used for calculation\n */\n\n\nfunction formatTreeData(treeData, getLabelProp) {\n  var warningTimes = 0;\n  var valueSet = new Set();\n\n  function dig(dataNodes) {\n    return (dataNodes || []).map(function (node) {\n      var key = node.key,\n          value = node.value,\n          children = node.children,\n          rest = _objectWithoutProperties(node, [\"key\", \"value\", \"children\"]);\n\n      var mergedValue = 'value' in node ? value : key;\n\n      var dataNode = _objectSpread({}, rest, {\n        key: key !== null && key !== undefined ? key : mergedValue,\n        value: mergedValue,\n        title: getLabelProp(node)\n      }); // Check `key` & `value` and warning user\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (key !== null && key !== undefined && value !== undefined && String(key) !== String(value) && warningTimes < MAX_WARNING_TIMES) {\n          warningTimes += 1;\n          warning(false, \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(value, \".\"));\n        }\n\n        warning(!valueSet.has(value), \"Same `value` exist in the tree: \".concat(value));\n        valueSet.add(value);\n      }\n\n      if ('children' in node) {\n        dataNode.children = dig(children);\n      }\n\n      return dataNode;\n    });\n  }\n\n  return dig(treeData);\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, _ref2) {\n  var getLabelProp = _ref2.getLabelProp,\n      simpleMode = _ref2.simpleMode;\n  var cacheRef = React.useRef({});\n\n  if (treeData) {\n    cacheRef.current.formatTreeData = cacheRef.current.treeData === treeData ? cacheRef.current.formatTreeData : formatTreeData(simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n      id: 'id',\n      pId: 'pId',\n      rootPId: null\n    }, simpleMode !== true ? simpleMode : {})) : treeData, getLabelProp);\n    cacheRef.current.treeData = treeData;\n  } else {\n    cacheRef.current.formatTreeData = cacheRef.current.children === children ? cacheRef.current.formatTreeData : formatTreeData(convertChildrenToData(children), getLabelProp);\n  }\n\n  return cacheRef.current.formatTreeData;\n}","map":{"version":3,"sources":["/Users/nancyou/Desktop/nasa/node_modules/rc-tree-select/es/hooks/useTreeData.js"],"names":["_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","React","warning","convertChildrenToData","MAX_WARNING_TIMES","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","map","node","clone","parentKey","parent","children","formatTreeData","getLabelProp","warningTimes","valueSet","Set","dig","dataNodes","rest","mergedValue","dataNode","undefined","title","process","env","NODE_ENV","String","concat","has","add","useTreeData","_ref2","simpleMode","cacheRef","useRef","current"],"mappings":"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","sourcesContent":["function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport { convertChildrenToData } from '../utils/legacyUtil';\nvar MAX_WARNING_TIMES = 10;\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Format `treeData` with `value` & `key` which is used for calculation\n */\n\n\nfunction formatTreeData(treeData, getLabelProp) {\n  var warningTimes = 0;\n  var valueSet = new Set();\n\n  function dig(dataNodes) {\n    return (dataNodes || []).map(function (node) {\n      var key = node.key,\n          value = node.value,\n          children = node.children,\n          rest = _objectWithoutProperties(node, [\"key\", \"value\", \"children\"]);\n\n      var mergedValue = 'value' in node ? value : key;\n\n      var dataNode = _objectSpread({}, rest, {\n        key: key !== null && key !== undefined ? key : mergedValue,\n        value: mergedValue,\n        title: getLabelProp(node)\n      }); // Check `key` & `value` and warning user\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (key !== null && key !== undefined && value !== undefined && String(key) !== String(value) && warningTimes < MAX_WARNING_TIMES) {\n          warningTimes += 1;\n          warning(false, \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(value, \".\"));\n        }\n\n        warning(!valueSet.has(value), \"Same `value` exist in the tree: \".concat(value));\n        valueSet.add(value);\n      }\n\n      if ('children' in node) {\n        dataNode.children = dig(children);\n      }\n\n      return dataNode;\n    });\n  }\n\n  return dig(treeData);\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, _ref2) {\n  var getLabelProp = _ref2.getLabelProp,\n      simpleMode = _ref2.simpleMode;\n  var cacheRef = React.useRef({});\n\n  if (treeData) {\n    cacheRef.current.formatTreeData = cacheRef.current.treeData === treeData ? cacheRef.current.formatTreeData : formatTreeData(simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n      id: 'id',\n      pId: 'pId',\n      rootPId: null\n    }, simpleMode !== true ? simpleMode : {})) : treeData, getLabelProp);\n    cacheRef.current.treeData = treeData;\n  } else {\n    cacheRef.current.formatTreeData = cacheRef.current.children === children ? cacheRef.current.formatTreeData : formatTreeData(convertChildrenToData(children), getLabelProp);\n  }\n\n  return cacheRef.current.formatTreeData;\n}"]},"metadata":{},"sourceType":"module"}