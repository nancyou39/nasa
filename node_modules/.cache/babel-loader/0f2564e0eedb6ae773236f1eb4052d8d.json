{"ast":null,"code":"import * as React from 'react';\nimport Cell from './Cell';\n\nfunction renderCells(items, _ref, _ref2) {\n  var colon = _ref.colon,\n      prefixCls = _ref.prefixCls,\n      bordered = _ref.bordered;\n  var component = _ref2.component,\n      type = _ref2.type,\n      showLabel = _ref2.showLabel,\n      showContent = _ref2.showContent;\n  return items.map(function (_ref3, index) {\n    var _ref3$props = _ref3.props,\n        label = _ref3$props.label,\n        children = _ref3$props.children,\n        _ref3$props$prefixCls = _ref3$props.prefixCls,\n        itemPrefixCls = _ref3$props$prefixCls === void 0 ? prefixCls : _ref3$props$prefixCls,\n        className = _ref3$props.className,\n        style = _ref3$props.style,\n        _ref3$props$span = _ref3$props.span,\n        span = _ref3$props$span === void 0 ? 1 : _ref3$props$span,\n        key = _ref3.key;\n\n    if (typeof component === 'string') {\n      return React.createElement(Cell, {\n        key: \"\".concat(type, \"-\").concat(key || index),\n        className: className,\n        style: style,\n        span: span,\n        colon: colon,\n        component: component,\n        itemPrefixCls: itemPrefixCls,\n        bordered: bordered,\n        label: showLabel ? label : null,\n        content: showContent ? children : null\n      });\n    }\n\n    return [React.createElement(Cell, {\n      key: \"label-\".concat(key || index),\n      className: className,\n      style: style,\n      span: 1,\n      colon: colon,\n      component: component[0],\n      itemPrefixCls: itemPrefixCls,\n      bordered: bordered,\n      label: label\n    }), React.createElement(Cell, {\n      key: \"content-\".concat(key || index),\n      className: className,\n      style: style,\n      span: span * 2 - 1,\n      component: component[1],\n      itemPrefixCls: itemPrefixCls,\n      bordered: bordered,\n      content: children\n    })];\n  });\n}\n\nvar Row = function Row(props) {\n  var prefixCls = props.prefixCls,\n      vertical = props.vertical,\n      row = props.row,\n      index = props.index,\n      bordered = props.bordered;\n\n  if (vertical) {\n    return React.createElement(React.Fragment, null, React.createElement(\"tr\", {\n      key: \"label-\".concat(index),\n      className: \"\".concat(prefixCls, \"-row\")\n    }, renderCells(row, props, {\n      component: 'th',\n      type: 'label',\n      showLabel: true\n    })), React.createElement(\"tr\", {\n      key: \"content-\".concat(index),\n      className: \"\".concat(prefixCls, \"-row\")\n    }, renderCells(row, props, {\n      component: 'td',\n      type: 'content',\n      showContent: true\n    })));\n  }\n\n  return React.createElement(\"tr\", {\n    key: index,\n    className: \"\".concat(prefixCls, \"-row\")\n  }, renderCells(row, props, {\n    component: bordered ? ['th', 'td'] : 'td',\n    type: 'item',\n    showLabel: true,\n    showContent: true\n  }));\n};\n\nexport default Row;","map":{"version":3,"sources":["descriptions/Row.jsx"],"names":["colon","prefixCls","bordered","component","type","showLabel","showContent","props","label","children","itemPrefixCls","className","style","span","key","Row","vertical","row","index","renderCells"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Cell from './Cell';\nfunction renderCells(items, { colon, prefixCls, bordered }, { component, type, showLabel, showContent }) {\n    return items.map(({ props: { label, children, prefixCls: itemPrefixCls = prefixCls, className, style, span = 1, }, key, }, index) => {\n        if (typeof component === 'string') {\n            return (<Cell key={`${type}-${key || index}`} className={className} style={style} span={span} colon={colon} component={component} itemPrefixCls={itemPrefixCls} bordered={bordered} label={showLabel ? label : null} content={showContent ? children : null}/>);\n        }\n        return [\n            <Cell key={`label-${key || index}`} className={className} style={style} span={1} colon={colon} component={component[0]} itemPrefixCls={itemPrefixCls} bordered={bordered} label={label}/>,\n            <Cell key={`content-${key || index}`} className={className} style={style} span={span * 2 - 1} component={component[1]} itemPrefixCls={itemPrefixCls} bordered={bordered} content={children}/>,\n        ];\n    });\n}\nconst Row = props => {\n    const { prefixCls, vertical, row, index, bordered } = props;\n    if (vertical) {\n        return (<>\n        <tr key={`label-${index}`} className={`${prefixCls}-row`}>\n          {renderCells(row, props, { component: 'th', type: 'label', showLabel: true })}\n        </tr>\n        <tr key={`content-${index}`} className={`${prefixCls}-row`}>\n          {renderCells(row, props, {\n            component: 'td',\n            type: 'content',\n            showContent: true,\n        })}\n        </tr>\n      </>);\n    }\n    return (<tr key={index} className={`${prefixCls}-row`}>\n      {renderCells(row, props, {\n        component: bordered ? ['th', 'td'] : 'td',\n        type: 'item',\n        showLabel: true,\n        showContent: true,\n    })}\n    </tr>);\n};\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}