{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* eslint-disable react/button-has-type */\n\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport omit from 'omit.js';\nimport { ConfigContext } from '../config-provider';\nimport Wave from '../_util/wave';\nimport { tuple } from '../_util/type';\nimport warning from '../_util/warning';\nimport SizeContext from '../config-provider/SizeContext';\nvar rxTwoCNChar = /^[\\u4e00-\\u9fa5]{2}$/;\nvar isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);\n\nfunction isString(str) {\n  return typeof str === 'string';\n} // Insert one space between two chinese characters automatically.\n\n\nfunction insertSpace(child, needInserted) {\n  // Check the child if is undefined or null.\n  if (child == null) {\n    return;\n  }\n\n  var SPACE = needInserted ? ' ' : ''; // strictNullChecks oops.\n\n  if (typeof child !== 'string' && typeof child !== 'number' && isString(child.type) && isTwoCNChar(child.props.children)) {\n    return React.cloneElement(child, {}, child.props.children.split('').join(SPACE));\n  }\n\n  if (typeof child === 'string') {\n    if (isTwoCNChar(child)) {\n      child = child.split('').join(SPACE);\n    }\n\n    return React.createElement(\"span\", null, child);\n  }\n\n  return child;\n}\n\nfunction spaceChildren(children, needInserted) {\n  var isPrevChildPure = false;\n  var childList = [];\n  React.Children.forEach(children, function (child) {\n    var type = _typeof(child);\n\n    var isCurrentChildPure = type === 'string' || type === 'number';\n\n    if (isPrevChildPure && isCurrentChildPure) {\n      var lastIndex = childList.length - 1;\n      var lastChild = childList[lastIndex];\n      childList[lastIndex] = \"\".concat(lastChild).concat(child);\n    } else {\n      childList.push(child);\n    }\n\n    isPrevChildPure = isCurrentChildPure;\n  }); // Pass to React.Children.map to auto fill key\n\n  return React.Children.map(childList, function (child) {\n    return insertSpace(child, needInserted);\n  });\n}\n\nvar ButtonTypes = tuple('default', 'primary', 'ghost', 'dashed', 'danger', 'link');\nvar ButtonShapes = tuple('circle', 'circle-outline', 'round');\nvar ButtonHTMLTypes = tuple('submit', 'button', 'reset');\n\nvar Button =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Button, _React$Component);\n\n  function Button(props) {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Button).call(this, props));\n\n    _this.saveButtonRef = function (node) {\n      _this.buttonNode = node;\n    };\n\n    _this.handleClick = function (e) {\n      var loading = _this.state.loading;\n      var onClick = _this.props.onClick;\n\n      if (loading) {\n        return;\n      }\n\n      if (onClick) {\n        onClick(e);\n      }\n    };\n\n    _this.state = {\n      loading: props.loading,\n      hasTwoCNChar: false\n    };\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fixTwoCNChar();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      this.fixTwoCNChar();\n\n      if (prevProps.loading && typeof prevProps.loading !== 'boolean') {\n        clearTimeout(this.delayTimeout);\n      }\n\n      var loading = this.props.loading;\n\n      if (loading && typeof loading !== 'boolean' && loading.delay) {\n        this.delayTimeout = window.setTimeout(function () {\n          _this2.setState({\n            loading: loading\n          });\n        }, loading.delay);\n      } else if (prevProps.loading !== loading) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          loading: loading\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.delayTimeout) {\n        clearTimeout(this.delayTimeout);\n      }\n    }\n  }, {\n    key: \"fixTwoCNChar\",\n    value: function fixTwoCNChar() {\n      var autoInsertSpaceInButton = this.context.autoInsertSpaceInButton; // Fix for HOC usage like <FormatMessage />\n\n      if (!this.buttonNode || autoInsertSpaceInButton === false) {\n        return;\n      }\n\n      var buttonText = this.buttonNode.textContent;\n\n      if (this.isNeedInserted() && isTwoCNChar(buttonText)) {\n        if (!this.state.hasTwoCNChar) {\n          this.setState({\n            hasTwoCNChar: true\n          });\n        }\n      } else if (this.state.hasTwoCNChar) {\n        this.setState({\n          hasTwoCNChar: false\n        });\n      }\n    }\n  }, {\n    key: \"isNeedInserted\",\n    value: function isNeedInserted() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          children = _this$props.children,\n          type = _this$props.type;\n      return React.Children.count(children) === 1 && !icon && type !== 'link';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$context = this.context,\n          getPrefixCls = _this$context.getPrefixCls,\n          autoInsertSpaceInButton = _this$context.autoInsertSpaceInButton,\n          direction = _this$context.direction;\n      return React.createElement(SizeContext.Consumer, null, function (size) {\n        var _classNames;\n\n        var _a = _this3.props,\n            customizePrefixCls = _a.prefixCls,\n            type = _a.type,\n            danger = _a.danger,\n            shape = _a.shape,\n            customizeSize = _a.size,\n            className = _a.className,\n            children = _a.children,\n            icon = _a.icon,\n            ghost = _a.ghost,\n            block = _a.block,\n            rest = __rest(_a, [\"prefixCls\", \"type\", \"danger\", \"shape\", \"size\", \"className\", \"children\", \"icon\", \"ghost\", \"block\"]);\n\n        var _this3$state = _this3.state,\n            loading = _this3$state.loading,\n            hasTwoCNChar = _this3$state.hasTwoCNChar;\n        warning(!(typeof icon === 'string' && icon.length > 2), 'Button', \"`icon` is using ReactNode instead of string naming in v4. Please check `\".concat(icon, \"` at https://ant.design/components/icon\"));\n        var prefixCls = getPrefixCls('btn', customizePrefixCls);\n        var autoInsertSpace = autoInsertSpaceInButton !== false; // large => lg\n        // small => sm\n\n        var sizeCls = '';\n\n        switch (customizeSize || size) {\n          case 'large':\n            sizeCls = 'lg';\n            break;\n\n          case 'small':\n            sizeCls = 'sm';\n            break;\n\n          default:\n            break;\n        }\n\n        var iconType = loading ? 'loading' : icon;\n        var classes = classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(type), type), _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(shape), shape), _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(sizeCls), sizeCls), _defineProperty(_classNames, \"\".concat(prefixCls, \"-icon-only\"), !children && children !== 0 && iconType), _defineProperty(_classNames, \"\".concat(prefixCls, \"-loading\"), !!loading), _defineProperty(_classNames, \"\".concat(prefixCls, \"-background-ghost\"), ghost), _defineProperty(_classNames, \"\".concat(prefixCls, \"-two-chinese-chars\"), hasTwoCNChar && autoInsertSpace), _defineProperty(_classNames, \"\".concat(prefixCls, \"-block\"), block), _defineProperty(_classNames, \"\".concat(prefixCls, \"-dangerous\"), !!danger), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames));\n        var iconNode = loading ? React.createElement(LoadingOutlined, null) : icon || null;\n        var kids = children || children === 0 ? spaceChildren(children, _this3.isNeedInserted() && autoInsertSpace) : null;\n        var linkButtonRestProps = omit(rest, ['htmlType', 'loading']);\n\n        if (linkButtonRestProps.href !== undefined) {\n          return React.createElement(\"a\", _extends({}, linkButtonRestProps, {\n            className: classes,\n            onClick: _this3.handleClick,\n            ref: _this3.saveButtonRef\n          }), iconNode, kids);\n        } // React does not recognize the `htmlType` prop on a DOM element. Here we pick it out of `rest`.\n\n\n        var _b = rest,\n            htmlType = _b.htmlType,\n            otherProps = __rest(_b, [\"htmlType\"]);\n\n        var buttonNode = React.createElement(\"button\", _extends({}, omit(otherProps, ['loading']), {\n          type: htmlType,\n          className: classes,\n          onClick: _this3.handleClick,\n          ref: _this3.saveButtonRef\n        }), iconNode, kids);\n\n        if (type === 'link') {\n          return buttonNode;\n        }\n\n        return React.createElement(Wave, null, buttonNode);\n      });\n    }\n  }]);\n\n  return Button;\n}(React.Component);\n\nButton.__ANT_BUTTON = true;\nButton.contextType = ConfigContext;\nButton.defaultProps = {\n  loading: false,\n  ghost: false,\n  block: false,\n  htmlType: 'button'\n};\nexport default Button;","map":{"version":3,"sources":["button/button.jsx"],"names":["__rest","t","Object","e","s","i","p","rxTwoCNChar","isTwoCNChar","child","SPACE","needInserted","isString","React","isPrevChildPure","childList","type","isCurrentChildPure","lastIndex","lastChild","insertSpace","ButtonTypes","tuple","ButtonShapes","ButtonHTMLTypes","Button","Component","loading","onClick","props","hasTwoCNChar","prevProps","clearTimeout","autoInsertSpaceInButton","buttonText","icon","children","getPrefixCls","direction","customizePrefixCls","danger","shape","customizeSize","className","ghost","block","_a","rest","warning","prefixCls","autoInsertSpace","sizeCls","iconType","classes","classNames","iconNode","kids","spaceChildren","linkButtonRestProps","omit","saveButtonRef","htmlType","_b","otherProps","buttonNode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,MAAM,GAAI,QAAQ,KAAT,MAAC,IAAwB,UAAA,CAAA,EAAA,CAAA,EAAgB;AAClD,MAAIC,CAAC,GAAL,EAAA;;AACA,OAAK,IAAL,CAAA,IAAA,CAAA,EAAA;AAAiB,QAAIC,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,KAA8CC,CAAC,CAADA,OAAAA,CAAAA,CAAAA,IAAlD,CAAA,EACbF,CAAC,CAADA,CAAC,CAADA,GAAOG,CAAC,CAARH,CAAQ,CAARA;AADJ;;AAEA,MAAIG,CAAC,IAADA,IAAAA,IAAa,OAAOF,MAAM,CAAb,qBAAA,KAAjB,UAAA,EACI,KAAK,IAAIG,CAAC,GAAL,CAAA,EAAWC,CAAC,GAAGJ,MAAM,CAANA,qBAAAA,CAApB,CAAoBA,CAApB,EAAqDG,CAAC,GAAGC,CAAC,CAA1D,MAAA,EAAmED,CAAnE,EAAA,EAAwE;AACpE,QAAIF,CAAC,CAADA,OAAAA,CAAUG,CAAC,CAAXH,CAAW,CAAXA,IAAAA,CAAAA,IAAuBD,MAAM,CAANA,SAAAA,CAAAA,oBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAA8CI,CAAC,CAA1E,CAA0E,CAA/CJ,CAA3B,EACID,CAAC,CAACK,CAAC,CAAHL,CAAG,CAAF,CAADA,GAAUG,CAAC,CAACE,CAAC,CAAbL,CAAa,CAAF,CAAXA;AACP;AACL,SAAA,CAAA;AATJ,CAAA;AAWA;;;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,UAAA,MAAA,YAAA;AACA,OAAA,eAAA,MAAA,mCAAA;AACA,OAAA,IAAA,MAAA,SAAA;AACA,SAAA,aAAA,QAAA,oBAAA;AACA,OAAA,IAAA,MAAA,eAAA;AACA,SAAA,KAAA,QAAA,eAAA;AACA,OAAA,OAAA,MAAA,kBAAA;AACA,OAAA,WAAA,MAAA,gCAAA;AACA,IAAMM,WAAW,GAAjB,sBAAA;AACA,IAAMC,WAAW,GAAGD,WAAW,CAAXA,IAAAA,CAAAA,IAAAA,CAApB,WAAoBA,CAApB;;AACA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACnB,SAAO,OAAA,GAAA,KAAP,QAAA;EAEJ;;;AACA,SAAA,WAAA,CAAA,KAAA,EAAA,YAAA,EAA0C;AACtC;AACA,MAAIE,KAAK,IAAT,IAAA,EAAmB;AACf;AACH;;AACD,MAAMC,KAAK,GAAGC,YAAY,GAAA,GAAA,GALY,EAKtC,CALsC,CAMtC;;AACA,MAAI,OAAA,KAAA,KAAA,QAAA,IACA,OAAA,KAAA,KADA,QAAA,IAEAC,QAAQ,CAACH,KAAK,CAFd,IAEQ,CAFR,IAGAD,WAAW,CAACC,KAAK,CAALA,KAAAA,CAHhB,QAGe,CAHf,EAGuC;AACnC,WAAOI,KAAK,CAALA,YAAAA,CAAAA,KAAAA,EAAAA,EAAAA,EAA8BJ,KAAK,CAALA,KAAAA,CAAAA,QAAAA,CAAAA,KAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAArC,KAAqCA,CAA9BI,CAAP;AACH;;AACD,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC3B,QAAIL,WAAW,CAAf,KAAe,CAAf,EAAwB;AACpBC,MAAAA,KAAK,GAAGA,KAAK,CAALA,KAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAARA,KAAQA,CAARA;AACH;;AACD,WAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAP,KAAO,CAAP;AACH;;AACD,SAAA,KAAA;AACH;;AACD,SAAA,aAAA,CAAA,QAAA,EAAA,YAAA,EAA+C;AAC3C,MAAIK,eAAe,GAAnB,KAAA;AACA,MAAMC,SAAS,GAAf,EAAA;AACAF,EAAAA,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAAiC,UAAA,KAAA,EAAS;AACtC,QAAMG,IAAI,GAAA,OAAA,CAAV,KAAU,CAAV;;AACA,QAAMC,kBAAkB,GAAGD,IAAI,KAAJA,QAAAA,IAAqBA,IAAI,KAApD,QAAA;;AACA,QAAIF,eAAe,IAAnB,kBAAA,EAA2C;AACvC,UAAMI,SAAS,GAAGH,SAAS,CAATA,MAAAA,GAAlB,CAAA;AACA,UAAMI,SAAS,GAAGJ,SAAS,CAA3B,SAA2B,CAA3B;AACAA,MAAAA,SAAS,CAATA,SAAS,CAATA,GAAAA,GAAAA,MAAAA,CAAAA,SAAAA,EAAAA,MAAAA,CAAAA,KAAAA,CAAAA;AAHJ,KAAA,MAKK;AACDA,MAAAA,SAAS,CAATA,IAAAA,CAAAA,KAAAA;AACH;;AACDD,IAAAA,eAAe,GAAfA,kBAAAA;AAduC,GAG3CD,EAH2C,CAgB3C;;AACA,SAAO,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,SAAA,EAA8B,UAAA,KAAA,EAAK;AAAA,WAAIO,WAAW,CAAA,KAAA,EAAf,YAAe,CAAf;AAA1C,GAAO,CAAP;AACH;;AACD,IAAMC,WAAW,GAAGC,KAAK,CAAA,SAAA,EAAA,SAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAzB,MAAyB,CAAzB;AACA,IAAMC,YAAY,GAAGD,KAAK,CAAA,QAAA,EAAA,gBAAA,EAA1B,OAA0B,CAA1B;AACA,IAAME,eAAe,GAAGF,KAAK,CAAA,QAAA,EAAA,QAAA,EAA7B,OAA6B,CAA7B;;IACMG,M;;;;;AACF,WAAA,MAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AACf,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AACA,IAAA,KAAA,CAAA,aAAA,GAAqB,UAAA,IAAA,EAAU;AAC3B,MAAA,KAAA,CAAA,UAAA,GAAA,IAAA;AADJ,KAAA;;AAGA,IAAA,KAAA,CAAA,WAAA,GAAmB,UAAA,CAAA,EAAK;AAAA,UACZE,OADY,GACA,KAAA,CADA,KACA,CADA,OAAA;AAAA,UAEZC,OAFY,GAEA,KAAA,CAFA,KAEA,CAFA,OAAA;;AAGpB,UAAA,OAAA,EAAa;AACT;AACH;;AACD,UAAA,OAAA,EAAa;AACTA,QAAAA,OAAO,CAAPA,CAAO,CAAPA;AACH;AARL,KAAA;;AAUA,IAAA,KAAA,CAAA,KAAA,GAAa;AACTD,MAAAA,OAAO,EAAEE,KAAK,CADL,OAAA;AAETC,MAAAA,YAAY,EAAE;AAFL,KAAb;AAfe,WAAA,KAAA;AAmBlB;;;;wCACmB;AAChB,WAAA,YAAA;AACH;;;uCACkBC,S,EAAW;AAAA,UAAA,MAAA,GAAA,IAAA;;AAC1B,WAAA,YAAA;;AACA,UAAIA,SAAS,CAATA,OAAAA,IAAqB,OAAOA,SAAS,CAAhB,OAAA,KAAzB,SAAA,EAAiE;AAC7DC,QAAAA,YAAY,CAAC,KAAbA,YAAY,CAAZA;AACH;;AAJyB,UAKlBL,OALkB,GAKN,KALM,KAKN,CALM,OAAA;;AAM1B,UAAIA,OAAO,IAAI,OAAA,OAAA,KAAXA,SAAAA,IAA2CA,OAAO,CAAtD,KAAA,EAA8D;AAC1D,aAAA,YAAA,GAAoB,MAAM,CAAN,UAAA,CAAkB,YAAM;AACxC,UAAA,MAAI,CAAJ,QAAA,CAAc;AAAEA,YAAAA,OAAO,EAAPA;AAAF,WAAd;AADgB,SAAA,EAEjBA,OAAO,CAFV,KAAoB,CAApB;AADJ,OAAA,MAKK,IAAII,SAAS,CAATA,OAAAA,KAAJ,OAAA,EAAmC;AACpC;AACA,aAAA,QAAA,CAAc;AAAEJ,UAAAA,OAAO,EAAPA;AAAF,SAAd;AACH;AACJ;;;2CACsB;AACnB,UAAI,KAAJ,YAAA,EAAuB;AACnBK,QAAAA,YAAY,CAAC,KAAbA,YAAY,CAAZA;AACH;AACJ;;;mCACc;AAAA,UACHC,uBADG,GACyB,KADzB,OACyB,CADzB,uBAAA,CAAA,CAEX;;AACA,UAAI,CAAC,KAAD,UAAA,IAAoBA,uBAAuB,KAA/C,KAAA,EAA2D;AACvD;AACH;;AACD,UAAMC,UAAU,GAAG,KAAA,UAAA,CAAnB,WAAA;;AACA,UAAI,KAAA,cAAA,MAAyB1B,WAAW,CAAxC,UAAwC,CAAxC,EAAsD;AAClD,YAAI,CAAC,KAAA,KAAA,CAAL,YAAA,EAA8B;AAC1B,eAAA,QAAA,CAAc;AACVsB,YAAAA,YAAY,EAAE;AADJ,WAAd;AAGH;AALL,OAAA,MAOK,IAAI,KAAA,KAAA,CAAJ,YAAA,EAA6B;AAC9B,aAAA,QAAA,CAAc;AACVA,UAAAA,YAAY,EAAE;AADJ,SAAd;AAGH;AACJ;;;qCACgB;AAAA,UAAA,WAAA,GACoB,KADpB,KAAA;AAAA,UACLK,IADK,GAAA,WAAA,CAAA,IAAA;AAAA,UACCC,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWpB,IADX,GAAA,WAAA,CAAA,IAAA;AAEb,aAAOH,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAAA,QAAAA,MAAAA,CAAAA,IAAwC,CAAxCA,IAAAA,IAAiDG,IAAI,KAA5D,MAAA;AACH;;;6BACQ;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,aAAA,GACwD,KADxD,OAAA;AAAA,UACGqB,YADH,GAAA,aAAA,CAAA,YAAA;AAAA,UACiBJ,uBADjB,GAAA,aAAA,CAAA,uBAAA;AAAA,UAC0CK,SAD1C,GAAA,aAAA,CAAA,SAAA;AAEL,aAAQ,KAAA,CAAA,aAAA,CAAC,WAAD,CAAA,QAAA,EAAA,IAAA,EACP,UAAA,IAAA,EAAQ;AAAA,YAAA,WAAA;;AACC,YAAA,EAAE,GAAG,MAAI,CAAT,KAAA;AAAA,YAA8BC,kBAA9B,GAAwIO,EAAxI,CAAA,SAAA;AAAA,YAAkD9B,IAAlD,GAAwI8B,EAAxI,CAAA,IAAA;AAAA,YAAwDN,MAAxD,GAAwIM,EAAxI,CAAA,MAAA;AAAA,YAAgEL,KAAhE,GAAwIK,EAAxI,CAAA,KAAA;AAAA,YAA6EJ,aAA7E,GAAwII,EAAxI,CAAA,IAAA;AAAA,YAA4FH,SAA5F,GAAwIG,EAAxI,CAAA,SAAA;AAAA,YAAuGV,QAAvG,GAAwIU,EAAxI,CAAA,QAAA;AAAA,YAAiHX,IAAjH,GAAwIW,EAAxI,CAAA,IAAA;AAAA,YAAuHF,KAAvH,GAAwIE,EAAxI,CAAA,KAAA;AAAA,YAA8HD,KAA9H,GAAwIC,EAAxI,CAAA,KAAA;AAAA,YAA4IC,IAA5I,GAAmJ/C,MAAM,CAAA,EAAA,EAAK,CAAA,WAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAA9J,OAA8J,CAAL,CAAzJ;;AADD,YAAA,YAAA,GAE6B,MAAI,CAFjC,KAAA;AAAA,YAEG2B,OAFH,GAAA,YAAA,CAAA,OAAA;AAAA,YAEYG,YAFZ,GAAA,YAAA,CAAA,YAAA;AAGLkB,QAAAA,OAAO,CAAC,EAAE,OAAA,IAAA,KAAA,QAAA,IAA4Bb,IAAI,CAAJA,MAAAA,GAA/B,CAAC,CAAD,EAAA,QAAA,EAAA,2EAAA,MAAA,CAAA,IAAA,EAAPa,yCAAO,CAAA,CAAPA;AACA,YAAMC,SAAS,GAAGZ,YAAY,CAAA,KAAA,EAA9B,kBAA8B,CAA9B;AACA,YAAMa,eAAe,GAAGjB,uBAAuB,KAL1C,KAKL,CALK,CAML;AACA;;AACA,YAAIkB,OAAO,GAAX,EAAA;;AACA,gBAAQT,aAAa,IAArB,IAAA;AACI,eAAA,OAAA;AACIS,YAAAA,OAAO,GAAPA,IAAAA;AACA;;AACJ,eAAA,OAAA;AACIA,YAAAA,OAAO,GAAPA,IAAAA;AACA;;AACJ;AACI;AARR;;AAUA,YAAMC,QAAQ,GAAGzB,OAAO,GAAA,SAAA,GAAxB,IAAA;AACA,YAAM0B,OAAO,GAAGC,UAAU,CAAA,SAAA,EAAA,SAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,GAAA,EAAA,MAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,GAAA,EAAA,MAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,GAAA,EAAA,MAAA,CAAA,OAAA,CAAA,EAAA,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,YAAA,CAAA,EAIM,CAAA,QAAA,IAAalB,QAAQ,KAArB,CAAA,IAJN,QAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,UAAA,CAAA,EAKI,CAAC,CALL,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,mBAAA,CAAA,EAAA,KAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,oBAAA,CAAA,EAOcN,YAAY,IAP1B,eAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,KAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,YAAA,CAAA,EASM,CAAC,CATP,MAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,MAAA,CAAA,EAUAQ,SAAS,KAVT,KAAA,CAAA,EAA1B,WAA0B,EAA1B;AAYA,YAAMiB,QAAQ,GAAG5B,OAAO,GAAG,KAAA,CAAA,aAAA,CAAA,eAAA,EAAH,IAAG,CAAH,GAAyBQ,IAAI,IAArD,IAAA;AACA,YAAMqB,IAAI,GAAGpB,QAAQ,IAAIA,QAAQ,KAApBA,CAAAA,GACPqB,aAAa,CAAA,QAAA,EAAW,MAAI,CAAJ,cAAA,MADjBrB,eACM,CADNA,GAAb,IAAA;AAGA,YAAMsB,mBAAmB,GAAGC,IAAI,CAAA,IAAA,EAAO,CAAA,UAAA,EAAvC,SAAuC,CAAP,CAAhC;;AACA,YAAID,mBAAmB,CAAnBA,IAAAA,KAAJ,SAAA,EAA4C;AACxC,iBAAQ,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,mBAAA,EAAA;AAA4B,YAAA,SAAS,EAArC,OAAA;AAAgD,YAAA,OAAO,EAAE,MAAI,CAA7D,WAAA;AAA2E,YAAA,GAAG,EAAE,MAAI,CAACE;AAArF,WAAA,CAAA,EAAA,QAAA,EAAR,IAAQ,CAAR;AAtCC,SAAA,CA2CL;;;AACM,YAAA,EAAE,GAAF,IAAA;AAAA,YAAaC,QAAb,GAA0BC,EAA1B,CAAA,QAAA;AAAA,YAA8BC,UAA9B,GAA2C/D,MAAM,CAAA,EAAA,EAAK,CAAtD,UAAsD,CAAL,CAAjD;;AACN,YAAMgE,UAAU,GAAI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAYL,IAAI,CAAA,UAAA,EAAa,CAA7B,SAA6B,CAAb,CAAhB,EAAA;AAA2C,UAAA,IAAI,EAA/C,QAAA;AAA2D,UAAA,SAAS,EAApE,OAAA;AAA+E,UAAA,OAAO,EAAE,MAAI,CAA5F,WAAA;AAA0G,UAAA,GAAG,EAAE,MAAI,CAACC;AAApH,SAAA,CAAA,EAAA,QAAA,EAApB,IAAoB,CAApB;;AAIA,YAAI5C,IAAI,KAAR,MAAA,EAAqB;AACjB,iBAAA,UAAA;AACH;;AACD,eAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAP,UAAO,CAAP;AArDJ,OAAQ,CAAR;AAwDH;;;;EA/HgBH,KAAK,CAACa,S;;AAiI3BD,MAAM,CAANA,YAAAA,GAAAA,IAAAA;AACAA,MAAM,CAANA,WAAAA,GAAAA,aAAAA;AACAA,MAAM,CAANA,YAAAA,GAAsB;AAClBE,EAAAA,OAAO,EADW,KAAA;AAElBiB,EAAAA,KAAK,EAFa,KAAA;AAGlBC,EAAAA,KAAK,EAHa,KAAA;AAIlBgB,EAAAA,QAAQ,EAAE;AAJQ,CAAtBpC;AAMA,eAAA,MAAA","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/* eslint-disable react/button-has-type */\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport omit from 'omit.js';\nimport { ConfigContext } from '../config-provider';\nimport Wave from '../_util/wave';\nimport { tuple } from '../_util/type';\nimport warning from '../_util/warning';\nimport SizeContext from '../config-provider/SizeContext';\nconst rxTwoCNChar = /^[\\u4e00-\\u9fa5]{2}$/;\nconst isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);\nfunction isString(str) {\n    return typeof str === 'string';\n}\n// Insert one space between two chinese characters automatically.\nfunction insertSpace(child, needInserted) {\n    // Check the child if is undefined or null.\n    if (child == null) {\n        return;\n    }\n    const SPACE = needInserted ? ' ' : '';\n    // strictNullChecks oops.\n    if (typeof child !== 'string' &&\n        typeof child !== 'number' &&\n        isString(child.type) &&\n        isTwoCNChar(child.props.children)) {\n        return React.cloneElement(child, {}, child.props.children.split('').join(SPACE));\n    }\n    if (typeof child === 'string') {\n        if (isTwoCNChar(child)) {\n            child = child.split('').join(SPACE);\n        }\n        return <span>{child}</span>;\n    }\n    return child;\n}\nfunction spaceChildren(children, needInserted) {\n    let isPrevChildPure = false;\n    const childList = [];\n    React.Children.forEach(children, child => {\n        const type = typeof child;\n        const isCurrentChildPure = type === 'string' || type === 'number';\n        if (isPrevChildPure && isCurrentChildPure) {\n            const lastIndex = childList.length - 1;\n            const lastChild = childList[lastIndex];\n            childList[lastIndex] = `${lastChild}${child}`;\n        }\n        else {\n            childList.push(child);\n        }\n        isPrevChildPure = isCurrentChildPure;\n    });\n    // Pass to React.Children.map to auto fill key\n    return React.Children.map(childList, child => insertSpace(child, needInserted));\n}\nconst ButtonTypes = tuple('default', 'primary', 'ghost', 'dashed', 'danger', 'link');\nconst ButtonShapes = tuple('circle', 'circle-outline', 'round');\nconst ButtonHTMLTypes = tuple('submit', 'button', 'reset');\nclass Button extends React.Component {\n    constructor(props) {\n        super(props);\n        this.saveButtonRef = (node) => {\n            this.buttonNode = node;\n        };\n        this.handleClick = e => {\n            const { loading } = this.state;\n            const { onClick } = this.props;\n            if (loading) {\n                return;\n            }\n            if (onClick) {\n                onClick(e);\n            }\n        };\n        this.state = {\n            loading: props.loading,\n            hasTwoCNChar: false,\n        };\n    }\n    componentDidMount() {\n        this.fixTwoCNChar();\n    }\n    componentDidUpdate(prevProps) {\n        this.fixTwoCNChar();\n        if (prevProps.loading && typeof prevProps.loading !== 'boolean') {\n            clearTimeout(this.delayTimeout);\n        }\n        const { loading } = this.props;\n        if (loading && typeof loading !== 'boolean' && loading.delay) {\n            this.delayTimeout = window.setTimeout(() => {\n                this.setState({ loading });\n            }, loading.delay);\n        }\n        else if (prevProps.loading !== loading) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ loading });\n        }\n    }\n    componentWillUnmount() {\n        if (this.delayTimeout) {\n            clearTimeout(this.delayTimeout);\n        }\n    }\n    fixTwoCNChar() {\n        const { autoInsertSpaceInButton } = this.context;\n        // Fix for HOC usage like <FormatMessage />\n        if (!this.buttonNode || autoInsertSpaceInButton === false) {\n            return;\n        }\n        const buttonText = this.buttonNode.textContent;\n        if (this.isNeedInserted() && isTwoCNChar(buttonText)) {\n            if (!this.state.hasTwoCNChar) {\n                this.setState({\n                    hasTwoCNChar: true,\n                });\n            }\n        }\n        else if (this.state.hasTwoCNChar) {\n            this.setState({\n                hasTwoCNChar: false,\n            });\n        }\n    }\n    isNeedInserted() {\n        const { icon, children, type } = this.props;\n        return React.Children.count(children) === 1 && !icon && type !== 'link';\n    }\n    render() {\n        const { getPrefixCls, autoInsertSpaceInButton, direction } = this.context;\n        return (<SizeContext.Consumer>\n        {size => {\n            const _a = this.props, { prefixCls: customizePrefixCls, type, danger, shape, size: customizeSize, className, children, icon, ghost, block } = _a, rest = __rest(_a, [\"prefixCls\", \"type\", \"danger\", \"shape\", \"size\", \"className\", \"children\", \"icon\", \"ghost\", \"block\"]);\n            const { loading, hasTwoCNChar } = this.state;\n            warning(!(typeof icon === 'string' && icon.length > 2), 'Button', `\\`icon\\` is using ReactNode instead of string naming in v4. Please check \\`${icon}\\` at https://ant.design/components/icon`);\n            const prefixCls = getPrefixCls('btn', customizePrefixCls);\n            const autoInsertSpace = autoInsertSpaceInButton !== false;\n            // large => lg\n            // small => sm\n            let sizeCls = '';\n            switch (customizeSize || size) {\n                case 'large':\n                    sizeCls = 'lg';\n                    break;\n                case 'small':\n                    sizeCls = 'sm';\n                    break;\n                default:\n                    break;\n            }\n            const iconType = loading ? 'loading' : icon;\n            const classes = classNames(prefixCls, className, {\n                [`${prefixCls}-${type}`]: type,\n                [`${prefixCls}-${shape}`]: shape,\n                [`${prefixCls}-${sizeCls}`]: sizeCls,\n                [`${prefixCls}-icon-only`]: !children && children !== 0 && iconType,\n                [`${prefixCls}-loading`]: !!loading,\n                [`${prefixCls}-background-ghost`]: ghost,\n                [`${prefixCls}-two-chinese-chars`]: hasTwoCNChar && autoInsertSpace,\n                [`${prefixCls}-block`]: block,\n                [`${prefixCls}-dangerous`]: !!danger,\n                [`${prefixCls}-rtl`]: direction === 'rtl',\n            });\n            const iconNode = loading ? <LoadingOutlined /> : icon || null;\n            const kids = children || children === 0\n                ? spaceChildren(children, this.isNeedInserted() && autoInsertSpace)\n                : null;\n            const linkButtonRestProps = omit(rest, ['htmlType', 'loading']);\n            if (linkButtonRestProps.href !== undefined) {\n                return (<a {...linkButtonRestProps} className={classes} onClick={this.handleClick} ref={this.saveButtonRef}>\n                {iconNode}\n                {kids}\n              </a>);\n            }\n            // React does not recognize the `htmlType` prop on a DOM element. Here we pick it out of `rest`.\n            const _b = rest, { htmlType } = _b, otherProps = __rest(_b, [\"htmlType\"]);\n            const buttonNode = (<button {...omit(otherProps, ['loading'])} type={htmlType} className={classes} onClick={this.handleClick} ref={this.saveButtonRef}>\n              {iconNode}\n              {kids}\n            </button>);\n            if (type === 'link') {\n                return buttonNode;\n            }\n            return <Wave>{buttonNode}</Wave>;\n        }}\n      </SizeContext.Consumer>);\n    }\n}\nButton.__ANT_BUTTON = true;\nButton.contextType = ConfigContext;\nButton.defaultProps = {\n    loading: false,\n    ghost: false,\n    block: false,\n    htmlType: 'button',\n};\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}