{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport * as React from 'react';\nimport { getColumnPos, renderColumnTitle, getColumnKey } from '../../util';\nimport FilterDropdown from './FilterDropdown';\n\nfunction collectFilterStates(columns, init, pos) {\n  var filterStates = [];\n  (columns || []).forEach(function (column, index) {\n    var columnPos = getColumnPos(index, pos);\n\n    if ('children' in column) {\n      filterStates = [].concat(_toConsumableArray(filterStates), _toConsumableArray(collectFilterStates(column.children, init, columnPos)));\n    } else if ('filters' in column || 'filterDropdown' in column) {\n      if ('filteredValue' in column) {\n        // Controlled\n        filterStates.push({\n          column: column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: column.filteredValue,\n          forceFiltered: column.filtered\n        });\n      } else {\n        // Uncontrolled\n        filterStates.push({\n          column: column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,\n          forceFiltered: column.filtered\n        });\n      }\n    }\n  });\n  return filterStates;\n}\n\nfunction injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, triggerFilter, getPopupContainer, locale, pos) {\n  return columns.map(function (column, index) {\n    var columnPos = getColumnPos(index, pos);\n    var _column$filterMultipl = column.filterMultiple,\n        filterMultiple = _column$filterMultipl === void 0 ? true : _column$filterMultipl;\n\n    if ('filters' in column || 'filterDropdown' in column) {\n      var columnKey = getColumnKey(column, columnPos);\n      var filterState = filterStates.find(function (_ref) {\n        var key = _ref.key;\n        return columnKey === key;\n      });\n      return _extends(_extends({}, column), {\n        title: function title(renderProps) {\n          return React.createElement(FilterDropdown, {\n            prefixCls: \"\".concat(prefixCls, \"-filter\"),\n            dropdownPrefixCls: dropdownPrefixCls,\n            column: column,\n            columnKey: columnKey,\n            filterState: filterState,\n            filterMultiple: filterMultiple,\n            triggerFilter: triggerFilter,\n            locale: locale,\n            getPopupContainer: getPopupContainer\n          }, renderColumnTitle(column.title, renderProps));\n        }\n      });\n    }\n\n    if ('children' in column) {\n      return _extends(_extends({}, column), {\n        children: injectFilter(prefixCls, dropdownPrefixCls, column.children, filterStates, triggerFilter, getPopupContainer, locale, columnPos)\n      });\n    }\n\n    return column;\n  });\n}\n\nfunction generateFilterInfo(filterStates) {\n  var currentFilters = {};\n  filterStates.forEach(function (_ref2) {\n    var key = _ref2.key,\n        filteredKeys = _ref2.filteredKeys;\n    currentFilters[key] = filteredKeys || null;\n  });\n  return currentFilters;\n}\n\nfunction flattenKeys(filters) {\n  var keys = [];\n  (filters || []).forEach(function (_ref3) {\n    var value = _ref3.value,\n        children = _ref3.children;\n    keys.push(value);\n\n    if (children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(flattenKeys(children)));\n    }\n  });\n  return keys;\n}\n\nexport function getFilterData(data, filterStates) {\n  return filterStates.reduce(function (currentData, filterState) {\n    var _filterState$column = filterState.column,\n        onFilter = _filterState$column.onFilter,\n        filters = _filterState$column.filters,\n        filteredKeys = filterState.filteredKeys;\n\n    if (onFilter && filteredKeys && filteredKeys.length) {\n      return currentData.filter(function (record) {\n        return filteredKeys.some(function (key) {\n          var keys = flattenKeys(filters);\n          var keyIndex = keys.findIndex(function (k) {\n            return String(k) === String(key);\n          });\n          var realKey = keyIndex !== -1 ? keys[keyIndex] : key;\n          return onFilter(realKey, record);\n        });\n      });\n    }\n\n    return currentData;\n  }, data);\n}\n\nfunction useFilter(_ref4) {\n  var prefixCls = _ref4.prefixCls,\n      _ref4$dropdownPrefixC = _ref4.dropdownPrefixCls,\n      dropdownPrefixCls = _ref4$dropdownPrefixC === void 0 ? 'ant-dropdown' : _ref4$dropdownPrefixC,\n      columns = _ref4.columns,\n      onFilterChange = _ref4.onFilterChange,\n      getPopupContainer = _ref4.getPopupContainer,\n      tableLocale = _ref4.locale;\n\n  var _React$useState = React.useState(collectFilterStates(columns, true)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      filterStates = _React$useState2[0],\n      setFilterStates = _React$useState2[1];\n\n  var mergedFilterStates = React.useMemo(function () {\n    var collectedStates = collectFilterStates(columns, false); // Return if not controlled\n\n    if (collectedStates.every(function (_ref5) {\n      var filteredKeys = _ref5.filteredKeys;\n      return filteredKeys === undefined;\n    })) {\n      return filterStates;\n    }\n\n    return collectedStates;\n  }, [columns, filterStates]);\n  var getFilters = React.useCallback(function () {\n    return generateFilterInfo(mergedFilterStates);\n  }, [mergedFilterStates]);\n\n  var triggerFilter = function triggerFilter(filterState) {\n    var newFilterStates = mergedFilterStates.filter(function (_ref6) {\n      var key = _ref6.key;\n      return key !== filterState.key;\n    });\n    newFilterStates.push(filterState);\n    setFilterStates(newFilterStates);\n    onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);\n  };\n\n  var transformColumns = function transformColumns(innerColumns) {\n    return injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, triggerFilter, getPopupContainer, tableLocale);\n  };\n\n  return [transformColumns, mergedFilterStates, getFilters];\n}\n\nexport default useFilter;","map":{"version":3,"sources":["table/hooks/useFilter/index.jsx"],"names":["filterStates","columns","columnPos","getColumnPos","collectFilterStates","column","key","getColumnKey","filteredKeys","forceFiltered","filtered","init","filterMultiple","columnKey","filterState","title","getPopupContainer","renderColumnTitle","children","injectFilter","currentFilters","keys","filters","value","flattenKeys","onFilter","keyIndex","String","realKey","prefixCls","dropdownPrefixCls","onFilterChange","locale","tableLocale","setFilterStates","React","mergedFilterStates","collectedStates","getFilters","generateFilterInfo","triggerFilter","newFilterStates","transformColumns"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getColumnPos, renderColumnTitle, getColumnKey } from '../../util';\nimport FilterDropdown from './FilterDropdown';\nfunction collectFilterStates(columns, init, pos) {\n    let filterStates = [];\n    (columns || []).forEach((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        if ('children' in column) {\n            filterStates = [...filterStates, ...collectFilterStates(column.children, init, columnPos)];\n        }\n        else if ('filters' in column || 'filterDropdown' in column) {\n            if ('filteredValue' in column) {\n                // Controlled\n                filterStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    filteredKeys: column.filteredValue,\n                    forceFiltered: column.filtered,\n                });\n            }\n            else {\n                // Uncontrolled\n                filterStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,\n                    forceFiltered: column.filtered,\n                });\n            }\n        }\n    });\n    return filterStates;\n}\nfunction injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, triggerFilter, getPopupContainer, locale, pos) {\n    return columns.map((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        const { filterMultiple = true } = column;\n        if ('filters' in column || 'filterDropdown' in column) {\n            const columnKey = getColumnKey(column, columnPos);\n            const filterState = filterStates.find(({ key }) => columnKey === key);\n            return Object.assign(Object.assign({}, column), { title: (renderProps) => (<FilterDropdown prefixCls={`${prefixCls}-filter`} dropdownPrefixCls={dropdownPrefixCls} column={column} columnKey={columnKey} filterState={filterState} filterMultiple={filterMultiple} triggerFilter={triggerFilter} locale={locale} getPopupContainer={getPopupContainer}>\n            {renderColumnTitle(column.title, renderProps)}\n          </FilterDropdown>) });\n        }\n        if ('children' in column) {\n            return Object.assign(Object.assign({}, column), { children: injectFilter(prefixCls, dropdownPrefixCls, column.children, filterStates, triggerFilter, getPopupContainer, locale, columnPos) });\n        }\n        return column;\n    });\n}\nfunction generateFilterInfo(filterStates) {\n    const currentFilters = {};\n    filterStates.forEach(({ key, filteredKeys }) => {\n        currentFilters[key] = filteredKeys || null;\n    });\n    return currentFilters;\n}\nfunction flattenKeys(filters) {\n    let keys = [];\n    (filters || []).forEach(({ value, children }) => {\n        keys.push(value);\n        if (children) {\n            keys = [...keys, ...flattenKeys(children)];\n        }\n    });\n    return keys;\n}\nexport function getFilterData(data, filterStates) {\n    return filterStates.reduce((currentData, filterState) => {\n        const { column: { onFilter, filters }, filteredKeys, } = filterState;\n        if (onFilter && filteredKeys && filteredKeys.length) {\n            return currentData.filter(record => filteredKeys.some(key => {\n                const keys = flattenKeys(filters);\n                const keyIndex = keys.findIndex(k => String(k) === String(key));\n                const realKey = keyIndex !== -1 ? keys[keyIndex] : key;\n                return onFilter(realKey, record);\n            }));\n        }\n        return currentData;\n    }, data);\n}\nfunction useFilter({ prefixCls, dropdownPrefixCls = 'ant-dropdown', columns, onFilterChange, getPopupContainer, locale: tableLocale, }) {\n    const [filterStates, setFilterStates] = React.useState(collectFilterStates(columns, true));\n    const mergedFilterStates = React.useMemo(() => {\n        const collectedStates = collectFilterStates(columns, false);\n        // Return if not controlled\n        if (collectedStates.every(({ filteredKeys }) => filteredKeys === undefined)) {\n            return filterStates;\n        }\n        return collectedStates;\n    }, [columns, filterStates]);\n    const getFilters = React.useCallback(() => generateFilterInfo(mergedFilterStates), [\n        mergedFilterStates,\n    ]);\n    const triggerFilter = (filterState) => {\n        const newFilterStates = mergedFilterStates.filter(({ key }) => key !== filterState.key);\n        newFilterStates.push(filterState);\n        setFilterStates(newFilterStates);\n        onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);\n    };\n    const transformColumns = (innerColumns) => injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, triggerFilter, getPopupContainer, tableLocale);\n    return [transformColumns, mergedFilterStates, getFilters];\n}\nexport default useFilter;\n"]},"metadata":{},"sourceType":"module"}