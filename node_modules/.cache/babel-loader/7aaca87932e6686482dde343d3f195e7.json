{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport * as React from 'react';\nimport { useForm as useRcForm } from 'rc-field-form';\nimport scrollIntoView from 'scroll-into-view-if-needed';\n/**\n * Always debounce error to avoid [error -> null -> error] blink\n */\n\nexport function useCacheErrors(errors, changeTrigger, directly) {\n  var cacheRef = React.useRef({\n    errors: errors,\n    visible: !!errors.length\n  });\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  var update = function update() {\n    var prevVisible = cacheRef.current.visible;\n    var newVisible = !!errors.length;\n    var prevErrors = cacheRef.current.errors;\n    cacheRef.current.errors = errors;\n    cacheRef.current.visible = newVisible;\n\n    if (prevVisible !== newVisible) {\n      changeTrigger(newVisible);\n    } else if (prevErrors.length !== errors.length || prevErrors.some(function (prevErr, index) {\n      return prevErr !== errors[index];\n    })) {\n      forceUpdate({});\n    }\n  };\n\n  React.useEffect(function () {\n    if (!directly) {\n      var timeout = setTimeout(update, 10);\n      return function () {\n        return clearTimeout(timeout);\n      };\n    }\n  }, [errors]);\n\n  if (directly) {\n    update();\n  }\n\n  return [cacheRef.current.visible, cacheRef.current.errors];\n}\nexport function toArray(candidate) {\n  if (candidate === undefined || candidate === false) return [];\n  return Array.isArray(candidate) ? candidate : [candidate];\n}\nexport function getFieldId(namePath, formName) {\n  if (!namePath.length) return undefined;\n  var mergedId = namePath.join('_');\n  return formName ? \"\".concat(formName, \"_\").concat(mergedId) : mergedId;\n}\nexport function useForm(form) {\n  var _useRcForm = useRcForm(),\n      _useRcForm2 = _slicedToArray(_useRcForm, 1),\n      rcForm = _useRcForm2[0];\n\n  var wrapForm = React.useMemo(function () {\n    return form || _extends(_extends({}, rcForm), {\n      __INTERNAL__: {},\n      scrollToField: function scrollToField(name) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var namePath = toArray(name);\n        var fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);\n        var node = fieldId ? document.getElementById(fieldId) : null;\n\n        if (node) {\n          scrollIntoView(node, _extends({\n            scrollMode: 'if-needed',\n            block: 'nearest'\n          }, options));\n        }\n      }\n    });\n  }, [form, rcForm]);\n  return [wrapForm];\n}","map":{"version":3,"sources":["form/util.js"],"names":["useForm","cacheRef","errors","visible","length","forceUpdate","React","update","prevVisible","newVisible","prevErrors","changeTrigger","prevErr","timeout","setTimeout","clearTimeout","candidate","Array","namePath","mergedId","formName","rcForm","useRcForm","wrapForm","form","__INTERNAL__","scrollToField","options","toArray","fieldId","getFieldId","node","document","scrollIntoView","scrollMode","block"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useForm as useRcForm } from 'rc-field-form';\nimport scrollIntoView from 'scroll-into-view-if-needed';\n/**\n * Always debounce error to avoid [error -> null -> error] blink\n */\nexport function useCacheErrors(errors, changeTrigger, directly) {\n    const cacheRef = React.useRef({\n        errors,\n        visible: !!errors.length,\n    });\n    const [, forceUpdate] = React.useState({});\n    const update = () => {\n        const prevVisible = cacheRef.current.visible;\n        const newVisible = !!errors.length;\n        const prevErrors = cacheRef.current.errors;\n        cacheRef.current.errors = errors;\n        cacheRef.current.visible = newVisible;\n        if (prevVisible !== newVisible) {\n            changeTrigger(newVisible);\n        }\n        else if (prevErrors.length !== errors.length ||\n            prevErrors.some((prevErr, index) => prevErr !== errors[index])) {\n            forceUpdate({});\n        }\n    };\n    React.useEffect(() => {\n        if (!directly) {\n            const timeout = setTimeout(update, 10);\n            return () => clearTimeout(timeout);\n        }\n    }, [errors]);\n    if (directly) {\n        update();\n    }\n    return [cacheRef.current.visible, cacheRef.current.errors];\n}\nexport function toArray(candidate) {\n    if (candidate === undefined || candidate === false)\n        return [];\n    return Array.isArray(candidate) ? candidate : [candidate];\n}\nexport function getFieldId(namePath, formName) {\n    if (!namePath.length)\n        return undefined;\n    const mergedId = namePath.join('_');\n    return formName ? `${formName}_${mergedId}` : mergedId;\n}\nexport function useForm(form) {\n    const [rcForm] = useRcForm();\n    const wrapForm = React.useMemo(() => form || Object.assign(Object.assign({}, rcForm), { __INTERNAL__: {}, scrollToField: (name, options = {}) => {\n            const namePath = toArray(name);\n            const fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);\n            const node = fieldId ? document.getElementById(fieldId) : null;\n            if (node) {\n                scrollIntoView(node, Object.assign({ scrollMode: 'if-needed', block: 'nearest' }, options));\n            }\n        } }), [form, rcForm]);\n    return [wrapForm];\n}\n"]},"metadata":{},"sourceType":"module"}