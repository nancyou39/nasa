{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { placements } from \"rc-tooltip/es/placements\";\nvar autoAdjustOverflowEnabled = {\n  adjustX: 1,\n  adjustY: 1\n};\nvar autoAdjustOverflowDisabled = {\n  adjustX: 0,\n  adjustY: 0\n};\nvar targetOffset = [0, 0];\nexport function getOverflowOptions(autoAdjustOverflow) {\n  if (typeof autoAdjustOverflow === 'boolean') {\n    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;\n  }\n\n  return _extends(_extends({}, autoAdjustOverflowDisabled), autoAdjustOverflow);\n}\nexport default function getPlacements(config) {\n  var _config$arrowWidth = config.arrowWidth,\n      arrowWidth = _config$arrowWidth === void 0 ? 5 : _config$arrowWidth,\n      _config$horizontalArr = config.horizontalArrowShift,\n      horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr,\n      _config$verticalArrow = config.verticalArrowShift,\n      verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow,\n      autoAdjustOverflow = config.autoAdjustOverflow;\n  var placementMap = {\n    left: {\n      points: ['cr', 'cl'],\n      offset: [-4, 0]\n    },\n    right: {\n      points: ['cl', 'cr'],\n      offset: [4, 0]\n    },\n    top: {\n      points: ['bc', 'tc'],\n      offset: [0, -4]\n    },\n    bottom: {\n      points: ['tc', 'bc'],\n      offset: [0, 4]\n    },\n    topLeft: {\n      points: ['bl', 'tc'],\n      offset: [-(horizontalArrowShift + arrowWidth), -4]\n    },\n    leftTop: {\n      points: ['tr', 'cl'],\n      offset: [-4, -(verticalArrowShift + arrowWidth)]\n    },\n    topRight: {\n      points: ['br', 'tc'],\n      offset: [horizontalArrowShift + arrowWidth, -4]\n    },\n    rightTop: {\n      points: ['tl', 'cr'],\n      offset: [4, -(verticalArrowShift + arrowWidth)]\n    },\n    bottomRight: {\n      points: ['tr', 'bc'],\n      offset: [horizontalArrowShift + arrowWidth, 4]\n    },\n    rightBottom: {\n      points: ['bl', 'cr'],\n      offset: [4, verticalArrowShift + arrowWidth]\n    },\n    bottomLeft: {\n      points: ['tl', 'bc'],\n      offset: [-(horizontalArrowShift + arrowWidth), 4]\n    },\n    leftBottom: {\n      points: ['br', 'cl'],\n      offset: [-4, verticalArrowShift + arrowWidth]\n    }\n  };\n  Object.keys(placementMap).forEach(function (key) {\n    placementMap[key] = config.arrowPointAtCenter ? _extends(_extends({}, placementMap[key]), {\n      overflow: getOverflowOptions(autoAdjustOverflow),\n      targetOffset: targetOffset\n    }) : _extends(_extends({}, placements[key]), {\n      overflow: getOverflowOptions(autoAdjustOverflow)\n    });\n    placementMap[key].ignoreShake = true;\n  });\n  return placementMap;\n}","map":{"version":3,"sources":["tooltip/placements.jsx"],"names":["autoAdjustOverflowEnabled","adjustX","adjustY","autoAdjustOverflowDisabled","targetOffset","autoAdjustOverflow","arrowWidth","horizontalArrowShift","verticalArrowShift","config","placementMap","left","points","offset","right","top","bottom","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom","Object","overflow","getOverflowOptions","placements"],"mappings":"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","sourcesContent":["import { placements } from 'rc-tooltip/lib/placements';\nconst autoAdjustOverflowEnabled = {\n    adjustX: 1,\n    adjustY: 1,\n};\nconst autoAdjustOverflowDisabled = {\n    adjustX: 0,\n    adjustY: 0,\n};\nconst targetOffset = [0, 0];\nexport function getOverflowOptions(autoAdjustOverflow) {\n    if (typeof autoAdjustOverflow === 'boolean') {\n        return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;\n    }\n    return Object.assign(Object.assign({}, autoAdjustOverflowDisabled), autoAdjustOverflow);\n}\nexport default function getPlacements(config) {\n    const { arrowWidth = 5, horizontalArrowShift = 16, verticalArrowShift = 8, autoAdjustOverflow, } = config;\n    const placementMap = {\n        left: {\n            points: ['cr', 'cl'],\n            offset: [-4, 0],\n        },\n        right: {\n            points: ['cl', 'cr'],\n            offset: [4, 0],\n        },\n        top: {\n            points: ['bc', 'tc'],\n            offset: [0, -4],\n        },\n        bottom: {\n            points: ['tc', 'bc'],\n            offset: [0, 4],\n        },\n        topLeft: {\n            points: ['bl', 'tc'],\n            offset: [-(horizontalArrowShift + arrowWidth), -4],\n        },\n        leftTop: {\n            points: ['tr', 'cl'],\n            offset: [-4, -(verticalArrowShift + arrowWidth)],\n        },\n        topRight: {\n            points: ['br', 'tc'],\n            offset: [horizontalArrowShift + arrowWidth, -4],\n        },\n        rightTop: {\n            points: ['tl', 'cr'],\n            offset: [4, -(verticalArrowShift + arrowWidth)],\n        },\n        bottomRight: {\n            points: ['tr', 'bc'],\n            offset: [horizontalArrowShift + arrowWidth, 4],\n        },\n        rightBottom: {\n            points: ['bl', 'cr'],\n            offset: [4, verticalArrowShift + arrowWidth],\n        },\n        bottomLeft: {\n            points: ['tl', 'bc'],\n            offset: [-(horizontalArrowShift + arrowWidth), 4],\n        },\n        leftBottom: {\n            points: ['br', 'cl'],\n            offset: [-4, verticalArrowShift + arrowWidth],\n        },\n    };\n    Object.keys(placementMap).forEach(key => {\n        placementMap[key] = config.arrowPointAtCenter\n            ? Object.assign(Object.assign({}, placementMap[key]), { overflow: getOverflowOptions(autoAdjustOverflow), targetOffset }) : Object.assign(Object.assign({}, placements[key]), { overflow: getOverflowOptions(autoAdjustOverflow) });\n        placementMap[key].ignoreShake = true;\n    });\n    return placementMap;\n}\n"]},"metadata":{},"sourceType":"module"}