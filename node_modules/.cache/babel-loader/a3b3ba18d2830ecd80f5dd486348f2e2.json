{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport generateSelector from \"rc-select/es/generate\";\nimport { getLabeledValue } from \"rc-select/es/utils/valueUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { INTERNAL_PROPS_MARK } from \"rc-select/es/interface/generator\";\nimport warning from \"rc-util/es/warning\";\nimport OptionList from './OptionList';\nimport TreeNode from './TreeNode';\nimport { flattenOptions, filterOptions, isValueDisabled, findValueOption, addValue, removeValue, getRawValueLabeled, toArray } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { SelectContext } from './Context';\nimport useTreeData from './hooks/useTreeData';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport { formatStrategyKeys, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport { fillAdditionalInfo } from './utils/legacyUtil';\nimport useSelectValues from './hooks/useSelectValues';\nvar OMIT_PROPS = ['expandedKeys', 'treeData', 'treeCheckable', 'showCheckedStrategy', 'searchPlaceholder', 'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeNodeFilterProp', 'filterTreeNode', 'dropdownPopupAlign', 'treeDefaultExpandAll', 'treeCheckStrictly', 'treeExpandedKeys', 'treeLoadedKeys', 'treeMotion', 'onTreeExpand', 'onTreeLoad', 'loadData', 'treeDataSimpleMode', 'treeNodeLabelProp', 'treeDefaultExpandedKeys'];\nvar RefSelect = generateSelector({\n  prefixCls: 'rc-tree-select',\n  components: {\n    optionList: OptionList\n  },\n  // Not use generate since we will handle ourself\n  convertChildrenToData: function convertChildrenToData() {\n    return null;\n  },\n  flattenOptions: flattenOptions,\n  // Handle `optionLabelProp` in TreeSelect component\n  getLabeledValue: getLabeledValue,\n  filterOptions: filterOptions,\n  isValueDisabled: isValueDisabled,\n  findValueOption: findValueOption,\n  omitDOMProps: function omitDOMProps(props) {\n    var cloneProps = _objectSpread({}, props);\n\n    OMIT_PROPS.forEach(function (prop) {\n      delete cloneProps[prop];\n    });\n    return cloneProps;\n  }\n});\nRefSelect.displayName = 'Select';\nvar RefTreeSelect = React.forwardRef(function (props, ref) {\n  var multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? 'SHOW_CHILD' : _props$showCheckedStr,\n      labelInValue = props.labelInValue,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      children = props.children,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeLine = props.treeLine,\n      treeMotion = props.treeMotion,\n      filterTreeNode = props.filterTreeNode,\n      dropdownPopupAlign = props.dropdownPopupAlign,\n      onChange = props.onChange,\n      onTreeExpand = props.onTreeExpand,\n      onTreeLoad = props.onTreeLoad,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedMultiple = multiple || mergedCheckable;\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue; // ========================== Ref ==========================\n\n  var selectRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: selectRef.current.focus,\n      blur: selectRef.current.blur\n    };\n  }); // ======================= Tree Data =======================\n  // Legacy both support `label` or `title` if not set.\n  // We have to fallback to function to handle this\n\n  var getTreeNodeLabelProp = function getTreeNodeLabelProp(node) {\n    if (treeNodeLabelProp) {\n      return node[treeNodeLabelProp];\n    }\n\n    if (!treeData) {\n      return node.title;\n    }\n\n    return node.label || node.title;\n  };\n\n  var mergedTreeData = useTreeData(treeData, children, {\n    getLabelProp: getTreeNodeLabelProp,\n    simpleMode: treeDataSimpleMode\n  });\n  var flattedOptions = React.useMemo(function () {\n    return flattenOptions(mergedTreeData);\n  }, [mergedTreeData]);\n\n  var _useKeyValueMap = useKeyValueMap(flattedOptions),\n      _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // Only generate keyEntities for check conduction when is `treeCheckable`\n\n\n  var _React$useMemo = React.useMemo(function () {\n    if (treeConduction) {\n      return convertDataToEntities(mergedTreeData);\n    }\n\n    return {\n      keyEntities: null\n    };\n  }, [mergedTreeData, treeCheckable, treeCheckStrictly]),\n      conductKeyEntities = _React$useMemo.keyEntities; // ========================= Value =========================\n\n\n  var _React$useState = React.useState(props.defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var mergedValue = 'value' in props ? props.value : value;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n  var splitRawValues = function splitRawValues(newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (getEntityByValue(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  };\n\n  var _React$useMemo2 = React.useMemo(function () {\n    var valueHalfCheckedKeys = [];\n    var newRawValues = [];\n    toArray(mergedValue).forEach(function (item) {\n      if (item && _typeof(item) === 'object' && 'value' in item) {\n        if (item.halfChecked && treeCheckStrictly) {\n          var entity = getEntityByValue(item.value);\n          valueHalfCheckedKeys.push(entity ? entity.key : item.value);\n        } else {\n          newRawValues.push(item.value);\n        }\n      } else {\n        newRawValues.push(item);\n      }\n    }); // We need do conduction of values\n\n    if (treeConduction) {\n      var _splitRawValues = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues.missingRawValues,\n          existRawValues = _splitRawValues.existRawValues;\n\n      var keyList = existRawValues.map(function (val) {\n        return getEntityByValue(val).key;\n      });\n\n      var _conductCheck = conductCheck(keyList, true, conductKeyEntities),\n          checkedKeys = _conductCheck.checkedKeys,\n          halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n      return [[].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n        return getEntityByKey(key).data.value;\n      }))), halfCheckedKeys];\n    }\n\n    return [newRawValues, valueHalfCheckedKeys];\n  }, [mergedValue, mergedMultiple, mergedLabelInValue, treeCheckable, treeCheckStrictly]),\n      _React$useMemo3 = _slicedToArray(_React$useMemo2, 2),\n      rawValues = _React$useMemo3[0],\n      rawHalfCheckedKeys = _React$useMemo3[1];\n\n  var selectValues = useSelectValues(rawValues, {\n    treeConduction: treeConduction,\n    value: mergedValue,\n    showCheckedStrategy: showCheckedStrategy,\n    conductKeyEntities: conductKeyEntities,\n    getEntityByValue: getEntityByValue,\n    getEntityByKey: getEntityByKey,\n    getLabelProp: getTreeNodeLabelProp\n  });\n\n  var triggerChange = function triggerChange(newRawValues, extra, source) {\n    setValue(mergedMultiple ? newRawValues : newRawValues[0]);\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction && showCheckedStrategy !== 'SHOW_ALL') {\n        var keyList = newRawValues.map(function (val) {\n          var entity = getEntityByValue(val);\n          return entity ? entity.key : val;\n        });\n        var formattedKeyList = formatStrategyKeys(keyList, showCheckedStrategy, conductKeyEntities);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = getEntityByKey(key);\n          return entity ? entity.data.value : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnValues = mergedLabelInValue ? getRawValueLabeled(eventValues, mergedValue, getEntityByValue, getTreeNodeLabelProp) : eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfCheckedKeys.map(function (key) {\n          var entity = getEntityByKey(key);\n          return entity ? entity.data.value : key;\n        }).filter(function (val) {\n          return !eventValues.includes(val);\n        });\n        returnValues = [].concat(_toConsumableArray(returnValues), _toConsumableArray(getRawValueLabeled(halfValues, mergedValue, getEntityByValue, getTreeNodeLabelProp)));\n      }\n\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: selectValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : eventValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? getTreeNodeLabelProp(entity.data) : null;\n      }), additionalInfo);\n    }\n  };\n\n  var onInternalSelect = function onInternalSelect(selectValue, option, source) {\n    var eventValue = mergedLabelInValue ? selectValue : selectValue;\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectValue], {\n        selected: true,\n        triggerValue: selectValue\n      }, source);\n    } else {\n      var newRawValues = addValue(rawValues, selectValue); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues2 = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues2.missingRawValues,\n            existRawValues = _splitRawValues2.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck2 = conductCheck(keyList, true, conductKeyEntities),\n            checkedKeys = _conductCheck2.checkedKeys;\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: true,\n        triggerValue: selectValue\n      }, source);\n    }\n\n    if (onSelect) {\n      onSelect(eventValue, option);\n    }\n  };\n\n  var onInternalDeselect = function onInternalDeselect(selectValue, option, source) {\n    var eventValue = mergedLabelInValue ? selectValue : selectValue;\n    var newRawValues = removeValue(rawValues, selectValue); // Remove keys if tree conduction\n\n    if (treeConduction) {\n      var _splitRawValues3 = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues3.missingRawValues,\n          existRawValues = _splitRawValues3.existRawValues;\n\n      var keyList = existRawValues.map(function (val) {\n        return getEntityByValue(val).key;\n      });\n\n      var _conductCheck3 = conductCheck(keyList, {\n        checked: false,\n        halfCheckedKeys: rawHalfCheckedKeys\n      }, conductKeyEntities),\n          checkedKeys = _conductCheck3.checkedKeys;\n\n      newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n        return getEntityByKey(key).data.value;\n      })));\n    }\n\n    triggerChange(newRawValues, {\n      selected: false,\n      triggerValue: selectValue\n    }, source);\n\n    if (onDeselect) {\n      onDeselect(eventValue, option);\n    }\n  };\n\n  var onInternalClear = function onInternalClear() {\n    triggerChange([], null, 'clear');\n  }; // ========================= Open ==========================\n\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ======================== Warning ========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ======================== Render =========================\n  // We pass some props into select props style\n\n\n  var selectProps = {\n    optionLabelProp: null,\n    optionFilterProp: treeNodeFilterProp,\n    dropdownAlign: dropdownPopupAlign,\n    internalProps: {\n      mark: INTERNAL_PROPS_MARK,\n      onClear: onInternalClear,\n      skipTriggerChange: true,\n      skipTriggerSelect: true,\n      onRawSelect: onInternalSelect,\n      onRawDeselect: onInternalDeselect\n    }\n  };\n\n  if ('filterTreeNode' in props) {\n    selectProps.filterOption = filterTreeNode;\n  }\n\n  return React.createElement(SelectContext.Provider, {\n    value: {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawValues,\n      halfCheckedKeys: rawHalfCheckedKeys,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp\n    }\n  }, React.createElement(RefSelect, Object.assign({\n    ref: selectRef,\n    mode: mergedMultiple ? 'multiple' : null\n  }, props, selectProps, {\n    value: selectValues,\n    // We will handle this ourself since we need calculate conduction\n    labelInValue: true,\n    options: mergedTreeData,\n    onChange: null,\n    onSelect: null,\n    onDeselect: null,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange\n  })));\n}); // Use class component since typescript not support generic\n// by `forwardRef` with function component yet.\n\nvar TreeSelect =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TreeSelect, _React$Component);\n\n  function TreeSelect() {\n    var _this;\n\n    _classCallCheck(this, TreeSelect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeSelect).apply(this, arguments));\n    _this.selectRef = React.createRef();\n\n    _this.focus = function () {\n      _this.selectRef.current.focus();\n    };\n\n    _this.blur = function () {\n      _this.selectRef.current.blur();\n    };\n\n    return _this;\n  }\n\n  _createClass(TreeSelect, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(RefTreeSelect, Object.assign({\n        ref: this.selectRef\n      }, this.props));\n    }\n  }]);\n\n  return TreeSelect;\n}(React.Component);\n\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default TreeSelect;","map":{"version":3,"sources":["/Users/nancyou/Desktop/nasa/node_modules/rc-tree-select/es/TreeSelect.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_possibleConstructorReturn","self","call","_typeof","_assertThisInitialized","ReferenceError","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","constructor","value","_setPrototypeOf","p","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","iter","Symbol","iterator","toString","Array","from","isArray","arr2","obj","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","err","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread","arguments","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","React","generateSelector","getLabeledValue","convertDataToEntities","conductCheck","INTERNAL_PROPS_MARK","warning","OptionList","TreeNode","flattenOptions","filterOptions","isValueDisabled","findValueOption","addValue","removeValue","getRawValueLabeled","toArray","warningProps","SelectContext","useTreeData","useKeyValueMap","useKeyValueMapping","formatStrategyKeys","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","fillAdditionalInfo","useSelectValues","OMIT_PROPS","RefSelect","prefixCls","components","optionList","convertChildrenToData","omitDOMProps","cloneProps","prop","displayName","RefTreeSelect","forwardRef","ref","multiple","treeCheckable","treeCheckStrictly","_props$showCheckedStr","showCheckedStrategy","labelInValue","loadData","treeLoadedKeys","_props$treeNodeFilter","treeNodeFilterProp","treeNodeLabelProp","treeDataSimpleMode","treeData","treeExpandedKeys","treeDefaultExpandedKeys","treeDefaultExpandAll","children","treeIcon","showTreeIcon","switcherIcon","treeLine","treeMotion","filterTreeNode","dropdownPopupAlign","onChange","onTreeExpand","onTreeLoad","onDropdownVisibleChange","onSelect","onDeselect","mergedCheckable","mergedMultiple","treeConduction","mergedLabelInValue","selectRef","useRef","useImperativeHandle","focus","current","blur","getTreeNodeLabelProp","node","title","label","mergedTreeData","getLabelProp","simpleMode","flattedOptions","useMemo","_useKeyValueMap","_useKeyValueMap2","cacheKeyMap","cacheValueMap","_useKeyValueMapping","_useKeyValueMapping2","getEntityByKey","getEntityByValue","_React$useMemo","keyEntities","conductKeyEntities","_React$useState","useState","defaultValue","_React$useState2","setValue","mergedValue","splitRawValues","newRawValues","missingRawValues","existRawValues","val","_React$useMemo2","valueHalfCheckedKeys","item","halfChecked","entity","_splitRawValues","keyList","map","_conductCheck","checkedKeys","halfCheckedKeys","concat","data","_React$useMemo3","rawValues","rawHalfCheckedKeys","selectValues","triggerChange","extra","eventValues","formattedKeyList","_ref","triggerValue","selected","returnValues","halfValues","includes","additionalInfo","preValue","showPosition","checked","onInternalSelect","selectValue","option","eventValue","_splitRawValues2","_conductCheck2","onInternalDeselect","_splitRawValues3","_conductCheck3","onInternalClear","onInternalDropdownVisibleChange","useCallback","open","legacyParam","get","process","env","NODE_ENV","selectProps","optionLabelProp","optionFilterProp","dropdownAlign","internalProps","mark","onClear","skipTriggerChange","skipTriggerSelect","onRawSelect","onRawDeselect","filterOption","createElement","Provider","checkable","assign","mode","options","TreeSelect","_React$Component","_this","createRef","render","Component"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport generateSelector from \"rc-select/es/generate\";\nimport { getLabeledValue } from \"rc-select/es/utils/valueUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { INTERNAL_PROPS_MARK } from \"rc-select/es/interface/generator\";\nimport warning from \"rc-util/es/warning\";\nimport OptionList from './OptionList';\nimport TreeNode from './TreeNode';\nimport { flattenOptions, filterOptions, isValueDisabled, findValueOption, addValue, removeValue, getRawValueLabeled, toArray } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { SelectContext } from './Context';\nimport useTreeData from './hooks/useTreeData';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport { formatStrategyKeys, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport { fillAdditionalInfo } from './utils/legacyUtil';\nimport useSelectValues from './hooks/useSelectValues';\nvar OMIT_PROPS = ['expandedKeys', 'treeData', 'treeCheckable', 'showCheckedStrategy', 'searchPlaceholder', 'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeNodeFilterProp', 'filterTreeNode', 'dropdownPopupAlign', 'treeDefaultExpandAll', 'treeCheckStrictly', 'treeExpandedKeys', 'treeLoadedKeys', 'treeMotion', 'onTreeExpand', 'onTreeLoad', 'loadData', 'treeDataSimpleMode', 'treeNodeLabelProp', 'treeDefaultExpandedKeys'];\nvar RefSelect = generateSelector({\n  prefixCls: 'rc-tree-select',\n  components: {\n    optionList: OptionList\n  },\n  // Not use generate since we will handle ourself\n  convertChildrenToData: function convertChildrenToData() {\n    return null;\n  },\n  flattenOptions: flattenOptions,\n  // Handle `optionLabelProp` in TreeSelect component\n  getLabeledValue: getLabeledValue,\n  filterOptions: filterOptions,\n  isValueDisabled: isValueDisabled,\n  findValueOption: findValueOption,\n  omitDOMProps: function omitDOMProps(props) {\n    var cloneProps = _objectSpread({}, props);\n\n    OMIT_PROPS.forEach(function (prop) {\n      delete cloneProps[prop];\n    });\n    return cloneProps;\n  }\n});\nRefSelect.displayName = 'Select';\nvar RefTreeSelect = React.forwardRef(function (props, ref) {\n  var multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? 'SHOW_CHILD' : _props$showCheckedStr,\n      labelInValue = props.labelInValue,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      children = props.children,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeLine = props.treeLine,\n      treeMotion = props.treeMotion,\n      filterTreeNode = props.filterTreeNode,\n      dropdownPopupAlign = props.dropdownPopupAlign,\n      onChange = props.onChange,\n      onTreeExpand = props.onTreeExpand,\n      onTreeLoad = props.onTreeLoad,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedMultiple = multiple || mergedCheckable;\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue; // ========================== Ref ==========================\n\n  var selectRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: selectRef.current.focus,\n      blur: selectRef.current.blur\n    };\n  }); // ======================= Tree Data =======================\n  // Legacy both support `label` or `title` if not set.\n  // We have to fallback to function to handle this\n\n  var getTreeNodeLabelProp = function getTreeNodeLabelProp(node) {\n    if (treeNodeLabelProp) {\n      return node[treeNodeLabelProp];\n    }\n\n    if (!treeData) {\n      return node.title;\n    }\n\n    return node.label || node.title;\n  };\n\n  var mergedTreeData = useTreeData(treeData, children, {\n    getLabelProp: getTreeNodeLabelProp,\n    simpleMode: treeDataSimpleMode\n  });\n  var flattedOptions = React.useMemo(function () {\n    return flattenOptions(mergedTreeData);\n  }, [mergedTreeData]);\n\n  var _useKeyValueMap = useKeyValueMap(flattedOptions),\n      _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // Only generate keyEntities for check conduction when is `treeCheckable`\n\n\n  var _React$useMemo = React.useMemo(function () {\n    if (treeConduction) {\n      return convertDataToEntities(mergedTreeData);\n    }\n\n    return {\n      keyEntities: null\n    };\n  }, [mergedTreeData, treeCheckable, treeCheckStrictly]),\n      conductKeyEntities = _React$useMemo.keyEntities; // ========================= Value =========================\n\n\n  var _React$useState = React.useState(props.defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var mergedValue = 'value' in props ? props.value : value;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n  var splitRawValues = function splitRawValues(newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (getEntityByValue(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  };\n\n  var _React$useMemo2 = React.useMemo(function () {\n    var valueHalfCheckedKeys = [];\n    var newRawValues = [];\n    toArray(mergedValue).forEach(function (item) {\n      if (item && _typeof(item) === 'object' && 'value' in item) {\n        if (item.halfChecked && treeCheckStrictly) {\n          var entity = getEntityByValue(item.value);\n          valueHalfCheckedKeys.push(entity ? entity.key : item.value);\n        } else {\n          newRawValues.push(item.value);\n        }\n      } else {\n        newRawValues.push(item);\n      }\n    }); // We need do conduction of values\n\n    if (treeConduction) {\n      var _splitRawValues = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues.missingRawValues,\n          existRawValues = _splitRawValues.existRawValues;\n\n      var keyList = existRawValues.map(function (val) {\n        return getEntityByValue(val).key;\n      });\n\n      var _conductCheck = conductCheck(keyList, true, conductKeyEntities),\n          checkedKeys = _conductCheck.checkedKeys,\n          halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n      return [[].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n        return getEntityByKey(key).data.value;\n      }))), halfCheckedKeys];\n    }\n\n    return [newRawValues, valueHalfCheckedKeys];\n  }, [mergedValue, mergedMultiple, mergedLabelInValue, treeCheckable, treeCheckStrictly]),\n      _React$useMemo3 = _slicedToArray(_React$useMemo2, 2),\n      rawValues = _React$useMemo3[0],\n      rawHalfCheckedKeys = _React$useMemo3[1];\n\n  var selectValues = useSelectValues(rawValues, {\n    treeConduction: treeConduction,\n    value: mergedValue,\n    showCheckedStrategy: showCheckedStrategy,\n    conductKeyEntities: conductKeyEntities,\n    getEntityByValue: getEntityByValue,\n    getEntityByKey: getEntityByKey,\n    getLabelProp: getTreeNodeLabelProp\n  });\n\n  var triggerChange = function triggerChange(newRawValues, extra, source) {\n    setValue(mergedMultiple ? newRawValues : newRawValues[0]);\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction && showCheckedStrategy !== 'SHOW_ALL') {\n        var keyList = newRawValues.map(function (val) {\n          var entity = getEntityByValue(val);\n          return entity ? entity.key : val;\n        });\n        var formattedKeyList = formatStrategyKeys(keyList, showCheckedStrategy, conductKeyEntities);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = getEntityByKey(key);\n          return entity ? entity.data.value : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnValues = mergedLabelInValue ? getRawValueLabeled(eventValues, mergedValue, getEntityByValue, getTreeNodeLabelProp) : eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfCheckedKeys.map(function (key) {\n          var entity = getEntityByKey(key);\n          return entity ? entity.data.value : key;\n        }).filter(function (val) {\n          return !eventValues.includes(val);\n        });\n        returnValues = [].concat(_toConsumableArray(returnValues), _toConsumableArray(getRawValueLabeled(halfValues, mergedValue, getEntityByValue, getTreeNodeLabelProp)));\n      }\n\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: selectValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : eventValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? getTreeNodeLabelProp(entity.data) : null;\n      }), additionalInfo);\n    }\n  };\n\n  var onInternalSelect = function onInternalSelect(selectValue, option, source) {\n    var eventValue = mergedLabelInValue ? selectValue : selectValue;\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectValue], {\n        selected: true,\n        triggerValue: selectValue\n      }, source);\n    } else {\n      var newRawValues = addValue(rawValues, selectValue); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues2 = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues2.missingRawValues,\n            existRawValues = _splitRawValues2.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck2 = conductCheck(keyList, true, conductKeyEntities),\n            checkedKeys = _conductCheck2.checkedKeys;\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: true,\n        triggerValue: selectValue\n      }, source);\n    }\n\n    if (onSelect) {\n      onSelect(eventValue, option);\n    }\n  };\n\n  var onInternalDeselect = function onInternalDeselect(selectValue, option, source) {\n    var eventValue = mergedLabelInValue ? selectValue : selectValue;\n    var newRawValues = removeValue(rawValues, selectValue); // Remove keys if tree conduction\n\n    if (treeConduction) {\n      var _splitRawValues3 = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues3.missingRawValues,\n          existRawValues = _splitRawValues3.existRawValues;\n\n      var keyList = existRawValues.map(function (val) {\n        return getEntityByValue(val).key;\n      });\n\n      var _conductCheck3 = conductCheck(keyList, {\n        checked: false,\n        halfCheckedKeys: rawHalfCheckedKeys\n      }, conductKeyEntities),\n          checkedKeys = _conductCheck3.checkedKeys;\n\n      newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n        return getEntityByKey(key).data.value;\n      })));\n    }\n\n    triggerChange(newRawValues, {\n      selected: false,\n      triggerValue: selectValue\n    }, source);\n\n    if (onDeselect) {\n      onDeselect(eventValue, option);\n    }\n  };\n\n  var onInternalClear = function onInternalClear() {\n    triggerChange([], null, 'clear');\n  }; // ========================= Open ==========================\n\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ======================== Warning ========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ======================== Render =========================\n  // We pass some props into select props style\n\n\n  var selectProps = {\n    optionLabelProp: null,\n    optionFilterProp: treeNodeFilterProp,\n    dropdownAlign: dropdownPopupAlign,\n    internalProps: {\n      mark: INTERNAL_PROPS_MARK,\n      onClear: onInternalClear,\n      skipTriggerChange: true,\n      skipTriggerSelect: true,\n      onRawSelect: onInternalSelect,\n      onRawDeselect: onInternalDeselect\n    }\n  };\n\n  if ('filterTreeNode' in props) {\n    selectProps.filterOption = filterTreeNode;\n  }\n\n  return React.createElement(SelectContext.Provider, {\n    value: {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawValues,\n      halfCheckedKeys: rawHalfCheckedKeys,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp\n    }\n  }, React.createElement(RefSelect, Object.assign({\n    ref: selectRef,\n    mode: mergedMultiple ? 'multiple' : null\n  }, props, selectProps, {\n    value: selectValues,\n    // We will handle this ourself since we need calculate conduction\n    labelInValue: true,\n    options: mergedTreeData,\n    onChange: null,\n    onSelect: null,\n    onDeselect: null,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange\n  })));\n}); // Use class component since typescript not support generic\n// by `forwardRef` with function component yet.\n\nvar TreeSelect =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TreeSelect, _React$Component);\n\n  function TreeSelect() {\n    var _this;\n\n    _classCallCheck(this, TreeSelect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeSelect).apply(this, arguments));\n    _this.selectRef = React.createRef();\n\n    _this.focus = function () {\n      _this.selectRef.current.focus();\n    };\n\n    _this.blur = function () {\n      _this.selectRef.current.blur();\n    };\n\n    return _this;\n  }\n\n  _createClass(TreeSelect, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(RefTreeSelect, Object.assign({\n        ref: this.selectRef\n      }, this.props));\n    }\n  }]);\n\n  return TreeSelect;\n}(React.Component);\n\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default TreeSelect;"]},"metadata":{},"sourceType":"module"}