{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport padStart from 'lodash/padStart';\nimport { PickerPanel as RCPickerPanel } from 'rc-picker';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport enUS from './locale/en_US';\nimport { ConfigContext } from '../config-provider';\nimport CalendarHeader from './Header';\n\nfunction generateCalendar(generateConfig) {\n  function isSameMonth(date1, date2) {\n    return date1 === date2 || date1 && date2 && generateConfig.getYear(date1) === generateConfig.getYear(date2) && generateConfig.getMonth(date1) === generateConfig.getMonth(date2);\n  }\n\n  function isSameDate(date1, date2) {\n    return isSameMonth(date1, date2) && generateConfig.getDate(date1) === generateConfig.getDate(date2);\n  }\n\n  var Calendar = function Calendar(props) {\n    var customizePrefixCls = props.prefixCls,\n        className = props.className,\n        dateFullCellRender = props.dateFullCellRender,\n        dateCellRender = props.dateCellRender,\n        monthFullCellRender = props.monthFullCellRender,\n        monthCellRender = props.monthCellRender,\n        headerRender = props.headerRender,\n        value = props.value,\n        defaultValue = props.defaultValue,\n        disabledDate = props.disabledDate,\n        mode = props.mode,\n        validRange = props.validRange,\n        _props$fullscreen = props.fullscreen,\n        fullscreen = _props$fullscreen === void 0 ? true : _props$fullscreen,\n        onChange = props.onChange,\n        onPanelChange = props.onPanelChange,\n        onSelect = props.onSelect;\n\n    var _React$useContext = React.useContext(ConfigContext),\n        getPrefixCls = _React$useContext.getPrefixCls;\n\n    var prefixCls = getPrefixCls('picker', customizePrefixCls);\n    var calendarPrefixCls = \"\".concat(prefixCls, \"-calendar\");\n    var today = generateConfig.getNow(); // ====================== State =======================\n    // Value\n\n    var _React$useState = React.useState(function () {\n      return value || defaultValue || generateConfig.getNow();\n    }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        innerValue = _React$useState2[0],\n        setInnerValue = _React$useState2[1];\n\n    var mergedValue = value || innerValue; // Mode\n\n    var _React$useState3 = React.useState(function () {\n      return mode || 'month';\n    }),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        innerMode = _React$useState4[0],\n        setInnerMode = _React$useState4[1];\n\n    var mergedMode = mode || innerMode;\n    var panelMode = React.useMemo(function () {\n      return mergedMode === 'year' ? 'month' : 'date';\n    }, [mergedMode]); // Disabled Date\n\n    var mergedDisabledDate = React.useMemo(function () {\n      if (validRange) {\n        return function (date) {\n          return generateConfig.isAfter(validRange[0], date) || generateConfig.isAfter(date, validRange[1]);\n        };\n      }\n\n      return disabledDate;\n    }, [disabledDate, validRange]); // ====================== Events ======================\n\n    var triggerPanelChange = function triggerPanelChange(date, newMode) {\n      if (onPanelChange) {\n        onPanelChange(date, newMode);\n      }\n    };\n\n    var triggerChange = function triggerChange(date) {\n      setInnerValue(date);\n\n      if (!isSameDate(date, mergedValue)) {\n        triggerPanelChange(date, mergedMode);\n\n        if (onChange) {\n          onChange(date);\n        }\n      }\n    };\n\n    var triggerModeChange = function triggerModeChange(newMode) {\n      setInnerMode(newMode);\n      triggerPanelChange(mergedValue, newMode);\n    };\n\n    var onInternalSelect = function onInternalSelect(date) {\n      triggerChange(date);\n\n      if (onSelect) {\n        onSelect(date);\n      }\n    }; // ====================== Locale ======================\n\n\n    var getDefaultLocale = function getDefaultLocale() {\n      var locale = props.locale;\n\n      var result = _extends(_extends({}, enUS), locale);\n\n      result.lang = _extends(_extends({}, result.lang), (locale || {}).lang);\n      return result;\n    }; // ====================== Render ======================\n\n\n    var dateRender = React.useCallback(function (date) {\n      if (dateFullCellRender) {\n        return dateFullCellRender(date);\n      }\n\n      return React.createElement(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-cell-inner\"), \"\".concat(calendarPrefixCls, \"-date\"), _defineProperty({}, \"\".concat(calendarPrefixCls, \"-date-today\"), isSameDate(today, date)))\n      }, React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-value\")\n      }, padStart(String(generateConfig.getDate(date)), 2, '0')), React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-content\")\n      }, dateCellRender && dateCellRender(date)));\n    }, [dateFullCellRender, dateCellRender]);\n    var monthRender = React.useCallback(function (date, locale) {\n      if (monthFullCellRender) {\n        return monthFullCellRender(date);\n      }\n\n      var months = locale.shortMonths || generateConfig.locale.getShortMonths(locale.locale);\n      return React.createElement(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-cell-inner\"), \"\".concat(calendarPrefixCls, \"-date\"), _defineProperty({}, \"\".concat(calendarPrefixCls, \"-date-today\"), isSameMonth(today, date)))\n      }, React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-value\")\n      }, months[generateConfig.getMonth(date)]), React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-content\")\n      }, monthCellRender && monthCellRender(date)));\n    }, [monthFullCellRender, monthCellRender]);\n    return React.createElement(LocaleReceiver, {\n      componentName: \"Calendar\",\n      defaultLocale: getDefaultLocale\n    }, function (mergedLocale) {\n      var _classNames3;\n\n      return React.createElement(\"div\", {\n        className: classNames(calendarPrefixCls, className, (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(calendarPrefixCls, \"-full\"), fullscreen), _defineProperty(_classNames3, \"\".concat(calendarPrefixCls, \"-mini\"), !fullscreen), _classNames3))\n      }, headerRender ? headerRender({\n        value: mergedValue,\n        type: mergedMode,\n        onChange: onInternalSelect,\n        onTypeChange: triggerModeChange\n      }) : React.createElement(CalendarHeader, {\n        prefixCls: calendarPrefixCls,\n        value: mergedValue,\n        generateConfig: generateConfig,\n        mode: mergedMode,\n        fullscreen: fullscreen,\n        locale: mergedLocale.lang,\n        validRange: validRange,\n        onChange: onInternalSelect,\n        onModeChange: triggerModeChange\n      }), React.createElement(RCPickerPanel, {\n        value: mergedValue,\n        prefixCls: prefixCls,\n        locale: mergedLocale.lang,\n        generateConfig: generateConfig,\n        dateRender: dateRender,\n        monthCellRender: function monthCellRender(date) {\n          return monthRender(date, mergedLocale.lang);\n        },\n        onSelect: onInternalSelect,\n        mode: panelMode,\n        picker: panelMode,\n        disabledDate: mergedDisabledDate,\n        hideHeader: true\n      }));\n    });\n  };\n\n  return Calendar;\n}\n\nexport default generateCalendar;","map":{"version":3,"sources":["calendar/generateCalendar.jsx"],"names":["PickerPanel","date1","generateConfig","isSameMonth","Calendar","customizePrefixCls","className","dateFullCellRender","dateCellRender","monthFullCellRender","monthCellRender","headerRender","value","defaultValue","disabledDate","mode","validRange","fullscreen","onChange","onPanelChange","onSelect","props","getPrefixCls","React","prefixCls","calendarPrefixCls","today","innerValue","setInnerValue","mergedValue","innerMode","setInnerMode","mergedMode","panelMode","mergedDisabledDate","triggerPanelChange","triggerChange","isSameDate","triggerModeChange","onInternalSelect","getDefaultLocale","locale","result","dateRender","classNames","padStart","String","monthRender","months","type","onTypeChange","mergedLocale"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport padStart from 'lodash/padStart';\nimport { PickerPanel as RCPickerPanel } from 'rc-picker';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport enUS from './locale/en_US';\nimport { ConfigContext } from '../config-provider';\nimport CalendarHeader from './Header';\nfunction generateCalendar(generateConfig) {\n    function isSameMonth(date1, date2) {\n        return (date1 === date2 ||\n            (date1 &&\n                date2 &&\n                generateConfig.getYear(date1) === generateConfig.getYear(date2) &&\n                generateConfig.getMonth(date1) === generateConfig.getMonth(date2)));\n    }\n    function isSameDate(date1, date2) {\n        return (isSameMonth(date1, date2) && generateConfig.getDate(date1) === generateConfig.getDate(date2));\n    }\n    const Calendar = (props) => {\n        const { prefixCls: customizePrefixCls, className, dateFullCellRender, dateCellRender, monthFullCellRender, monthCellRender, headerRender, value, defaultValue, disabledDate, mode, validRange, fullscreen = true, onChange, onPanelChange, onSelect, } = props;\n        const { getPrefixCls } = React.useContext(ConfigContext);\n        const prefixCls = getPrefixCls('picker', customizePrefixCls);\n        const calendarPrefixCls = `${prefixCls}-calendar`;\n        const today = generateConfig.getNow();\n        // ====================== State =======================\n        // Value\n        const [innerValue, setInnerValue] = React.useState(() => value || defaultValue || generateConfig.getNow());\n        const mergedValue = value || innerValue;\n        // Mode\n        const [innerMode, setInnerMode] = React.useState(() => mode || 'month');\n        const mergedMode = mode || innerMode;\n        const panelMode = React.useMemo(() => (mergedMode === 'year' ? 'month' : 'date'), [mergedMode]);\n        // Disabled Date\n        const mergedDisabledDate = React.useMemo(() => {\n            if (validRange) {\n                return (date) => {\n                    return (generateConfig.isAfter(validRange[0], date) ||\n                        generateConfig.isAfter(date, validRange[1]));\n                };\n            }\n            return disabledDate;\n        }, [disabledDate, validRange]);\n        // ====================== Events ======================\n        const triggerPanelChange = (date, newMode) => {\n            if (onPanelChange) {\n                onPanelChange(date, newMode);\n            }\n        };\n        const triggerChange = (date) => {\n            setInnerValue(date);\n            if (!isSameDate(date, mergedValue)) {\n                triggerPanelChange(date, mergedMode);\n                if (onChange) {\n                    onChange(date);\n                }\n            }\n        };\n        const triggerModeChange = (newMode) => {\n            setInnerMode(newMode);\n            triggerPanelChange(mergedValue, newMode);\n        };\n        const onInternalSelect = (date) => {\n            triggerChange(date);\n            if (onSelect) {\n                onSelect(date);\n            }\n        };\n        // ====================== Locale ======================\n        const getDefaultLocale = () => {\n            const { locale } = props;\n            const result = Object.assign(Object.assign({}, enUS), locale);\n            result.lang = Object.assign(Object.assign({}, result.lang), (locale || {}).lang);\n            return result;\n        };\n        // ====================== Render ======================\n        const dateRender = React.useCallback((date) => {\n            if (dateFullCellRender) {\n                return dateFullCellRender(date);\n            }\n            return (<div className={classNames(`${prefixCls}-cell-inner`, `${calendarPrefixCls}-date`, {\n                [`${calendarPrefixCls}-date-today`]: isSameDate(today, date),\n            })}>\n            <div className={`${calendarPrefixCls}-date-value`}>\n              {padStart(String(generateConfig.getDate(date)), 2, '0')}\n            </div>\n            <div className={`${calendarPrefixCls}-date-content`}>\n              {dateCellRender && dateCellRender(date)}\n            </div>\n          </div>);\n        }, [dateFullCellRender, dateCellRender]);\n        const monthRender = React.useCallback((date, locale) => {\n            if (monthFullCellRender) {\n                return monthFullCellRender(date);\n            }\n            const months = locale.shortMonths || generateConfig.locale.getShortMonths(locale.locale);\n            return (<div className={classNames(`${prefixCls}-cell-inner`, `${calendarPrefixCls}-date`, {\n                [`${calendarPrefixCls}-date-today`]: isSameMonth(today, date),\n            })}>\n            <div className={`${calendarPrefixCls}-date-value`}>\n              {months[generateConfig.getMonth(date)]}\n            </div>\n            <div className={`${calendarPrefixCls}-date-content`}>\n              {monthCellRender && monthCellRender(date)}\n            </div>\n          </div>);\n        }, [monthFullCellRender, monthCellRender]);\n        return (<LocaleReceiver componentName=\"Calendar\" defaultLocale={getDefaultLocale}>\n        {(mergedLocale) => {\n            return (<div className={classNames(calendarPrefixCls, className, {\n                [`${calendarPrefixCls}-full`]: fullscreen,\n                [`${calendarPrefixCls}-mini`]: !fullscreen,\n            })}>\n              {headerRender ? (headerRender({\n                value: mergedValue,\n                type: mergedMode,\n                onChange: onInternalSelect,\n                onTypeChange: triggerModeChange,\n            })) : (<CalendarHeader prefixCls={calendarPrefixCls} value={mergedValue} generateConfig={generateConfig} mode={mergedMode} fullscreen={fullscreen} locale={mergedLocale.lang} validRange={validRange} onChange={onInternalSelect} onModeChange={triggerModeChange}/>)}\n\n              <RCPickerPanel value={mergedValue} prefixCls={prefixCls} locale={mergedLocale.lang} generateConfig={generateConfig} dateRender={dateRender} monthCellRender={date => monthRender(date, mergedLocale.lang)} onSelect={onInternalSelect} mode={panelMode} picker={panelMode} disabledDate={mergedDisabledDate} hideHeader/>\n            </div>);\n        }}\n      </LocaleReceiver>);\n    };\n    return Calendar;\n}\nexport default generateCalendar;\n"]},"metadata":{},"sourceType":"module"}