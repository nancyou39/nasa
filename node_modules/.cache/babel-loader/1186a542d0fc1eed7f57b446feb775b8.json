{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport padStart from 'lodash/padStart'; // Countdown\n\nvar timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1]];\nexport function formatTimeStr(duration, format) {\n  var leftDuration = duration;\n  var escapeRegex = /\\[[^\\]]*\\]/g;\n  var keepList = (format.match(escapeRegex) || []).map(function (str) {\n    return str.slice(1, -1);\n  });\n  var templateText = format.replace(escapeRegex, '[]');\n  var replacedText = timeUnits.reduce(function (current, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        unit = _ref2[1];\n\n    if (current.indexOf(name) !== -1) {\n      var value = Math.floor(leftDuration / unit);\n      leftDuration -= value * unit;\n      return current.replace(new RegExp(\"\".concat(name, \"+\"), 'g'), function (match) {\n        var len = match.length;\n        return padStart(value.toString(), len, '0');\n      });\n    }\n\n    return current;\n  }, templateText);\n  var index = 0;\n  return replacedText.replace(escapeRegex, function () {\n    var match = keepList[index];\n    index += 1;\n    return match;\n  });\n}\nexport function formatCountdown(value, config) {\n  var _config$format = config.format,\n      format = _config$format === void 0 ? '' : _config$format;\n  var target = new Date(value).getTime();\n  var current = Date.now();\n  var diff = Math.max(target - current, 0);\n  return formatTimeStr(diff, format);\n}","map":{"version":3,"sources":["statistic/utils.jsx"],"names":["timeUnits","leftDuration","escapeRegex","keepList","format","str","templateText","replacedText","name","unit","current","value","Math","len","match","padStart","index","config","target","Date","diff","formatTimeStr"],"mappings":"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","sourcesContent":["import padStart from 'lodash/padStart';\n// Countdown\nconst timeUnits = [\n    ['Y', 1000 * 60 * 60 * 24 * 365],\n    ['M', 1000 * 60 * 60 * 24 * 30],\n    ['D', 1000 * 60 * 60 * 24],\n    ['H', 1000 * 60 * 60],\n    ['m', 1000 * 60],\n    ['s', 1000],\n    ['S', 1],\n];\nexport function formatTimeStr(duration, format) {\n    let leftDuration = duration;\n    const escapeRegex = /\\[[^\\]]*\\]/g;\n    const keepList = (format.match(escapeRegex) || []).map(str => str.slice(1, -1));\n    const templateText = format.replace(escapeRegex, '[]');\n    const replacedText = timeUnits.reduce((current, [name, unit]) => {\n        if (current.indexOf(name) !== -1) {\n            const value = Math.floor(leftDuration / unit);\n            leftDuration -= value * unit;\n            return current.replace(new RegExp(`${name}+`, 'g'), (match) => {\n                const len = match.length;\n                return padStart(value.toString(), len, '0');\n            });\n        }\n        return current;\n    }, templateText);\n    let index = 0;\n    return replacedText.replace(escapeRegex, () => {\n        const match = keepList[index];\n        index += 1;\n        return match;\n    });\n}\nexport function formatCountdown(value, config) {\n    const { format = '' } = config;\n    const target = new Date(value).getTime();\n    const current = Date.now();\n    const diff = Math.max(target - current, 0);\n    return formatTimeStr(diff, format);\n}\n"]},"metadata":{},"sourceType":"module"}