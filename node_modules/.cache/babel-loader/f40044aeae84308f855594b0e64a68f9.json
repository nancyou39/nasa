{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled';\nimport CheckCircleFilled from '@ant-design/icons/CheckCircleFilled';\nimport ExclamationCircleFilled from '@ant-design/icons/ExclamationCircleFilled';\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport CSSMotion from \"rc-animate/es/CSSMotion\";\nimport Col from '../grid/col';\nimport { FormContext } from './context';\nimport { useCacheErrors } from './util';\nvar iconMap = {\n  success: CheckCircleFilled,\n  warning: ExclamationCircleFilled,\n  error: CloseCircleFilled,\n  validating: LoadingOutlined\n};\n\nvar FormItemInput = function FormItemInput(_ref) {\n  var prefixCls = _ref.prefixCls,\n      wrapperCol = _ref.wrapperCol,\n      children = _ref.children,\n      help = _ref.help,\n      errors = _ref.errors,\n      onDomErrorVisibleChange = _ref.onDomErrorVisibleChange,\n      hasFeedback = _ref.hasFeedback,\n      validateStatus = _ref.validateStatus,\n      extra = _ref.extra;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  var baseClassName = \"\".concat(prefixCls, \"-item\");\n  var formContext = React.useContext(FormContext);\n  var mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};\n  var className = classNames(\"\".concat(baseClassName, \"-control\"), mergedWrapperCol.className);\n\n  var _useCacheErrors = useCacheErrors(errors, function (changedVisible) {\n    if (changedVisible) {\n      /**\n       * We trigger in sync to avoid dom shaking but this get warning in react 16.13.\n       * So use Promise to keep in micro async to handle this.\n       * https://github.com/ant-design/ant-design/issues/21698#issuecomment-593743485\n       */\n      Promise.resolve().then(function () {\n        onDomErrorVisibleChange(true);\n      });\n    }\n\n    forceUpdate({});\n  }, !!help),\n      _useCacheErrors2 = _slicedToArray(_useCacheErrors, 2),\n      visible = _useCacheErrors2[0],\n      cacheErrors = _useCacheErrors2[1];\n\n  var memoErrors = useMemo(function () {\n    return cacheErrors;\n  }, visible, function (_, nextVisible) {\n    return nextVisible;\n  }); // Should provides additional icon if `hasFeedback`\n\n  var IconNode = validateStatus && iconMap[validateStatus];\n  var icon = hasFeedback && IconNode ? React.createElement(\"span\", {\n    className: \"\".concat(baseClassName, \"-children-icon\")\n  }, React.createElement(IconNode, null)) : null; // Pass to sub FormItem should not with col info\n\n  var subFormContext = _extends({}, formContext);\n\n  delete subFormContext.labelCol;\n  delete subFormContext.wrapperCol;\n  return React.createElement(FormContext.Provider, {\n    value: subFormContext\n  }, React.createElement(Col, _extends({}, mergedWrapperCol, {\n    className: className\n  }), React.createElement(\"div\", {\n    className: \"\".concat(baseClassName, \"-control-input\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(baseClassName, \"-control-input-content\")\n  }, children), icon), React.createElement(CSSMotion, {\n    visible: visible,\n    motionName: \"show-help\",\n    onLeaveEnd: function onLeaveEnd() {\n      onDomErrorVisibleChange(false);\n    },\n    motionAppear: true,\n    removeOnLeave: true\n  }, function (_ref2) {\n    var motionClassName = _ref2.className;\n    return React.createElement(\"div\", {\n      className: classNames(\"\".concat(baseClassName, \"-explain\"), motionClassName),\n      key: \"help\"\n    }, memoErrors.map(function (error, index) {\n      return (// eslint-disable-next-line react/no-array-index-key\n        React.createElement(\"div\", {\n          key: index\n        }, error)\n      );\n    }));\n  }), extra && React.createElement(\"div\", {\n    className: \"\".concat(baseClassName, \"-extra\")\n  }, extra)));\n};\n\nexport default FormItemInput;","map":{"version":3,"sources":["form/FormItemInput.jsx"],"names":["iconMap","success","warning","error","validating","LoadingOutlined","FormItemInput","prefixCls","wrapperCol","children","help","errors","onDomErrorVisibleChange","hasFeedback","validateStatus","extra","forceUpdate","React","baseClassName","formContext","mergedWrapperCol","className","classNames","visible","cacheErrors","useCacheErrors","Promise","memoErrors","useMemo","IconNode","icon","subFormContext","motionClassName","index"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled';\nimport CheckCircleFilled from '@ant-design/icons/CheckCircleFilled';\nimport ExclamationCircleFilled from '@ant-design/icons/ExclamationCircleFilled';\nimport useMemo from 'rc-util/lib/hooks/useMemo';\nimport CSSMotion from 'rc-animate/lib/CSSMotion';\nimport Col from '../grid/col';\nimport { FormContext } from './context';\nimport { useCacheErrors } from './util';\nconst iconMap = {\n    success: CheckCircleFilled,\n    warning: ExclamationCircleFilled,\n    error: CloseCircleFilled,\n    validating: LoadingOutlined,\n};\nconst FormItemInput = ({ prefixCls, wrapperCol, children, help, errors, onDomErrorVisibleChange, hasFeedback, validateStatus, extra, }) => {\n    const [, forceUpdate] = React.useState({});\n    const baseClassName = `${prefixCls}-item`;\n    const formContext = React.useContext(FormContext);\n    const mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};\n    const className = classNames(`${baseClassName}-control`, mergedWrapperCol.className);\n    const [visible, cacheErrors] = useCacheErrors(errors, changedVisible => {\n        if (changedVisible) {\n            /**\n             * We trigger in sync to avoid dom shaking but this get warning in react 16.13.\n             * So use Promise to keep in micro async to handle this.\n             * https://github.com/ant-design/ant-design/issues/21698#issuecomment-593743485\n             */\n            Promise.resolve().then(() => {\n                onDomErrorVisibleChange(true);\n            });\n        }\n        forceUpdate({});\n    }, !!help);\n    const memoErrors = useMemo(() => cacheErrors, visible, (_, nextVisible) => nextVisible);\n    // Should provides additional icon if `hasFeedback`\n    const IconNode = validateStatus && iconMap[validateStatus];\n    const icon = hasFeedback && IconNode ? (<span className={`${baseClassName}-children-icon`}>\n        <IconNode />\n      </span>) : null;\n    // Pass to sub FormItem should not with col info\n    const subFormContext = Object.assign({}, formContext);\n    delete subFormContext.labelCol;\n    delete subFormContext.wrapperCol;\n    return (<FormContext.Provider value={subFormContext}>\n      <Col {...mergedWrapperCol} className={className}>\n        <div className={`${baseClassName}-control-input`}>\n          <div className={`${baseClassName}-control-input-content`}>{children}</div>\n          {icon}\n        </div>\n        <CSSMotion visible={visible} motionName=\"show-help\" onLeaveEnd={() => {\n        onDomErrorVisibleChange(false);\n    }} motionAppear removeOnLeave>\n          {({ className: motionClassName }) => {\n        return (<div className={classNames(`${baseClassName}-explain`, motionClassName)} key=\"help\">\n                {memoErrors.map((error, index) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <div key={index}>{error}</div>))}\n              </div>);\n    }}\n        </CSSMotion>\n        {extra && <div className={`${baseClassName}-extra`}>{extra}</div>}\n      </Col>\n    </FormContext.Provider>);\n};\nexport default FormItemInput;\n"]},"metadata":{},"sourceType":"module"}