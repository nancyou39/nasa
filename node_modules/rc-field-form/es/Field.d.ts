import * as React from 'react';
import { FieldEntity, FormInstance, InternalNamePath, Meta, NamePath, Rule, Store, ValidateOptions, InternalFormInstance, RuleObject, StoreValue, EventArgs } from './interface';
export declare type ShouldUpdate = true | ((prevValues: Store, nextValues: Store, info: {
    source?: string;
}) => boolean);
interface ChildProps {
    [name: string]: any;
}
export interface FieldProps {
    children?: React.ReactElement | ((control: ChildProps, meta: Meta, form: FormInstance) => React.ReactNode);
    /**
     * Set up `dependencies` field.
     * When dependencies field update and current field is touched,
     * will trigger validate rules and render.
     */
    dependencies?: NamePath[];
    getValueFromEvent?: (...args: EventArgs) => StoreValue;
    name?: NamePath;
    normalize?: (value: StoreValue, prevValue: StoreValue, allValues: Store) => StoreValue;
    rules?: Rule[];
    shouldUpdate?: ShouldUpdate;
    trigger?: string;
    validateTrigger?: string | string[] | false;
    validateFirst?: boolean;
    valuePropName?: string;
    onReset?: () => void;
}
export interface FieldState {
    resetCount: number;
}
declare class Field extends React.Component<FieldProps, FieldState> implements FieldEntity {
    static contextType: React.Context<InternalFormInstance>;
    static defaultProps: {
        trigger: string;
        validateTrigger: string;
        valuePropName: string;
    };
    state: {
        resetCount: number;
    };
    private cancelRegisterFunc;
    private destroy;
    /**
     * Follow state should not management in State since it will async update by React.
     * This makes first render of form can not get correct state value.
     */
    private touched;
    private validatePromise;
    private prevValidating;
    private errors;
    componentDidMount(): void;
    componentWillUnmount(): void;
    cancelRegister: () => void;
    getNamePath: () => InternalNamePath;
    getRules: () => RuleObject[];
    reRender(): void;
    refresh: () => void;
    onStoreChange: FieldEntity['onStoreChange'];
    validateRules: (options?: ValidateOptions) => Promise<string[]>;
    isFieldValidating: () => boolean;
    isFieldTouched: () => boolean;
    getErrors: () => string[];
    getMeta: () => Meta;
    getOnlyChild: (children: string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | ((control: ChildProps, meta: Meta, context: FormInstance) => React.ReactNode)) => {
        child: React.ReactNode;
        isFunction: boolean;
    };
    getValue: (store?: Store) => any;
    getControlled: (childProps?: ChildProps) => {
        [x: string]: any;
    };
    render(): JSX.Element;
}
export default Field;
