{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Nasaphoto","props","console","log","nasaInfo","url","className","src","alt","title","date","explanation","App","state","nasa","this","getData","fetch","r","json","body","setState","type","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0UAoEA,SAASA,EAAUC,GAEjB,OADAC,QAAQC,IAAIF,EAAMG,SAASC,KACpB,yBAAKC,UAAU,aACpB,yBAAKC,IAAKN,EAAMG,SAASC,IAAKG,IAAI,cAClC,yBAAKF,UAAU,mBACb,yBAAKA,UAAU,mBAAmBL,EAAMG,SAASK,OACjD,yBAAKH,UAAU,QAAQL,EAAMG,SAASM,MACtC,yBAAKJ,UAAU,sBAAsBL,EAAMG,SAASO,eAM3CC,M,YAxEb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,KAAM,IAHI,E,kFAQZC,KAAKC,Y,wJAGO,2CACF,uCACH,mD,SAGSC,MAHhBZ,wF,cAGMa,E,gBACaA,EAAEC,O,OAAfC,E,OACNL,KAAKM,SAAS,CAACP,KAAMM,I,sIAKrB,OACE,yBAAKd,UAAU,OACf,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cAAf,gCAGA,yBAAKA,UAAU,OACbE,IAAI,OACJD,IAAI,qFAKV,yBAAKD,UAAU,cACb,kBAACN,EAAD,CAAWI,SAAUW,KAAKF,MAAMC,QAGpC,yBAAKR,UAAU,UACb,kBAAC,IAAD,CACEgB,KAAK,UACLC,KAAK,8CAFP,iBASA,yBAAKjB,UAAU,c,GApDHkB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.50778fd6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport './media.css';\nimport {Button} from 'antd'\n\n\n//import { render } from 'react-dom'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      nasa: []\n    }\n\n  }\n  componentWillMount() {\n    this.getData()\n  }\n  async getData() {\n    const key = 'GtEzNdo5mi0YSZoErBBbklQgnumpHcByw7bhjeGs'\n    let url = 'https://api.nasa.gov/planetary/apod?'\n    url += 'api_key='+key\n    //url += '&date='+YYYY-MM-DD\n    //url += '&hd='+'true'\n    const r = await fetch(url)\n    const body = await r.json() \n    this.setState({nasa: body})\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"logo-wrap\">\n          <div className=\"site-title\">\n            Astronomy Picture of the Day\n            </div>\n          <img className=\"logo\"\n            alt=\"logo\"\n            src=\"https://www.nasa.gov/sites/default/files/thumbnails/image/nasa-logo-web-rgb.png\" \n          />\n        \n      </div>\n      \n      <div className=\"input-wrap\">\n        <Nasaphoto nasaInfo={this.state.nasa}></Nasaphoto> \n      </div>\n\n    <div className=\"button\">\n      <Button \n        type=\"primary\" \n        href=\"https://apod.nasa.gov/apod/archivepix.html\">\n          Past Photos\n      </Button>\n\n    </div>\n\n      </header>\n      <div className=\"nasa\">\n      </div>\n    </div>\n    )\n  }\n}\n\n\nfunction Nasaphoto(props){\n  console.log(props.nasaInfo.url)\n  return <div className=\"nasaphoto\">\n    <img src={props.nasaInfo.url} alt=\"nasaphoto\" />\n    <div className=\"image-text-wrap\">\n      <div className=\"nasaphoto-title\">{props.nasaInfo.title}</div>\n      <div className=\"date\">{props.nasaInfo.date}</div>\n      <div className=\"nasaphoto-descript\">{props.nasaInfo.explanation}</div>\n    </div>\n  </div>\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}